{"version":3,"sources":["eth-tx-params.js","decodings.js","App.js","reportWebVitals.js","index.js"],"names":["renderNamedItem","name","item","index","type","typeClass","amtAndDec","struct","tokenFields","value","filter","toLowerCase","includes","amountFields","length","metadata","contractMap","asAddress","decimals","amount","checkIfPlausibleAmount","open","deCamelCase","map","data","amt","asBN","toString","firstSeg","substr","lastSeg","decimalAmount","className","renderItem","kind","asHex","icon","src","path","logo","address","renderAddressComponentFor","console","log","inspect","Codec","Utils","Inspect","ResultInspector","label","replace","split","join","EthTxParams","decoding","definitions","args","arguments","abi","toUpperCase","argument","href","App","props","state","template","this","decodings","tx","desc","class","Serial","deserializeType","deserializeResult","deserializeCalldataDecoding","i","onClick","setState","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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EACA,gBACA,sBACA,yBACA,wBACA,yBACA,oBACA,UACA,QACA,QACA,2CACA,0DACA,kDACA,uCACA,2DACA,SACA,wBACA,4BACA,8BACA,wCACA,yCACA,uBACA,yBACA,8BACA,0BACA,uBACA,wBACA,gCACA,4BACA,+BACA,iCACA,gCACA,iCACA,4BACA,cACA,gCACA,4BACA,+BACA,iCACA,gCACA,iCACA,4BACA,cACA,gCACA,4BACA,kCACA,oCACA,mCACA,oCACA,+BACA,aACA,WACA,UACA,MACA,QACA,oDACA,qDACA,0BACA,6BACA,yCACA,mEACA,SACA,yBACA,2BACA,8BACA,gCACA,wCACA,mCACA,yBACA,yBACA,4BACA,0BACA,UACA,MACA,IACA,gEACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,wBACA,kBACA,kGACA,yGACA,oGACA,MACA,mBACA,6BACA,mCACA,mCACA,+BACA,yBACA,uBACA,OACA,qBACA,6BACA,mCACA,kCACA,OACA,wBACA,6BACA,2BACA,mCACA,mCACA,4BACA,yBACA,uBACA,OACA,sBACA,2BACA,2BACA,+BACA,yBACA,uBACA,gBACA,wBACA,2BACA,0BACA,gBACA,2BACA,iCACA,gBACA,0EACA,iCACA,4BACA,2BACA,0BACA,8BACA,2BACA,OACA,iCACA,4BACA,2BACA,0BACA,8BACA,2BACA,OACA,0BACA,2BACA,0BACA,8BACA,4BACA,2BACA,OACA,qBACA,uCACA,2BACA,uCACA,IACA,8DACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,uBACA,uBACA,mCACA,mCACA,uBACA,2BACA,OACA,iBACA,8BACA,mCACA,mCACA,uBACA,0BACA,OACA,mBACA,8BACA,mCACA,mCACA,uBACA,0BACA,OACA,+BACA,oBACA,OACA,oCACA,oBACA,OACA,kCACA,uBACA,kCACA,gBACA,0BACA,2BACA,2BACA,sBACA,kCACA,kCACA,oBACA,gBACA,uCACA,oBACA,gBACA,wBACA,2BACA,2BACA,uBACA,6BACA,sBACA,gBACA,0BACA,2BACA,2BACA,sBACA,gBACA,6DACA,gFACA,mEACA,8BACA,oBACA,2BACA,2BACA,sBACA,uCACA,0BACA,2BACA,2BACA,uBACA,sBACA,oBACA,8BACA,wBACA,wBACA,cACA,OACA,IACA,wEACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,6DACA,OACA,+BACA,OACA,wEACA,0DACA,sDACA,8CACA,qCACA,qDACA,oDACA,OACA,6BACA,oBACA,kBACA,sBACA,kBACA,oBACA,+BACA,IACA,2DACA,KACA,kFACA,iFACA,+EACA,mFACA,iFACA,oBACA,KACA,8EACA,MACA,qBACA,iFACA,6EACA,kCACA,uDACA,sEACA,6BACA,QACA,iEACA,uIACA,2BACA,QACA,IACA,iEACA,MACA,iFACA,4EACA,yBACA,KACA,kFACA,kFACA,gBACA,MACA,gCACA,8BACA,2FACA,UACA,kFACA,UACA,gCACA,iCACA,yDACA,QACA,UACA,wDACA,UACA,uDACA,yBACA,QACA,UACA,oEACA,UACA,6BACA,kEACA,aACA,QACA,UACA,+DACA,UACA,sDACA,yCACA,QACA,UACA,iFACA,iFACA,SACA,8EACA,iFACA,UACA,sDACA,yDACA,+BACA,QACA,UACA,iFACA,kDACA,UACA,sEACA,wCACA,QACA,UACA,iFACA,UACA,+DACA,qFACA,uDACA,6BACA,QACA,IACA,oEACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,oEACA,iCACA,OACA,gDACA,8BACA,mBACA,8BACA,OACA,oDACA,kEACA,QACA,sCACA,6DACA,8CACA,OACA,+EACA,2BACA,2FACA,kDACA,iEACA,QACA,IACA,wDACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,oBACA,gBACA,6BACA,yBACA,oCACA,4BACA,wBACA,2BACA,oCACA,4BACA,wBACA,2BACA,+BACA,+BACA,2BACA,6BACA,OACA,kBACA,6BACA,mCACA,OACA,sBACA,6BACA,mCACA,OACA,2BACA,yCACA,uCACA,OACA,2BACA,yCACA,uCACA,OACA,wBACA,yCACA,oCACA,OACA,wBACA,yCACA,oCACA,OACA,QACA,kCACA,iCACA,SACA,mBACA,iCACA,gBACA,QACA,wDACA,gCACA,SACA,qBACA,gCACA,gBACA,QACA,uDACA,2EACA,oCACA,SACA,yBACA,2BACA,gBACA,QACA,6CACA,wCACA,SACA,8BACA,+BACA,gBACA,QACA,6CACA,wCACA,SACA,8BACA,+BACA,gBACA,QACA,wCACA,wCACA,SACA,2BACA,+BACA,gBACA,QACA,wCACA,wCACA,SACA,2BACA,+BACA,gBACA,kFACA,kFACA,+EACA,0EACA,yEACA,IACA,6DACA,MACA,6EACA,aACA,KACA,gFACA,4EACA,gFACA,6EACA,0BACA,KACA,iFACA,0DACA,MACA,qBACA,UACA,0EACA,mBACA,SACA,iDACA,SACA,uBACA,qCACA,UACA,2EACA,6BACA,0DACA,oBACA,QACA,UACA,6EACA,iDACA,SACA,iDACA,SACA,uBACA,wCACA,UACA,2EACA,8DACA,QACA,UACA,iGACA,iDACA,SACA,iDACA,SACA,uBACA,wCACA,SACA,mCACA,UACA,uGACA,yCACA,6BACA,oBACA,QACA,UACA,gFACA,mBACA,SACA,iDACA,SACA,uBACA,2CACA,UACA,2EACA,0FACA,oDACA,kFACA,wBACA,wBACA,YACA,6BACA,oEACA,oBACA,QACA,UACA,gFACA,+DACA,SACA,4EACA,+EACA,yEACA,SACA,uBACA,uCACA,UACA,2EACA,0DACA,QACA,UACA,oGACA,+DACA,SACA,4EACA,+EACA,yEACA,SACA,uBACA,uCACA,SACA,mCACA,UACA,uGACA,oEACA,wCACA,6BACA,wFACA,oBACA,QACA,UACA,kGACA,wCACA,SACA,+EACA,8EACA,iEACA,SACA,uBACA,uCACA,UACA,2EACA,wDACA,QACA,UACA,kGACA,4DACA,SACA,+EACA,8EACA,iEACA,SACA,uBACA,uCACA,SACA,mCACA,UACA,uGACA,yCACA,wBACA,QACA,IACA,kEACA,MACA,kFACA,iEACA,MACA,qBACA,UACA,yDACA,UACA,8DACA,UACA,+DACA,UACA,2EACA,UACA,8EACA,SACA,6EACA,SACA,mCACA,UACA,oFACA,UACA,4EACA,+EACA,0BACA,SACA,yEACA,UACA,0FACA,UACA,oFACA,SACA,6EACA,SACA,uFACA,gFACA,2EACA,+EACA,mCACA,2EACA,SACA,oCACA,UACA,iFACA,UACA,2EACA,0EACA,oBACA,SACA,6EACA,SACA,mCACA,UACA,wGACA,UACA,iFACA,yBACA,SACA,wCACA,UACA,+EACA,UACA,iFACA,4DACA,UACA,qFACA,IACA,oDACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,wEACA,gDACA,6DACA,OACA,4CACA,gCACA,qDACA,+BACA,+CACA,6BACA,mDACA,qDACA,yEACA,gCACA,6DACA,iEACA,8DACA,8DACA,+DACA,4BACA,QACA,qCACA,6FACA,gFACA,sFACA,mEACA,+EACA,sFACA,SACA,iBACA,0BACA,gCACA,qCACA,mCACA,8BACA,eACA,mCACA,iCACA,mCACA,+EACA,iDACA,kDACA,QACA,iFACA,+CACA,2CACA,eACA,+BACA,QACA,uEACA,eACA,uCACA,uEACA,SACA,MACA,QACA,mCACA,wDACA,sEACA,sFACA,sFACA,8FACA,gHACA,qHACA,SACA,sBACA,2BACA,2BACA,+BACA,yBACA,uBACA,2BACA,gBACA,qBACA,qBACA,yBACA,mBACA,iBACA,SACA,MACA,QACA,qCACA,gFACA,sFACA,sFACA,SACA,wBACA,2BACA,0BACA,2BACA,kBACA,qBACA,oBACA,SACA,MACA,QACA,yEACA,oCACA,yFACA,+EACA,gEACA,mEACA,mDACA,oEACA,SACA,+BACA,2BACA,2BACA,0BACA,6BACA,2BACA,gBACA,qBACA,qBACA,8BACA,wBACA,sBACA,SACA,uDACA,2GACA,oEACA,gFACA,oDACA,yEACA,iBACA,yCACA,+GACA,WACA,QACA,yBACA,qBACA,qBACA,kBACA,wBACA,qFACA,SACA,6CACA,oCACA,iBACA,yCACA,0FACA,WACA,QACA,MACA,QACA,mFACA,oCACA,uFACA,wFACA,SACA,iCACA,2BACA,0BACA,2BACA,4CACA,kDACA,yGACA,+DACA,wEACA,6CACA,8BACA,iBACA,yCACA,wEACA,WACA,QACA,MACA,QACA,iCACA,sDACA,uEACA,SACA,2BACA,iCACA,iBACA,wEACA,sCACA,mCACA,mDACA,kDACA,kCACA,mDACA,uDACA,sCACA,uDACA,sCACA,oCACA,yCACA,gCACA,8DACA,2DACA,+BACA,2DACA,iHACA,0BACA,gEACA,6DACA,0EACA,mCACA,gCACA,UACA,2BACA,gCACA,yBACA,iBACA,qBACA,4BACA,4BACA,6BACA,wBACA,sBACA,SACA,MACA,QACA,uCACA,sEACA,SACA,yEACA,sEACA,oCACA,MACA,QACA,0DACA,mFACA,sFACA,sFACA,oFACA,SACA,iCACA,4BACA,2BACA,0BACA,8BACA,2BACA,QACA,0DACA,oCACA,qCACA,yEACA,mDACA,8FACA,+BACA,+BACA,UACA,QACA,gBACA,MACA,QACA,0DACA,mFACA,sFACA,sFACA,oFACA,SACA,iCACA,4BACA,2BACA,0BACA,8BACA,2BACA,QACA,0DACA,oCACA,qCACA,uCACA,4FACA,6EACA,mDACA,+BACA,UACA,QACA,gBACA,MACA,QACA,sDACA,sFACA,sFACA,oEACA,oEACA,SACA,0BACA,2BACA,0BACA,8BACA,4BACA,2BACA,QACA,0DACA,2CACA,oCACA,8BACA,sCACA,4FACA,mEACA,iBACA,wBACA,uBACA,WACA,QACA,qBACA,MACA,QACA,mCACA,wDACA,sEACA,sFACA,sFACA,8FACA,gHACA,qHACA,SACA,uBACA,2BACA,2BACA,+BACA,yBACA,uBACA,iBACA,oDACA,+CACA,0CACA,8BACA,2BACA,UACA,oBACA,iBACA,qBACA,qBACA,yBACA,mBACA,iBACA,SACA,MACA,QACA,qCACA,sFACA,sFACA,SACA,yBACA,2BACA,0BACA,iBACA,gEACA,2DACA,4BACA,gDACA,wBACA,mBACA,uBACA,sBACA,SACA,QACA,MACA,QACA,gFACA,mFACA,oFACA,gFACA,SACA,qCACA,4BACA,yBACA,uBACA,8BACA,2BACA,QACA,6DACA,wDACA,qDACA,2CACA,gDACA,wBACA,QACA,MACA,QACA,gFACA,iFACA,oFACA,gFACA,SACA,qCACA,4BACA,yBACA,uBACA,8BACA,2BACA,QACA,6DACA,kCACA,6BACA,yBACA,MACA,IACA,uEACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,+BACA,0BACA,wCACA,4BACA,+BACA,6CACA,kCACA,OACA,QACA,mDACA,2EACA,iFACA,SACA,6BACA,kCACA,0DACA,IACA,uEACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,gCACA,kBACA,sBACA,oCACA,IACA,2DACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,oEACA,0EACA,0DACA,4EACA,+BACA,qCACA,4BACA,QACA,+CACA,4EACA,uFACA,6FACA,yFACA,SACA,iBACA,iCACA,uCACA,6BACA,eACA,0CACA,gDACA,kCACA,MACA,QACA,+EACA,yFACA,SACA,6BACA,kCACA,2DACA,yCACA,+FACA,SACA,0DACA,2BACA,iCACA,+BACA,kCACA,oBACA,4BACA,SACA,sCACA,MACA,QACA,wDACA,8CACA,mEACA,wEACA,SACA,iEACA,4DACA,MACA,IACA,gDACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,uCACA,0EACA,uEACA,yCACA,uEACA,+DACA,uBACA,OACA,8BACA,0CACA,2BACA,kDACA,iEACA,6CACA,8CACA,QACA,4BACA,6BACA,+BACA,gEACA,4DACA,SACA,mBACA,uBACA,qBACA,oBACA,oBACA,MACA,QACA,gCACA,SACA,sBACA,kCACA,qBACA,8BACA,OACA,wBACA,iCACA,OACA,QACA,qCACA,SACA,2BACA,+BACA,wDACA,MACA,QACA,8BACA,sFACA,6DACA,uCACA,SACA,yBACA,0BACA,qBACA,sBACA,2BACA,kDACA,+DACA,+CACA,qCACA,2BACA,mDACA,MACA,QACA,gCACA,sFACA,SACA,2BACA,yBACA,2BACA,iCACA,qCACA,2BACA,qCACA,MACA,QACA,iCACA,8EACA,sFACA,6DACA,uCACA,SACA,4BACA,0BACA,qBACA,sBACA,2BACA,0EACA,iCACA,+CACA,mDACA,MACA,QACA,4BACA,sFACA,8DACA,SACA,uBACA,yBACA,wCACA,wCACA,MACA,UACA,8BACA,sFACA,4CACA,SACA,yBACA,yBACA,wCACA,0CACA,MACA,QACA,wCACA,mDACA,mDACA,kEACA,2CACA,mEACA,kEACA,SACA,0BACA,sBACA,oBACA,8BACA,iCACA,+BACA,yBACA,QACA,0BACA,qDACA,oDACA,kDACA,kCACA,mEACA,UACA,+DACA,6BACA,eACA,yCACA,QACA,mFACA,kDACA,wDACA,sCACA,oCACA,sDACA,iBACA,+CACA,mDACA,+CACA,mBACA,+CACA,QACA,6CACA,MACA,QACA,mDACA,sFACA,6DACA,uCACA,SACA,0BACA,0BACA,qBACA,sBACA,iBACA,+DACA,8DACA,kDACA,qDACA,uDACA,mDACA,4CACA,4CACA,yEACA,MACA,QACA,qDACA,sFACA,SACA,4BACA,yBACA,iBACA,kCACA,8DACA,sDACA,mDACA,mDACA,yCACA,yCACA,sCACA,kCACA,MACA,QACA,gDACA,sFACA,gFACA,SACA,wBACA,yBACA,qCACA,wDACA,MACA,QACA,qEACA,+CACA,yEACA,SACA,iCACA,oBACA,wCACA,+CACA,2DACA,wBACA,qBACA,QACA,+CACA,mDACA,+CACA,QACA,yBACA,MACA,IACA,kDACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,oEACA,OACA,0CACA,6CACA,gCACA,yEACA,wFACA,uFACA,0DACA,2CACA,qDACA,QACA,qCACA,2CACA,SACA,iBACA,kCACA,eACA,kDACA,MACA,QACA,kDACA,SACA,sFACA,uEACA,iCACA,SACA,MACA,QACA,+DACA,+DACA,0DACA,6DACA,SACA,kCACA,uBACA,kCACA,2BACA,yDACA,MACA,QACA,oEACA,uFACA,gFACA,8DACA,8DACA,mEACA,SACA,0BACA,2BACA,2BACA,sBACA,mCACA,iDACA,qEACA,2DACA,mEACA,oHACA,QACA,mDACA,mEACA,MACA,QACA,6CACA,gDACA,SACA,kCACA,oBACA,2BACA,oCACA,sCACA,yCACA,QACA,MACA,QACA,kDACA,gEACA,SACA,uCACA,oBACA,2BACA,mCACA,uCACA,8CACA,QACA,MACA,QACA,uCACA,oEACA,QACA,0EACA,0EACA,mEACA,yDACA,qDACA,SACA,wBACA,2BACA,2BACA,uBACA,6BACA,sBACA,iEACA,wDACA,uDACA,6EACA,oCACA,QACA,uDACA,4EACA,gCACA,kHACA,8BACA,8DACA,iCACA,qDACA,uFACA,+BACA,UACA,yCACA,oGACA,mFACA,eACA,6FACA,yGACA,QACA,MACA,QACA,yCACA,mEACA,QACA,4EACA,0EACA,oEACA,SACA,0BACA,2BACA,2BACA,sBACA,iBACA,oEACA,MACA,QACA,+DACA,mEACA,QACA,oEACA,oEACA,oEACA,oDACA,gEACA,2CACA,mEACA,kEACA,SACA,0BACA,2BACA,2BACA,uBACA,sBACA,oBACA,8BACA,iCACA,+BACA,yBACA,QACA,8CACA,wEACA,iEACA,QACA,kCACA,qEACA,iEACA,QACA,qFACA,MACA,QACA,iDACA,4CACA,mEACA,mEACA,oEACA,+CACA,SACA,8BACA,oBACA,2BACA,2BACA,sBACA,mDACA,qEACA,kBACA,QACA,2DACA,yEACA,MACA,4BACA,oBACA,2BACA,2BACA,uBACA,yBACA,0BACA,wBACA,iBACA,6DACA,mCACA,yEACA,uFACA,6BACA,QACA,wDACA,mCACA,yEACA,qEACA,QACA,8BACA,8FACA,uEACA,MACA,QACA,uDACA,2DACA,oEACA,oEACA,oEACA,SACA,2BACA,oBACA,2BACA,2BACA,sBACA,iEACA,sCACA,kFACA,yCACA,sEACA,uBACA,yDACA,qDACA,QACA,qEACA,MACA,IACA,4CACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,+DACA,OACA,2BACA,0DACA,kDACA,kDACA,gEACA,sCACA,+BACA,6CACA,+CACA,wEACA,gFACA,gEACA,gFACA,sFACA,6EACA,4EACA,4DACA,uEACA,6CACA,QACA,qCACA,4DACA,oDACA,SACA,+DACA,2CACA,qBACA,wBACA,sBACA,SACA,+BACA,MACA,QACA,kCACA,iDACA,SACA,mBACA,iCACA,iBACA,0CACA,8CACA,0BACA,+CACA,gFACA,qCACA,sDACA,sEACA,0BACA,4CACA,yEACA,gDACA,iCACA,+CACA,YACA,+EACA,qCACA,aACA,wCACA,eACA,YACA,gFACA,4EACA,aACA,qEACA,oCACA,yCACA,iDACA,QACA,gDACA,oCACA,YACA,0EACA,kFACA,aACA,qEACA,kCACA,eACA,YACA,uEACA,gEACA,aACA,oFACA,kCACA,0CACA,kDACA,gCACA,QACA,+CACA,qBACA,2BACA,6BACA,6BACA,yBACA,4BACA,0BACA,SACA,+CACA,qBACA,6BACA,2BACA,6BACA,yBACA,4BACA,0BACA,SACA,+DACA,iDACA,uBACA,+BACA,kCACA,kCACA,8BACA,iCACA,+BACA,WACA,QACA,iBACA,qBACA,yBACA,6BACA,6BACA,yBACA,4BACA,2BACA,6BACA,yBACA,4BACA,gCACA,gCACA,4BACA,8BACA,SACA,MACA,QACA,wDACA,4DACA,kCACA,4DACA,yDACA,SACA,qBACA,gCACA,iBACA,oDACA,qEACA,kEACA,8CACA,UACA,QACA,MACA,QACA,uDACA,sCACA,wDACA,SACA,yBACA,2BACA,iBACA,qDACA,iDACA,MACA,QACA,6CACA,4CACA,6DACA,SACA,8BACA,+BACA,iBACA,oEACA,iEACA,mEACA,4DACA,QACA,MACA,QACA,6CACA,4CACA,6DACA,SACA,8BACA,+BACA,iBACA,oEACA,iEACA,mEACA,4DACA,QACA,MACA,QACA,4CACA,wCACA,0DACA,SACA,2BACA,+BACA,iBACA,gEACA,mEACA,yDACA,QACA,MACA,QACA,4CACA,wCACA,0DACA,SACA,2BACA,+BACA,iBACA,gEACA,mEACA,yDACA,QACA,MACA,QACA,kEACA,kEACA,yDACA,8DACA,SACA,iCACA,0BACA,uBACA,qCACA,0CACA,qDACA,MACA,QACA,kEACA,kEACA,yDACA,8DACA,SACA,iCACA,0BACA,uBACA,qCACA,0CACA,qDACA,MACA,QACA,oEACA,mDACA,sFACA,yDACA,SACA,sBACA,gCACA,8BACA,qCACA,mDACA,uDACA,2BACA,mBACA,4BACA,aACA,6BACA,6BACA,4BACA,WACA,QACA,mDACA,uDACA,qBACA,8BACA,oDACA,sDACA,cACA,aACA,6BACA,6BACA,4BACA,WACA,QACA,oBACA,MACA,QACA,8DACA,8DACA,oDACA,mEACA,4DACA,wDACA,gDACA,uCACA,uDACA,6DACA,SACA,4BACA,sBACA,oBACA,wBACA,oBACA,uBACA,oBACA,iBACA,6CACA,oDACA,0EACA,6EACA,iFACA,gDACA,oEACA,6CACA,mDACA,gBACA,cACA,kBACA,cACA,gBACA,UACA,uEACA,MACA,IACA,0DACA,oBACA,yCACA,yCACA,4DACA,yEACA,kFACA,wFACA,+EACA,sGACA,6EACA,mFACA,IACA,kDACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,6DACA,OACA,qBACA,0CACA,+BACA,uCACA,+BACA,QACA,qCACA,2CACA,2CACA,SACA,iBACA,mCACA,kCACA,eACA,iDACA,iDACA,MACA,QACA,oDACA,yFACA,SACA,kCACA,yDACA,gDACA,qCACA,QACA,MACA,QACA,sDACA,qEACA,mEACA,2CACA,SACA,mBACA,iCACA,yBACA,6CACA,iDACA,4CACA,+CACA,2DACA,sCACA,mCACA,8EACA,gCACA,2BACA,gCACA,2DACA,kFACA,MACA,QACA,4DACA,6EACA,mEACA,+EACA,2CACA,uEACA,SACA,mCACA,kCACA,yBACA,yBACA,+CACA,2DACA,sCACA,mCACA,8EACA,gCACA,4CACA,oCACA,2DACA,kFACA,MACA,QACA,2DACA,8EACA,SACA,6DACA,4CACA,kDACA,0CACA,2CACA,iCACA,qCACA,iDACA,wDACA,qFACA,2DACA,eACA,+CACA,gCACA,iCACA,QACA,MACA,QACA,6DACA,uFACA,uFACA,+EACA,yEACA,SACA,sGACA,8CACA,qDACA,4DACA,2EACA,wCACA,uCACA,4CACA,2DACA,mEACA,+CACA,QACA,MACA,IACA,qEACA,MACA,8DACA,kDACA,KACA,gFACA,0CACA,KACA,0CACA,MACA,sBACA,UACA,gFACA,8CACA,2FACA,wDACA,SACA,2DACA,UACA,mFACA,IACA,6DACA,MACA,KACA,qGACA,qHACA,MACA,MACA,2DACA,uDACA,MACA,iCACA,2HACA,gIACA,8FACA,mDACA,qFACA,uHACA,4EACA,iGACA,oHACA,iJACA,IACA,4EACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,wDACA,OACA,4DACA,0DACA,sDACA,gDACA,8CACA,qDACA,oDACA,OACA,6BACA,oBACA,kBACA,sBACA,kBACA,oBACA,gCACA,wCACA,cACA,YACA,YACA,gBACA,8BACA,SACA,mBACA,MACA,IACA,6DACA,MACA,8DACA,MACA,oBACA,UACA,uDACA,SACA,mFACA,gFACA,oCACA,SACA,0EACA,+EACA,mBACA,UACA,0EACA,iFACA,2EACA,oCACA,2FACA,gGACA,6DACA,4BACA,oGACA,0DACA,wDACA,+DACA,QACA,UACA,8EACA,yEACA,SACA,mCACA,UACA,oFACA,4CACA,QACA,UACA,2EACA,4EACA,SACA,iFACA,kFACA,wEACA,0DACA,SACA,uGACA,SACA,gFACA,wEACA,kCACA,mKACA,SACA,mCACA,UACA,+EACA,qFACA,wDACA,+DACA,0FACA,QACA,IACA,qEACA,MACA,sBACA,iFACA,iFACA,iFACA,iBACA,gGACA,qFACA,MACA,sBACA,kCACA,iCACA,gFACA,iGACA,QACA,kGACA,2GACA,QACA,oFACA,kFACA,4EACA,iEACA,uDACA,kFACA,uEACA,aACA,qGACA,QACA,8FACA,qFACA,4GACA,QACA,8FACA,kIACA,4GACA,QACA,UACA,yHACA,4GACA,sDACA,sFACA,UACA,6EACA,uHACA,8CACA,yDACA,mFACA,+DACA,kGACA,uDACA,mFACA,6DACA,+EACA,gEACA,kEACA,2DACA,qGACA,YACA,QACA,IACA,0EACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,sDACA,gCACA,OACA,0DACA,0DACA,sDACA,8CACA,wDACA,qDACA,oDACA,OACA,6BACA,oBACA,kBACA,sBACA,kBACA,oBACA,gCACA,sCACA,wDACA,mBACA,MACA,IACA,oEACA,MACA,8DACA,MACA,gCACA,yFACA,gGACA,4FACA,UACA,+DACA,UACA,+EACA,UACA,mEACA,UACA,6EACA,UACA,gFACA,yBACA,SACA,SACA,SACA,uBACA,wCACA,8CACA,kFACA,yDACA,UACA,mFACA,UACA,gFACA,yBACA,SACA,uBACA,gFACA,kDACA,UACA,+EACA,4DACA,oFACA,2EACA,6FACA,sGACA,IACA,2EACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,uDACA,OACA,2DACA,0DACA,sDACA,yDACA,sCACA,qDACA,oDACA,OACA,6BACA,oBACA,kBACA,sBACA,kBACA,qBACA,8BACA,8CACA,qDACA,mBACA,MACA,IACA,+EACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,MACA,oCACA,+CACA,MACA,qCACA,+EACA,IACA,8EACA,KACA,sCACA,oEACA,qEACA,4CACA,iDACA,wEACA,sEACA,6EACA,wEACA,mCACA,KACA,0DACA,OACA,uDACA,0DACA,sDACA,yDACA,sCACA,qDACA,oDACA,OACA,6BACA,oBACA,kBACA,sBACA,kBACA,oBACA,gCACA,8CACA,iEACA,mBACA,MACA,IACA,iCACA,oDACA,sBACA,MAIN,iBAAoB,CAClB,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,IAGd,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,IAGd,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,IAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,IAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,IAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,IAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IAC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wEACA,KACA,4BACA,4BACA,4BACA,2EACA,mHACA,KACA,oBACA,0DACA,iBACA,eACA,UACA,KACA,wBACA,wIACA,uEACA,uEACA,mGACA,UACA,KACA,0BACA,uEACA,sHACA,oFACA,8FACA,iFACA,+EACA,4EACA,8DACA,iGACA,yEACA,yFACA,yHACA,kGACA,UACA,KACA,oDACA,wEACA,yCACA,KACA,kBACA,kBACA,kBACA,8BACA,0FACA,eACA,UACA,KACA,gCACA,0HACA,eACA,UACA,KACA,kBACA,kBACA,kBACA,qBACA,8BACA,oCACA,qCACA,yCACA,wCACA,kCACA,sCACA,oCACA,sCACA,mBACA,2FACA,uGACA,+FACA,uGACA,iIACA,8HACA,yFACA,qJACA,6FACA,iHACA,+IACA,KACA,oDACA,KACA,uDACA,KACA,8CACA,sDACA,oDACA,wCACA,gDACA,4CACA,kDACA,KACA,iCACA,KACA,8DACA,6DACA,6BACA,KACA,8CACA,UACA,KACA,2BACA,2BACA,2BACA,KACA,iCACA,+BACA,kCACA,qCACA,kCACA,UACA,mBACA,yBACA,UACA,gGACA,KACA,0FACA,gGACA,8FACA,+JACA,KACA,8EACA,KACA,4EACA,KACA,iHACA,gKACA,KACA,yGACA,mJACA,KACA,mDACA,0CACA,oCACA,0GACA,sBACA,KACA,mCACA,kDACA,yCACA,sCACA,kDACA,gDACA,6BACA,4BACA,kCACA,gCACA,gCACA,4CACA,kCACA,2CACA,gBACA,KACA,8CACA,0CACA,KACA,iEACA,qHACA,UACA,KACA,yFACA,4EACA,4DACA,KACA,2GACA,sEACA,KACA,wFACA,wCACA,KACA,0HACA,kIACA,2IACA,gHACA,0FACA,KACA,0BACA,0DACA,KACA,0BACA,oCACA,0EACA,KACA,kGACA,kEACA,gEACA,kBACA,KACA,iHACA,sEACA,oEACA,kBACA,KACA,0CACA,wEACA,cACA,KACA,iFACA,UACA,KACA,iEACA,gHACA,sEACA,KACA,sLACA,mHACA,2JACA,KACA,uCACA,uFACA,KACA,iEACA,KACA,uEACA,qFACA,iCACA,cACA,KACA,+BACA,gDACA,KACA,yCACA,KACA,sFACA,0DACA,2HACA,KACA,+EACA,yBACA,6HACA,0FACA,mGACA,yFACA,kFACA,sBACA,KACA,uEACA,iHACA,yFACA,kBACA,KACA,mCACA,yEACA,KACA,iDACA,yBACA,uFACA,oFACA,mBACA,KACA,0CACA,qBACA,sDACA,yBACA,uFACA,mFACA,mBACA,cACA,KACA,oDACA,qBACA,sEACA,2FACA,eACA,KACA,uEACA,qBACA,kGACA,0FACA,eACA,KACA,kCACA,+BACA,oCACA,mCACA,uCACA,0CACA,wBACA,eACA,UACA,KACA,oEACA,sDACA,KACA,yDACA,KACA,8FACA,KACA,gKACA,KACA,2BACA,6DACA,yDACA,KACA,sFACA,qBACA,kFACA,gFACA,eACA,KACA,qDACA,UACA,KACA,uDACA,sGACA,sEACA,KACA,uGACA,yIACA,uGACA,KACA,2DACA,uCACA,qCACA,KACA,kDACA,qBACA,2EACA,kFACA,eACA,KACA,mDACA,UACA,KACA,+EACA,6GACA,KACA,yFACA,gDACA,yHACA,2JACA,cACA,KACA,yDACA,yEACA,qEACA,iDACA,KACA,gEACA,UACA,KACA,yBACA,yBACA,yBACA,KACA,6EACA,mCACA,UACA,KACA,oEACA,+DACA,UACA,KACA,0EACA,yCACA,UACA,KACA,wFACA,uFACA,kHACA,iEACA,UACA,KACA,6FACA,iFACA,UACA,KACA,kHACA,6GACA,sHACA,8EACA,UACA,MACA,KACA,uBACA,8EACA,KACA,kFACA,KACA,gGACA,KACA,gEACA,KACA,yEACA,KACA,4FACA,KACA,iFACA,KACA,uFACA,MACA,KACA,uBACA,gCACA,KACA,6FACA,KACA,YACA,gGACA,oBACA,YACA,kCACA,iCACA,2DACA,UACA,KACA,YACA,6CACA,YACA,yDACA,2BACA,UACA,KACA,YACA,sEACA,YACA,+BACA,gCACA,eACA,UACA,KACA,YACA,sEACA,YACA,wDACA,yCACA,UACA,KACA,YACA,gFACA,qFACA,8EACA,6BACA,YACA,wDACA,2DACA,iCACA,UACA,KACA,YACA,4FACA,iEACA,YACA,wEACA,0CACA,UACA,KACA,YACA,iEACA,iEACA,YACA,iEACA,6CACA,yDACA,+BACA,UACA,MACA,KACA,oCACA,oCACA,KACA,0EACA,KACA,oEACA,KACA,2DACA,0DACA,UACA,KACA,mHACA,kGACA,+CACA,6DACA,UACA,MACA,KACA,uBACA,YACA,uEACA,YACA,6EACA,4FACA,sDACA,mFACA,0BACA,0BACA,cACA,KACA,+BACA,iCACA,KACA,sBACA,UACA,KACA,YACA,gHACA,YACA,6EACA,sEACA,4BACA,+BACA,0FACA,KACA,sBACA,UACA,KACA,YACA,mHACA,YACA,6EACA,6BACA,+BACA,KACA,sBACA,UACA,KACA,YACA,iEACA,YACA,6EACA,+BACA,6BACA,KACA,sBACA,UACA,KACA,YACA,mGACA,0CACA,YACA,6EACA,6BACA,0BACA,UACA,OAIN,iBAAoB,CAClB,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,MAGd,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,MAGd,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,MAGd,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,KAGd,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,KAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,KAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,KAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,IAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,IAGd,IAAO,CACL,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,GACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,GACR,OAAU,IAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,EACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,IAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,KAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,KAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,IAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,KAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,IAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,KAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,IAGd,KAAQ,CACN,OAAU,CACR,GAAM,KAER,KAAQ,CACN,KAAQ,IACR,OAAU,GAEZ,GAAM,CACJ,KAAQ,IACR,OAAU,QAOtB,KAAQ,uBAEV,CACE,GAAM,CACJ,KAAQ,UACR,MAAS,CACP,UAAa,WACb,KAAQ,SACR,GAAM,kCACN,SAAY,kBACZ,aAAgB,WAChB,SAAW,GAEb,IAAO,CACL,gBAAmB,UACnB,KAAQ,YAEV,KAAQ,6EACR,aAAgB,QAElB,YAAe,CACb,iBAAoB,CAClB,8BAA+B,CAC7B,YAAe,CACb,EAAK,CACH,SAAY,WACZ,MAAS,CACP,MACA,6DACA,KACA,GACA,kDACA,KACA,2BACA,KACA,0BACA,0EACA,KACA,4EACA,MACA,KACA,8CACA,KACA,2BACA,KACA,KACA,2CACA,+EACA,oEACA,uBACA,4CACA,uCACA,0BACA,0CACA,sCACA,uBACA,sBACA,kBACA,6CACA,KACA,uCACA,6CACA,KACA,sHACA,+DACA,8BACA,6BACA,0CACA,sBACA,8BACA,0CACA,sBACA,cACA,UACA,KACA,4FACA,iCACA,6BACA,UACA,KACA,oFACA,MACA,KACA,wDACA,KACA,2BACA,KACA,KACA,wCACA,wEACA,4DACA,KACA,gGACA,8EACA,KACA,+CACA,uCACA,yCACA,UACA,KACA,sCACA,0DACA,UACA,KACA,qCACA,0DACA,UACA,KACA,oCACA,kEACA,eACA,UACA,KACA,+DACA,qCACA,UACA,KACA,mEACA,4BACA,2CACA,uBACA,0CACA,cACA,2BACA,UACA,KACA,6EACA,yCACA,UACA,KACA,uEACA,2BACA,oDACA,uBACA,yCACA,cACA,0BACA,UACA,KACA,kFACA,6DACA,+DACA,qCACA,UACA,KACA,2DACA,2CACA,uBACA,2CACA,cACA,UACA,KACA,mFACA,2EACA,uFACA,KACA,kEACA,aACA,4CACA,UACA,KACA,uGACA,+CACA,KACA,kGACA,kDACA,UACA,KACA,kEACA,oDACA,uBACA,8CACA,cACA,UACA,SACA,4EACA,yCACA,8BACA,cACA,KACA,0BACA,uBACA,6CACA,cACA,6BACA,UACA,MACA,KACA,uEACA,KACA,2BACA,KACA,KACA,wDACA,sCACA,mBACA,sCACA,WACA,OAIN,iBAAoB,CAClB,GAAM,CACJ,OAAU,CACR,GAAM,KAER,KA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A,GACA,UACA,uHACA,UACA,uDACA,mEACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,kCACA,GACA,0BACA,GACA,MACA,iEACA,MACA,qBACA,UACA,yDACA,UACA,8DACA,GACA,UACA,+DACA,UACA,2EACA,GACA,UACA,8EACA,SACA,6EACA,SACA,mCACA,UACA,oFACA,GACA,UACA,4EACA,+EACA,0BACA,SACA,yEACA,UACA,0FACA,GACA,UACA,oFACA,SACA,6EACA,SACA,uFACA,gFACA,2EACA,+EACA,mCACA,2EACA,SACA,oCACA,UACA,iFACA,GACA,UACA,2EACA,0EACA,oBACA,SACA,6EACA,SACA,mCACA,UACA,wGACA,GACA,UACA,iFACA,yBACA,SACA,wCACA,UACA,+EACA,GACA,UACA,iFACA,4DACA,UACA,qFACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,gDACA,2CACA,kDACA,6CACA,kDACA,4CACA,GACA,iDACA,2HACA,iCACA,oEACA,8BACA,gCACA,2BACA,kCACA,6BACA,kCACA,2BACA,IACA,GACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,qDACA,+FACA,qCACA,yFACA,qFACA,sHACA,iFACA,0HACA,sGACA,0HACA,sGACA,oGACA,sCACA,+BACA,+BACA,8BACA,kBACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,yCACA,iEACA,oCACA,sDACA,sFACA,6EACA,0DACA,GACA,sFACA,yHACA,sHACA,mFACA,+EACA,oFACA,oFACA,wDACA,6EACA,sIACA,sIACA,qBACA,6BACA,2BACA,2BACA,0BACA,8BACA,6DACA,GACA,qDACA,sHACA,oHACA,uHACA,yHACA,+EACA,oFACA,oFACA,yFACA,yFACA,iEACA,iEACA,wBACA,6BACA,2BACA,2BACA,oCACA,mCACA,6DACA,GACA,2GACA,gHACA,wEACA,sFACA,sFACA,mDACA,qEACA,qEACA,qBACA,2BACA,2BACA,yBACA,6DACA,GACA,+DACA,yHACA,yEACA,6GACA,oJACA,oHACA,4GACA,oEACA,qHACA,qHACA,qBACA,6BACA,2BACA,kCACA,qCACA,8BACA,2DACA,GACA,4FACA,2HACA,qHACA,kFACA,wFACA,sDACA,sDACA,oEACA,sBACA,6BACA,2BACA,2BACA,8BACA,kBACA,GACA,4GACA,mHACA,gDACA,6GACA,+FACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,2CACA,uHACA,kEACA,yCACA,+HACA,+HACA,oIACA,yDACA,mHACA,yHACA,2GACA,mHACA,qJACA,oBACA,sDACA,mBACA,eACA,yGACA,GACA,mHACA,qHACA,oHACA,8DACA,uDACA,uDACA,0FACA,oGACA,oFACA,2EACA,mBACA,eACA,oBACA,0CACA,qDACA,mCACA,aACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,sCACA,sDACA,mCACA,8FACA,8EACA,8EACA,2GACA,0DACA,GACA,wEACA,8DACA,uFACA,0DACA,0DACA,6EACA,+EACA,+EACA,kBACA,0BACA,iCACA,mCACA,mCACA,0BACA,2BACA,0BACA,SACA,GACA,6EACA,uHACA,8EACA,0DACA,0DACA,6DACA,6DACA,qBACA,iCACA,6BACA,mCACA,mCACA,2BACA,0BACA,SACA,GACA,iEACA,iHACA,gFACA,0DACA,0DACA,0DACA,wDACA,wDACA,kBACA,iCACA,mCACA,mCACA,0BACA,2BACA,0BACA,SACA,GACA,8EACA,iGACA,4EACA,qEACA,qEACA,sFACA,oEACA,8EACA,kBACA,kCACA,qCACA,0BACA,0BACA,gCACA,6BACA,qBACA,SACA,GACA,uEACA,iGACA,2EACA,+DACA,+DACA,0GACA,0GACA,mBACA,kCACA,qCACA,2BACA,2BACA,yBACA,wBACA,SACA,GACA,qGACA,0HACA,wCACA,sGACA,qGACA,gDACA,gDACA,+CACA,SACA,GACA,uEACA,+EACA,+EACA,8EACA,8EACA,wHACA,GACA,8FACA,oEACA,iFACA,8EACA,8EACA,kHACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,2CACA,kHACA,uCACA,4GACA,uCACA,0DACA,GACA,6EACA,6CACA,yDACA,GACA,8EACA,6CACA,yDACA,GACA,mEACA,0BACA,qDACA,GACA,wCACA,mGACA,kHACA,qFACA,mCACA,4DACA,GACA,8FACA,qHACA,8GACA,uDACA,sEACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,uCACA,iFACA,yCACA,4EACA,sEACA,sEACA,gFACA,GACA,+DACA,uFACA,gHACA,gHACA,+DACA,+DACA,gCACA,6BACA,oCACA,mCACA,6DACA,IACA,KAGJ,EAAK,CACH,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,wCACA,iHACA,sBACA,kCACA,qHACA,oCACA,mGACA,sGACA,wHACA,oBACA,sFACA,gGACA,kHACA,oEACA,yHACA,0HACA,sEACA,uBACA,mBACA,eACA,oBACA,oCACA,0BACA,uCACA,6CACA,iDACA,iCACA,4BACA,aACA,GACA,8HACA,mDACA,uEACA,GACA,8HACA,mDACA,uEACA,GACA,iFACA,2EACA,sFACA,GACA,yEACA,sFACA,4DACA,GACA,wEACA,0CACA,mHACA,sBACA,wFACA,8GACA,8GACA,8GACA,8HACA,gGACA,+HACA,gHACA,oHACA,+BACA,iCACA,mBACA,eACA,oBACA,sCACA,mCACA,6CACA,6CACA,2CACA,sDACA,qCACA,+BACA,aACA,GACA,0GACA,+EACA,GACA,iFACA,+GACA,sEACA,qHACA,qHACA,gHACA,+GACA,sCACA,mBACA,eACA,oBACA,kCACA,gDACA,gDACA,mCACA,kCACA,aACA,GACA,kEACA,sEACA,6HACA,6DACA,mEACA,kIACA,iJACA,0GACA,2CACA,mBACA,eACA,oBACA,qCACA,oCACA,yDACA,+BACA,aACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,mEACA,mHACA,2BACA,kEACA,8BACA,8BACA,uCACA,6EACA,qCACA,QACA,GACA,uDACA,+BACA,kCACA,8CACA,6EACA,qCACA,QACA,GACA,sDACA,oCACA,kCACA,2CACA,6EACA,mDACA,QACA,GACA,oEACA,8BACA,8BACA,uCACA,0EACA,iDACA,QACA,GACA,oEACA,+BACA,kCACA,8CACA,0EACA,iDACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,kCACA,gEACA,qBACA,kEACA,gDACA,6DACA,wEACA,0CACA,QACA,GACA,6EACA,+CACA,4DACA,qEACA,yCACA,QACA,GACA,iEACA,4CACA,wDACA,sEACA,+BACA,yBACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,8EACA,2HACA,wCACA,qBACA,mHACA,kDACA,kHACA,oDACA,GACA,2HACA,6DACA,2HACA,oGACA,GACA,sDACA,2CACA,2DACA,gIACA,4BACA,6FACA,uFACA,sDACA,GACA,yHACA,+FACA,+FACA,+FACA,gGACA,gGACA,gGACA,gGACA,iGACA,iGACA,iGACA,iGACA,kGACA,kGACA,kGACA,kGACA,kGACA,iGACA,+FACA,0FACA,GACA,2DACA,GACA,mFACA,sHACA,wGACA,oFACA,QACA,GACA,6FACA,sHACA,uBACA,uFACA,sGACA,6FACA,qGACA,yFACA,uDACA,GACA,6BACA,2BACA,GACA,qBACA,yEACA,gCACA,6BACA,YACA,qBACA,yDACA,gCACA,6BACA,YACA,qBACA,iDACA,gCACA,6BACA,YACA,qBACA,6CACA,gCACA,6BACA,YACA,qBACA,2CACA,gCACA,6BACA,YACA,qBACA,0CACA,gCACA,6BACA,YACA,qBACA,0CACA,gCACA,6BACA,YACA,qBACA,kCACA,gCACA,YACA,GACA,oDACA,yCACA,GACA,oDACA,GACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,6BACA,YACA,qBACA,uCACA,mCACA,6CACA,YACA,GACA,qFACA,GACA,iGACA,kGACA,GACA,8GACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,0BACA,sBACA,GACA,8DACA,8DACA,qEACA,GACA,yCACA,+CACA,2CACA,gDACA,iCACA,kCACA,iCACA,wCACA,+CACA,6CACA,GACA,oCACA,yEACA,yBACA,mBACA,+BACA,2BACA,gCACA,iBACA,iBACA,IACA,4BACA,kCACA,GACA,yHACA,2CACA,6EACA,GACA,8GACA,iEACA,GACA,iGACA,GACA,0GACA,wBACA,0BACA,0BACA,qBACA,gDACA,mHACA,QACA,GACA,gCACA,sBACA,yBACA,QACA,GACA,6CACA,sCACA,+BACA,+BACA,+BACA,4BACA,wHACA,gFACA,yFACA,8EACA,GACA,qDACA,+BACA,gEACA,iEACA,8BACA,iEACA,mBACA,sDACA,kDACA,qDACA,yEACA,uBACA,gDACA,6FACA,qEACA,gBACA,YACA,QACA,GACA,kDACA,mCACA,4BACA,6BACA,qCACA,uCACA,8CACA,iEACA,kEACA,GACA,yFACA,GACA,gDACA,GACA,6CACA,oDACA,6BACA,8BACA,uCACA,yCACA,iGACA,2CACA,mCACA,iBACA,GACA,6DACA,QACA,GACA,kCACA,wEACA,mBACA,kBACA,mBACA,yCACA,sCACA,QACA,0CACA,+BACA,gCACA,wCACA,yHACA,aACA,gFACA,QACA,GACA,kCACA,0DACA,mBACA,kBACA,mBACA,yCACA,sCACA,QACA,2EACA,GACA,yBACA,sEACA,GACA,iFACA,oDACA,mCACA,0HACA,qBACA,qCACA,wGACA,mCACA,qBACA,iBACA,GACA,yDACA,sCACA,+EACA,yDACA,uBACA,+CACA,yBACA,gBACA,YACA,GACA,gFACA,QACA,GACA,mDACA,oCACA,6BACA,6BACA,qCACA,uCACA,6CACA,iEACA,kEACA,GACA,yFACA,GACA,gDACA,GACA,uDACA,oDACA,6BACA,8BACA,yCACA,yCACA,iGACA,2CACA,mCACA,iBACA,GACA,qCACA,qDACA,gEACA,iEACA,8EACA,oFACA,+EACA,QACA,GACA,kCACA,0EACA,mBACA,kBACA,mBACA,yCACA,qCACA,QACA,0DACA,0CACA,gCACA,gCACA,wCACA,yHACA,aACA,GACA,6EACA,gFACA,qDACA,QACA,GACA,kCACA,8DACA,mBACA,kBACA,mBACA,yCACA,qCACA,QACA,yHACA,wGACA,+BACA,gCACA,gCACA,iBACA,uEACA,aACA,GACA,qCACA,6EACA,qDACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,0BACA,GACA,kDACA,sDACA,qCACA,oEACA,8CACA,2EACA,kCACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,0BACA,sBACA,GACA,yCACA,GACA,uBACA,gFACA,8CACA,iCACA,6GACA,8CACA,sDACA,yFACA,GACA,8BACA,kFACA,oDACA,6BACA,kDACA,oBACA,wDACA,gBACA,GACA,mCACA,YACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,0BACA,GACA,uDACA,GACA,6BACA,0DACA,0EACA,+CACA,iDACA,+CACA,+CACA,GACA,sDACA,8BACA,0BACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,2DACA,GACA,iDACA,8CACA,GACA,4CACA,GACA,0CACA,GACA,uFACA,mCACA,qDACA,QACA,GACA,yCACA,iGACA,yEACA,wEACA,GACA,kCACA,oDACA,uEACA,YACA,QACA,GACA,yCACA,2BACA,yBACA,iCACA,4BACA,oCACA,yEACA,wEACA,GACA,kCACA,2EACA,YACA,QACA,GACA,yCACA,uDACA,4GACA,QACA,GACA,wCACA,gDACA,gEACA,yCACA,oBACA,yBACA,yBACA,6BACA,wBACA,mBACA,kEACA,gCACA,wFACA,wDACA,+CACA,6FACA,oEACA,mBACA,8BACA,+EACA,YACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,2DACA,oEACA,GACA,oCACA,wDACA,GACA,8CACA,4CACA,GACA,+FACA,wCACA,GACA,gDACA,mCACA,iCACA,6BACA,2BACA,+BACA,kCACA,kDACA,GACA,yEACA,wEACA,GACA,kCACA,oDACA,sEACA,0FACA,mFACA,YACA,QACA,GACA,gDACA,kCACA,yBACA,iCACA,6BACA,2BACA,+BACA,kCACA,kDACA,GACA,yEACA,wEACA,GACA,kCACA,sEACA,8FACA,uFACA,YACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,0BACA,GACA,iCACA,GACA,4DACA,iDACA,yEACA,aACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,2DACA,4DACA,GACA,0CACA,2DACA,GACA,yBACA,gGACA,6HACA,yDACA,gDACA,kCACA,2BACA,yBACA,yBACA,4BACA,mBACA,qBACA,oBACA,kCACA,2FACA,QACA,GACA,kCACA,sCACA,yBACA,yBACA,4BACA,mBACA,qBACA,oBACA,oCACA,uHACA,QACA,GACA,kCACA,kCACA,yBACA,yBACA,0BACA,mBACA,qBACA,oBACA,kCACA,sGACA,QACA,GACA,kCACA,6CACA,yBACA,yBACA,0BACA,mBACA,qBACA,oBACA,oCACA,sFACA,gEACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,sBACA,GACA,iCACA,gFACA,yBACA,2HACA,6FACA,+FACA,gFACA,mGACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,6BACA,kEACA,uCACA,gEACA,0DACA,GACA,+CACA,wDACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,gCACA,gEACA,iCACA,yFACA,wGACA,qEACA,qDACA,uFACA,GACA,oFACA,0GACA,8CACA,6CACA,GACA,0FACA,2GACA,kGACA,mFACA,gEACA,2BACA,yBACA,iCACA,4BACA,0BACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,qCACA,GACA,gCACA,gEACA,8DACA,mHACA,iEACA,wGACA,mCACA,iCACA,6BACA,2BACA,+BACA,0BACA,GACA,qHACA,gEACA,2GACA,kCACA,yBACA,iCACA,6BACA,2BACA,+BACA,0BACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,yBACA,gGACA,0BACA,iFACA,2FACA,sDACA,6DACA,0GACA,iGACA,iGACA,iGACA,2BACA,yBACA,yBACA,4BACA,mBACA,qBACA,oBACA,0BACA,GACA,iFACA,2FACA,sHACA,sDACA,6DACA,0GACA,iGACA,iGACA,iGACA,sCACA,yBACA,yBACA,4BACA,mBACA,qBACA,oBACA,0BACA,GACA,6HACA,0FACA,sDACA,sDACA,6EACA,iGACA,iGACA,iGACA,kCACA,yBACA,yBACA,0BACA,mBACA,qBACA,oBACA,0BACA,GACA,6HACA,0FACA,qIACA,sDACA,sDACA,6EACA,iGACA,iGACA,iGACA,6CACA,yBACA,yBACA,0BACA,mBACA,qBACA,oBACA,0BACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,sBACA,GACA,sFACA,GACA,iDACA,2DACA,oDACA,sCACA,2BACA,4BACA,sBACA,6BACA,4BACA,4BACA,oCACA,qCACA,QACA,GACA,yFACA,+GACA,6DACA,sHACA,GACA,gCACA,sBACA,6BACA,4BACA,4BACA,oCACA,QACA,GACA,4GACA,mHACA,6DACA,0GACA,GACA,uCACA,2BACA,4BACA,sBACA,6BACA,4BACA,6BACA,mCACA,qCACA,QACA,GACA,4FACA,gHACA,yDACA,uHACA,GACA,iCACA,sBACA,6BACA,4BACA,6BACA,mCACA,QACA,GACA,0HACA,oHACA,yDACA,2GACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,kCACA,oDACA,kCACA,oFACA,iEACA,yEACA,0DACA,4EACA,6EACA,uGACA,iGACA,iGACA,iGACA,uBACA,0BACA,2BACA,yBACA,0BACA,wBACA,mBACA,qBACA,oBACA,kBACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,0BACA,GACA,2DACA,GACA,iCACA,+BACA,qDACA,2CACA,GACA,sDACA,2CACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,KACA,wCACA,yDACA,KACA,kGACA,yGACA,MACA,kCACA,GACA,qBACA,sBACA,+BACA,0BACA,0BACA,+CACA,8DACA,iEACA,2EACA,GACA,kCACA,GACA,qBACA,qCACA,2BACA,yFACA,6DACA,+CACA,GACA,qFACA,qFACA,qFACA,sFACA,uFACA,sFACA,mFACA,yDACA,wDACA,GACA,0EACA,qFACA,iFACA,uFACA,6FACA,kDACA,GACA,4BACA,4FACA,+CACA,2GACA,sCACA,8CACA,8CACA,0BACA,gDACA,wBACA,GACA,iDACA,GACA,mDACA,2FACA,8DACA,oBACA,yFACA,4BACA,+CACA,2EACA,mFACA,2CACA,GACA,yDACA,oBACA,YACA,GACA,4BACA,QACA,GACA,gGACA,gEACA,0EACA,+BACA,GACA,qBACA,qGACA,YACA,GACA,8BACA,QACA,GACA,8FACA,8DACA,wEACA,2BACA,GACA,qBACA,+DACA,YACA,GACA,2BACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,0BACA,GACA,qEACA,8BACA,GACA,sEACA,+BACA,iEACA,wEACA,wEACA,gEACA,uGACA,oDACA,+BACA,2BACA,0BACA,0BACA,qBACA,sDACA,uFACA,QACA,GACA,iEACA,wEACA,4DACA,oDACA,mFACA,mBACA,eACA,wCACA,QACA,+EACA,gDACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,2BACA,GACA,qEACA,iBACA,gCACA,GACA,uDACA,+CACA,mDACA,6CACA,GACA,iEACA,mEACA,iDACA,qEACA,+EACA,qFACA,GACA,uEACA,4CACA,2EACA,kFACA,2DACA,QACA,GACA,iDACA,kDACA,2DACA,4DACA,gDACA,kDACA,mBACA,eACA,oBACA,8BACA,8BACA,yBACA,YACA,QACA,sCACA,0CACA,gDACA,QACA,GACA,+EACA,kDACA,iGACA,sFACA,4CACA,QACA,GACA,wFACA,oCACA,iEACA,mFACA,qEACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,kGACA,wBACA,0HACA,GACA,kDACA,uBACA,0BACA,0BACA,sBACA,QACA,GACA,kFACA,4DACA,6DACA,+CACA,sFACA,2BACA,0BACA,0BACA,qBACA,iDACA,oEACA,sEACA,QACA,GACA,4FACA,iEACA,iCACA,2DACA,0GACA,4CACA,0BACA,uBACA,6BACA,wCACA,mCACA,mCACA,kFACA,8CACA,wBACA,oBACA,gBACA,aACA,QACA,IACA,KAGJ,GAAM,CACJ,SAAY,WACZ,MAAS,CACP,+CACA,2BACA,GACA,2DACA,GACA,2BACA,sFACA,sDACA,2EACA,wFACA,4DACA,oDACA,iC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","file":"static/js/main.13f513b0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as Codec from '@truffle/codec';\nimport inspect from 'browser-util-inspect';\nimport './eth-tx-params.css';\nimport { Jazzicon } from '@ukstv/jazzicon-react';\nimport contractMap from '@metamask/contract-metadata';\n\nconst EthTxParams = ({\n  decoding,\n  definitions,\n}) => {\n  switch (decoding.kind) {\n    case 'function':\n\n      const {arguments: args, abi: { name } } = decoding;\n      return (\n        <div className=\"eth-tx-params\">\n          <div className=\"solidity-func-name\">{ deCamelCase(name).toUpperCase() }</div>\n          <ol>\n            { args.map((argument, index) => {\n              return renderNamedItem(argument?.name, argument.value, index)\n            })}\n          </ol>\n          <footer>Powered by <a href=\"https://www.trufflesuite.com/docs/truffle/codec/index.html\">Truffle Codec</a></footer>\n        </div>\n      )\n\n    case 'constructor':\n    default:\n      return 'Unable to render function data';\n  }\n};\n\nfunction renderNamedItem (name, item, index) {\n\n  if (item.type.typeClass === 'struct') {\n\n    const amtAndDec = checkIfPlausibleAmount(item);\n\n    return (<details key={index} open>\n      <summary>{deCamelCase(name) + ': '}</summary>\n      <ol>\n        {\n          item.value.map((data, index) => {\n            const { name, value: item } = data \n\n            if (amtAndDec && data === amtAndDec.amount) {\n              const amt = item.value.asBN.toString();\n              const firstSeg = amt.substr(0, amt.length - amtAndDec.decimals);\n              const lastSeg = amt.substr(amt.length - amtAndDec.decimals, amtAndDec.decimals);\n              const decimalAmount = `${firstSeg}.${lastSeg}`;\n              return <li className=\"solidity-value\">\n                <div className=\"solidity-named-item solidity-item\">\n                  <span className='param-name'>{ deCamelCase(name) + ': ' }</span>\n                  <span className=\"sol-item solidity-uint\">\n                    {decimalAmount}\n                  </span>\n                </div>\n              </li>\n            }\n\n            return <li className=\"solidity-value\" key={index}>\n              {renderNamedItem(name, item, index)}\n            </li>\n          })\n        }\n      </ol>      \n    </details>);\n  }\n\n  return (<div key={index} className=\"solidity-named-item solidity-item\">\n    <span className='param-name'>{ deCamelCase(name) + ': ' }</span>\n    { renderItem(item) }\n  </div>)\n}\n\n// Result can be a value or an error\n// Result { type:SolidityVariableType , kind: ResultKindString }\nfunction renderItem(item) {\n  // Two discriminators: value or error\n  switch (item.kind) {\n    case \"error\":\n      return \"Malformed data\";\n\n    default:\n\n      switch (item.type.typeClass) {\n\n        case 'uint':\n          return (<span className=\"sol-item solidity-uint\">\n            {item.value.asBN.toString()}\n          </span>)\n\n        case 'bytes':\n          return (<span className=\"sol-item solidity-bytes\">\n            {item.value.asHex}\n          </span>)\n\n        case 'address':\n          return renderAddressComponentFor(item);\n\n        default:\n          console.log('item: %o', item)\n          return (<pre className=\"sol-item solidity-raw\">\n            { inspect(new Codec.Format.Utils.Inspect.ResultInspector(item)) }\n          </pre>)\n      }\n  }\n}\n\nconst path = 'https://raw.githubusercontent.com/MetaMask/contract-metadata/ecd8aabb34683695c3157bb25cb95f51e57e2620/images/';\nfunction renderAddressComponentFor (item) {\n\n  const metadata = contractMap[item.value.asAddress];\n\n  const icon = metadata ? <img src={`${path}${metadata.logo}`}/> : \n    <Jazzicon address={item.value.asAddress}/>;\n\n  const name = metadata ? metadata.name : item.value.asAddress;\n\n  return (<span className=\"sol-item solidity-address\">\n    { icon }\n    <span>{name}</span>\n  </span>) \n}\n\n\n\nfunction deCamelCase (label) {\n  return label.replace(/([A-Z])/g, \",$1\").toLowerCase().split(',').join(' ');\n}\n\nfunction checkIfPlausibleAmount (struct) {\n\n  const tokenFields = struct.value\n  .filter(struct => struct.name.toLowerCase().includes('token'))\n  .filter(struct => struct.value.type.typeClass === 'address');\n\n  const amountFields = struct.value\n  .filter(struct => struct.name.toLowerCase().includes('amount'))\n  .filter(struct => struct.value?.type?.typeClass.includes('uint'));\n\n  if (tokenFields.length === 1 && amountFields.length === 1) {\n    const metadata = contractMap[tokenFields[0].value.value.asAddress]\n    if (metadata?.decimals) {\n      return { decimals: metadata.decimals, amount: amountFields[0] };\n    }\n  }\n\n  return false;\n}\n\nEthTxParams.propTypes = {\n  name: PropTypes.string,\n  args: PropTypes.arrayOf(),\n  large: PropTypes.bool,\n  rounded: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  icon: PropTypes.node,\n};\n           \nexport default EthTxParams;","export default [\n  {\n    \"tx\": {\n      \"kind\": \"function\",\n      \"class\": {\n        \"typeClass\": \"contract\",\n        \"kind\": \"native\",\n        \"id\": \"shimmedcompilationNumber(0):4015\",\n        \"typeName\": \"Wrapper\",\n        \"contractKind\": \"contract\",\n        \"payable\": true\n      },\n      \"abi\": {\n        \"inputs\": [\n          {\n            \"components\": [\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"nonce\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"expiry\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"components\": [\n                  {\n                    \"internalType\": \"bytes4\",\n                    \"name\": \"kind\",\n                    \"type\": \"bytes4\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"wallet\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"token\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"amount\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"id\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"internalType\": \"struct Types.Party\",\n                \"name\": \"signer\",\n                \"type\": \"tuple\"\n              },\n              {\n                \"components\": [\n                  {\n                    \"internalType\": \"bytes4\",\n                    \"name\": \"kind\",\n                    \"type\": \"bytes4\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"wallet\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"token\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"amount\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"id\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"internalType\": \"struct Types.Party\",\n                \"name\": \"sender\",\n                \"type\": \"tuple\"\n              },\n              {\n                \"components\": [\n                  {\n                    \"internalType\": \"bytes4\",\n                    \"name\": \"kind\",\n                    \"type\": \"bytes4\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"wallet\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"token\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"amount\",\n                    \"type\": \"uint256\"\n                  },\n                  {\n                    \"internalType\": \"uint256\",\n                    \"name\": \"id\",\n                    \"type\": \"uint256\"\n                  }\n                ],\n                \"internalType\": \"struct Types.Party\",\n                \"name\": \"affiliate\",\n                \"type\": \"tuple\"\n              },\n              {\n                \"components\": [\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"signatory\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"address\",\n                    \"name\": \"validator\",\n                    \"type\": \"address\"\n                  },\n                  {\n                    \"internalType\": \"bytes1\",\n                    \"name\": \"version\",\n                    \"type\": \"bytes1\"\n                  },\n                  {\n                    \"internalType\": \"uint8\",\n                    \"name\": \"v\",\n                    \"type\": \"uint8\"\n                  },\n                  {\n                    \"internalType\": \"bytes32\",\n                    \"name\": \"r\",\n                    \"type\": \"bytes32\"\n                  },\n                  {\n                    \"internalType\": \"bytes32\",\n                    \"name\": \"s\",\n                    \"type\": \"bytes32\"\n                  }\n                ],\n                \"internalType\": \"struct Types.Signature\",\n                \"name\": \"signature\",\n                \"type\": \"tuple\"\n              }\n            ],\n            \"internalType\": \"struct Types.Order\",\n            \"name\": \"order\",\n            \"type\": \"tuple\"\n          }\n        ],\n        \"name\": \"swap\",\n        \"outputs\": [],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n      },\n      \"arguments\": [\n        {\n          \"name\": \"order\",\n          \"value\": {\n            \"type\": {\n              \"typeClass\": \"struct\",\n              \"kind\": \"local\",\n              \"id\": \"shimmedcompilationNumber(0):18\",\n              \"typeName\": \"Order\",\n              \"definingContractName\": \"Types\",\n              \"location\": \"calldata\"\n            },\n            \"kind\": \"value\",\n            \"value\": [\n              {\n                \"name\": \"nonce\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"uint\",\n                    \"bits\": 256,\n                    \"typeHint\": \"uint256\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asString\": \"1613670935156\",\n                    \"rawAsString\": \"1613670935156\"\n                  }\n                }\n              },\n              {\n                \"name\": \"expiry\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"uint\",\n                    \"bits\": 256,\n                    \"typeHint\": \"uint256\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asString\": \"1613682674\",\n                    \"rawAsString\": \"1613682674\"\n                  }\n                }\n              },\n              {\n                \"name\": \"signer\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"struct\",\n                    \"kind\": \"local\",\n                    \"id\": \"shimmedcompilationNumber(0):29\",\n                    \"typeName\": \"Party\",\n                    \"definingContractName\": \"Types\",\n                    \"location\": \"calldata\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": [\n                    {\n                      \"name\": \"kind\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"bytes\",\n                          \"kind\": \"static\",\n                          \"length\": 4,\n                          \"typeHint\": \"bytes4\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asHex\": \"0x36372b07\",\n                          \"rawAsHex\": \"0x36372b0700000000000000000000000000000000000000000000000000000000\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"wallet\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0x00000000000080C886232E9b7EBBFb942B5987AA\",\n                          \"rawAsHex\": \"0x00000000000000000000000000000000000080c886232e9b7ebbfb942b5987aa\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"token\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0x27054b13b1B798B345b591a4d22e6562d47eA75a\",\n                          \"rawAsHex\": \"0x00000000000000000000000027054b13b1b798b345b591a4d22e6562d47ea75a\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"amount\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"uint\",\n                          \"bits\": 256,\n                          \"typeHint\": \"uint256\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asString\": \"150000000\",\n                          \"rawAsString\": \"150000000\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"id\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"uint\",\n                          \"bits\": 256,\n                          \"typeHint\": \"uint256\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asString\": \"0\",\n                          \"rawAsString\": \"0\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                \"name\": \"sender\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"struct\",\n                    \"kind\": \"local\",\n                    \"id\": \"shimmedcompilationNumber(0):29\",\n                    \"typeName\": \"Party\",\n                    \"definingContractName\": \"Types\",\n                    \"location\": \"calldata\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": [\n                    {\n                      \"name\": \"kind\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"bytes\",\n                          \"kind\": \"static\",\n                          \"length\": 4,\n                          \"typeHint\": \"bytes4\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asHex\": \"0x36372b07\",\n                          \"rawAsHex\": \"0x36372b0700000000000000000000000000000000000000000000000000000000\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"wallet\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0x4b203f54429F7D3019C0c4998B88f8f3517f8352\",\n                          \"rawAsHex\": \"0x0000000000000000000000004b203f54429f7d3019c0c4998b88f8f3517f8352\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"token\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n                          \"rawAsHex\": \"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"amount\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"uint\",\n                          \"bits\": 256,\n                          \"typeHint\": \"uint256\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asString\": \"2993210527506098688\",\n                          \"rawAsString\": \"2993210527506098688\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"id\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"uint\",\n                          \"bits\": 256,\n                          \"typeHint\": \"uint256\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asString\": \"0\",\n                          \"rawAsString\": \"0\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                \"name\": \"affiliate\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"struct\",\n                    \"kind\": \"local\",\n                    \"id\": \"shimmedcompilationNumber(0):29\",\n                    \"typeName\": \"Party\",\n                    \"definingContractName\": \"Types\",\n                    \"location\": \"calldata\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": [\n                    {\n                      \"name\": \"kind\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"bytes\",\n                          \"kind\": \"static\",\n                          \"length\": 4,\n                          \"typeHint\": \"bytes4\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asHex\": \"0x36372b07\",\n                          \"rawAsHex\": \"0x36372b0700000000000000000000000000000000000000000000000000000000\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"wallet\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0x0000000000000000000000000000000000000000\",\n                          \"rawAsHex\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"token\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0x0000000000000000000000000000000000000000\",\n                          \"rawAsHex\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"amount\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"uint\",\n                          \"bits\": 256,\n                          \"typeHint\": \"uint256\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asString\": \"0\",\n                          \"rawAsString\": \"0\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"id\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"uint\",\n                          \"bits\": 256,\n                          \"typeHint\": \"uint256\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asString\": \"0\",\n                          \"rawAsString\": \"0\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              },\n              {\n                \"name\": \"signature\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"struct\",\n                    \"kind\": \"local\",\n                    \"id\": \"shimmedcompilationNumber(0):42\",\n                    \"typeName\": \"Signature\",\n                    \"definingContractName\": \"Types\",\n                    \"location\": \"calldata\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": [\n                    {\n                      \"name\": \"signatory\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0x00000000008Bb52B2F23008Ba58939fF59a8f3F2\",\n                          \"rawAsHex\": \"0x00000000000000000000000000000000008bb52b2f23008ba58939ff59a8f3f2\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"validator\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"address\",\n                          \"kind\": \"general\",\n                          \"typeHint\": \"address\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asAddress\": \"0x4572f2554421Bd64Bef1c22c8a81840E8D496BeA\",\n                          \"rawAsHex\": \"0x0000000000000000000000004572f2554421bd64bef1c22c8a81840e8d496bea\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"version\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"bytes\",\n                          \"kind\": \"static\",\n                          \"length\": 1,\n                          \"typeHint\": \"bytes1\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asHex\": \"0x01\",\n                          \"rawAsHex\": \"0x0100000000000000000000000000000000000000000000000000000000000000\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"v\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"uint\",\n                          \"bits\": 8,\n                          \"typeHint\": \"uint8\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asString\": \"27\",\n                          \"rawAsString\": \"27\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"r\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"bytes\",\n                          \"kind\": \"static\",\n                          \"length\": 32,\n                          \"typeHint\": \"bytes32\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asHex\": \"0x5fcb0cc856bd0afc89493be7bb0e751a9b876b0faebe3086697b3c6c78e4efd3\",\n                          \"rawAsHex\": \"0x5fcb0cc856bd0afc89493be7bb0e751a9b876b0faebe3086697b3c6c78e4efd3\"\n                        }\n                      }\n                    },\n                    {\n                      \"name\": \"s\",\n                      \"value\": {\n                        \"type\": {\n                          \"typeClass\": \"bytes\",\n                          \"kind\": \"static\",\n                          \"length\": 32,\n                          \"typeHint\": \"bytes32\"\n                        },\n                        \"kind\": \"value\",\n                        \"value\": {\n                          \"asHex\": \"0x370a7eef528987c13555fd264d96b45af3277b555f9f4f4f6ebf9eb62d3fec2f\",\n                          \"rawAsHex\": \"0x370a7eef528987c13555fd264d96b45af3277b555f9f4f4f6ebf9eb62d3fec2f\"\n                        }\n                      }\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        }\n      ],\n      \"selector\": \"0x67641c2f\",\n      \"decodingMode\": \"full\"\n    },\n    \"definitions\": {\n      \"compilationsById\": {\n        \"shimmedcompilationNumber(0)\": {\n          \"sourcesById\": {\n            \"0\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"/**\",\n                \" *Submitted for verification at Etherscan.io on 20XX-XX-XX\",\n                \"*/\",\n                \"\",\n                \"pragma solidity 0.5.12;\",\n                \"pragma experimental ABIEncoderV2;\",\n                \"// File: @airswap/types/contracts/Types.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title Types: Library of Swap Protocol Types and Hashes\",\n                \"  */\",\n                \"library Types {\",\n                \"  bytes constant internal EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\",\n                \"  struct Order {\",\n                \"    uint256 nonce;                // Unique per order and should be sequential\",\n                \"    uint256 expiry;               // Expiry in seconds since 1 January 1970\",\n                \"    Party signer;                 // Party to the trade that sets terms\",\n                \"    Party sender;                 // Party to the trade that accepts terms\",\n                \"    Party affiliate;              // Party compensated for facilitating (optional)\",\n                \"    Signature signature;          // Signature of the order\",\n                \"  }\",\n                \"  struct Party {\",\n                \"    bytes4 kind;                  // Interface ID of the token\",\n                \"    address wallet;               // Wallet address of the party\",\n                \"    address token;                // Contract address of the token\",\n                \"    uint256 amount;               // Amount for ERC-20 or ERC-1155\",\n                \"    uint256 id;                   // ID for ERC-721 or ERC-1155\",\n                \"  }\",\n                \"  struct Signature {\",\n                \"    address signatory;            // Address of the wallet used to sign\",\n                \"    address validator;            // Address of the intended swap contract\",\n                \"    bytes1 version;               // EIP-191 signature version\",\n                \"    uint8 v;                      // `v` value of an ECDSA signature\",\n                \"    bytes32 r;                    // `r` value of an ECDSA signature\",\n                \"    bytes32 s;                    // `s` value of an ECDSA signature\",\n                \"  }\",\n                \"  bytes32 constant internal DOMAIN_TYPEHASH = keccak256(abi.encodePacked(\",\n                \"    \\\"EIP712Domain(\\\",\",\n                \"    \\\"string name,\\\",\",\n                \"    \\\"string version,\\\",\",\n                \"    \\\"address verifyingContract\\\",\",\n                \"    \\\")\\\"\",\n                \"  ));\",\n                \"  bytes32 constant internal ORDER_TYPEHASH = keccak256(abi.encodePacked(\",\n                \"    \\\"Order(\\\",\",\n                \"    \\\"uint256 nonce,\\\",\",\n                \"    \\\"uint256 expiry,\\\",\",\n                \"    \\\"Party signer,\\\",\",\n                \"    \\\"Party sender,\\\",\",\n                \"    \\\"Party affiliate\\\",\",\n                \"    \\\")\\\",\",\n                \"    \\\"Party(\\\",\",\n                \"    \\\"bytes4 kind,\\\",\",\n                \"    \\\"address wallet,\\\",\",\n                \"    \\\"address token,\\\",\",\n                \"    \\\"uint256 amount,\\\",\",\n                \"    \\\"uint256 id\\\",\",\n                \"    \\\")\\\"\",\n                \"  ));\",\n                \"  bytes32 constant internal PARTY_TYPEHASH = keccak256(abi.encodePacked(\",\n                \"    \\\"Party(\\\",\",\n                \"    \\\"bytes4 kind,\\\",\",\n                \"    \\\"address wallet,\\\",\",\n                \"    \\\"address token,\\\",\",\n                \"    \\\"uint256 amount,\\\",\",\n                \"    \\\"uint256 id\\\",\",\n                \"    \\\")\\\"\",\n                \"  ));\",\n                \"  /**\",\n                \"    * @notice Hash an order into bytes32\",\n                \"    * @dev EIP-191 header and domain separator included\",\n                \"    * @param order Order The order to be hashed\",\n                \"    * @param domainSeparator bytes32\",\n                \"    * @return bytes32 A keccak256 abi.encodePacked value\",\n                \"    */\",\n                \"  function hashOrder(\",\n                \"    Order calldata order,\",\n                \"    bytes32 domainSeparator\",\n                \"  ) external pure returns (bytes32) {\",\n                \"    return keccak256(abi.encodePacked(\",\n                \"      EIP191_HEADER,\",\n                \"      domainSeparator,\",\n                \"      keccak256(abi.encode(\",\n                \"        ORDER_TYPEHASH,\",\n                \"        order.nonce,\",\n                \"        order.expiry,\",\n                \"        keccak256(abi.encode(\",\n                \"          PARTY_TYPEHASH,\",\n                \"          order.signer.kind,\",\n                \"          order.signer.wallet,\",\n                \"          order.signer.token,\",\n                \"          order.signer.amount,\",\n                \"          order.signer.id\",\n                \"        )),\",\n                \"        keccak256(abi.encode(\",\n                \"          PARTY_TYPEHASH,\",\n                \"          order.sender.kind,\",\n                \"          order.sender.wallet,\",\n                \"          order.sender.token,\",\n                \"          order.sender.amount,\",\n                \"          order.sender.id\",\n                \"        )),\",\n                \"        keccak256(abi.encode(\",\n                \"          PARTY_TYPEHASH,\",\n                \"          order.affiliate.kind,\",\n                \"          order.affiliate.wallet,\",\n                \"          order.affiliate.token,\",\n                \"          order.affiliate.amount,\",\n                \"          order.affiliate.id\",\n                \"        ))\",\n                \"      ))\",\n                \"    ));\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Hash domain parameters into bytes32\",\n                \"    * @dev Used for signature validation (EIP-712)\",\n                \"    * @param name bytes\",\n                \"    * @param version bytes\",\n                \"    * @param verifyingContract address\",\n                \"    * @return bytes32 returns a keccak256 abi.encodePacked value\",\n                \"    */\",\n                \"  function hashDomain(\",\n                \"    bytes calldata name,\",\n                \"    bytes calldata version,\",\n                \"    address verifyingContract\",\n                \"  ) external pure returns (bytes32) {\",\n                \"    return keccak256(abi.encode(\",\n                \"      DOMAIN_TYPEHASH,\",\n                \"      keccak256(name),\",\n                \"      keccak256(version),\",\n                \"      verifyingContract\",\n                \"    ));\",\n                \"  }\",\n                \"}\",\n                \"// File: @airswap/delegate/contracts/interfaces/IDelegate.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"interface IDelegate {\",\n                \"  struct Rule {\",\n                \"    uint256 maxSenderAmount;      // The maximum amount of ERC-20 token the delegate would send\",\n                \"    uint256 priceCoef;            // Number to be multiplied by 10^(-priceExp) - the price coefficient\",\n                \"    uint256 priceExp;             // Indicates location of the decimal priceCoef * 10^(-priceExp)\",\n                \"  }\",\n                \"  event SetRule(\",\n                \"    address indexed owner,\",\n                \"    address indexed senderToken,\",\n                \"    address indexed signerToken,\",\n                \"    uint256 maxSenderAmount,\",\n                \"    uint256 priceCoef,\",\n                \"    uint256 priceExp\",\n                \"  );\",\n                \"  event UnsetRule(\",\n                \"    address indexed owner,\",\n                \"    address indexed senderToken,\",\n                \"    address indexed signerToken\",\n                \"  );\",\n                \"  event ProvideOrder(\",\n                \"    address indexed owner,\",\n                \"    address tradeWallet,\",\n                \"    address indexed senderToken,\",\n                \"    address indexed signerToken,\",\n                \"    uint256 senderAmount,\",\n                \"    uint256 priceCoef,\",\n                \"    uint256 priceExp\",\n                \"  );\",\n                \"  function setRule(\",\n                \"    address senderToken,\",\n                \"    address signerToken,\",\n                \"    uint256 maxSenderAmount,\",\n                \"    uint256 priceCoef,\",\n                \"    uint256 priceExp\",\n                \"  ) external;\",\n                \"  function unsetRule(\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) external;\",\n                \"  function provideOrder(\",\n                \"    Types.Order calldata order\",\n                \"  ) external;\",\n                \"  function rules(address, address) external view returns (Rule memory);\",\n                \"  function getSignerSideQuote(\",\n                \"    uint256 senderAmount,\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) external view returns (\",\n                \"    uint256 signerAmount\",\n                \"  );\",\n                \"  function getSenderSideQuote(\",\n                \"    uint256 signerAmount,\",\n                \"    address signerToken,\",\n                \"    address senderToken\",\n                \"  ) external view returns (\",\n                \"    uint256 senderAmount\",\n                \"  );\",\n                \"  function getMaxQuote(\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) external view returns (\",\n                \"    uint256 senderAmount,\",\n                \"    uint256 signerAmount\",\n                \"  );\",\n                \"  function owner()\",\n                \"    external view returns (address);\",\n                \"  function tradeWallet()\",\n                \"    external view returns (address);\",\n                \"}\",\n                \"// File: @airswap/indexer/contracts/interfaces/IIndexer.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"interface IIndexer {\",\n                \"  event CreateIndex(\",\n                \"    address indexed signerToken,\",\n                \"    address indexed senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    address indexAddress\",\n                \"  );\",\n                \"  event Stake(\",\n                \"    address indexed staker,\",\n                \"    address indexed signerToken,\",\n                \"    address indexed senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    uint256 stakeAmount\",\n                \"  );\",\n                \"  event Unstake(\",\n                \"    address indexed staker,\",\n                \"    address indexed signerToken,\",\n                \"    address indexed senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    uint256 stakeAmount\",\n                \"  );\",\n                \"  event AddTokenToBlacklist(\",\n                \"    address token\",\n                \"  );\",\n                \"  event RemoveTokenFromBlacklist(\",\n                \"    address token\",\n                \"  );\",\n                \"  function setLocatorWhitelist(\",\n                \"    bytes2 protocol,\",\n                \"    address newLocatorWhitelist\",\n                \"  ) external;\",\n                \"  function createIndex(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol\",\n                \"  ) external returns (address);\",\n                \"  function addTokenToBlacklist(\",\n                \"    address token\",\n                \"  ) external;\",\n                \"  function removeTokenFromBlacklist(\",\n                \"    address token\",\n                \"  ) external;\",\n                \"  function setIntent(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    uint256 stakingAmount,\",\n                \"    bytes32 locator\",\n                \"  ) external;\",\n                \"  function unsetIntent(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol\",\n                \"  ) external;\",\n                \"  function stakingToken() external view returns (address);\",\n                \"  function indexes(address, address, bytes2) external view returns (address);\",\n                \"  function tokenBlacklist(address) external view returns (bool);\",\n                \"  function getStakedAmount(\",\n                \"    address user,\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol\",\n                \"  ) external view returns (uint256);\",\n                \"  function getLocators(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    address cursor,\",\n                \"    uint256 limit\",\n                \"  ) external view returns (\",\n                \"    bytes32[] memory,\",\n                \"    uint256[] memory,\",\n                \"    address\",\n                \"  );\",\n                \"}\",\n                \"// File: @airswap/transfers/contracts/interfaces/ITransferHandler.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title ITransferHandler: interface for token transfers\",\n                \"  */\",\n                \"interface ITransferHandler {\",\n                \" /**\",\n                \"  * @notice Function to wrap token transfer for different token types\",\n                \"  * @param from address Wallet address to transfer from\",\n                \"  * @param to address Wallet address to transfer to\",\n                \"  * @param amount uint256 Amount for ERC-20\",\n                \"  * @param id token ID for ERC-721\",\n                \"  * @param token address Contract address of token\",\n                \"  * @return bool on success of the token transfer\",\n                \"  */\",\n                \"  function transferTokens(\",\n                \"    address from,\",\n                \"    address to,\",\n                \"    uint256 amount,\",\n                \"    uint256 id,\",\n                \"    address token\",\n                \"  ) external returns (bool);\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/GSN/Context.sol\",\n                \"/*\",\n                \" * @dev Provides information about the current execution context, including the\",\n                \" * sender of the transaction and its data. While these are generally available\",\n                \" * via msg.sender and msg.data, they should not be accessed in such a direct\",\n                \" * manner, since when dealing with GSN meta-transactions the account sending and\",\n                \" * paying for execution may not be the actual sender (as far as an application\",\n                \" * is concerned).\",\n                \" *\",\n                \" * This contract is only required for intermediate, library-like contracts.\",\n                \" */\",\n                \"contract Context {\",\n                \"    // Empty internal constructor, to prevent people from mistakenly deploying\",\n                \"    // an instance of this contract, which should be used via inheritance.\",\n                \"    constructor () internal { }\",\n                \"    // solhint-disable-previous-line no-empty-blocks\",\n                \"    function _msgSender() internal view returns (address payable) {\",\n                \"        return msg.sender;\",\n                \"    }\",\n                \"    function _msgData() internal view returns (bytes memory) {\",\n                \"        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\",\n                \"        return msg.data;\",\n                \"    }\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\",\n                \"/**\",\n                \" * @dev Contract module which provides a basic access control mechanism, where\",\n                \" * there is an account (an owner) that can be granted exclusive access to\",\n                \" * specific functions.\",\n                \" *\",\n                \" * This module is used through inheritance. It will make available the modifier\",\n                \" * `onlyOwner`, which can be applied to your functions to restrict their use to\",\n                \" * the owner.\",\n                \" */\",\n                \"contract Ownable is Context {\",\n                \"    address private _owner;\",\n                \"    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\",\n                \"    /**\",\n                \"     * @dev Initializes the contract setting the deployer as the initial owner.\",\n                \"     */\",\n                \"    constructor () internal {\",\n                \"        _owner = _msgSender();\",\n                \"        emit OwnershipTransferred(address(0), _owner);\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the address of the current owner.\",\n                \"     */\",\n                \"    function owner() public view returns (address) {\",\n                \"        return _owner;\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Throws if called by any account other than the owner.\",\n                \"     */\",\n                \"    modifier onlyOwner() {\",\n                \"        require(isOwner(), \\\"Ownable: caller is not the owner\\\");\",\n                \"        _;\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns true if the caller is the current owner.\",\n                \"     */\",\n                \"    function isOwner() public view returns (bool) {\",\n                \"        return _msgSender() == _owner;\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Leaves the contract without owner. It will not be possible to call\",\n                \"     * `onlyOwner` functions anymore. Can only be called by the current owner.\",\n                \"     *\",\n                \"     * NOTE: Renouncing ownership will leave the contract without an owner,\",\n                \"     * thereby removing any functionality that is only available to the owner.\",\n                \"     */\",\n                \"    function renounceOwnership() public onlyOwner {\",\n                \"        emit OwnershipTransferred(_owner, address(0));\",\n                \"        _owner = address(0);\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Transfers ownership of the contract to a new account (`newOwner`).\",\n                \"     * Can only be called by the current owner.\",\n                \"     */\",\n                \"    function transferOwnership(address newOwner) public onlyOwner {\",\n                \"        _transferOwnership(newOwner);\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Transfers ownership of the contract to a new account (`newOwner`).\",\n                \"     */\",\n                \"    function _transferOwnership(address newOwner) internal {\",\n                \"        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\",\n                \"        emit OwnershipTransferred(_owner, newOwner);\",\n                \"        _owner = newOwner;\",\n                \"    }\",\n                \"}\",\n                \"// File: @airswap/transfers/contracts/TransferHandlerRegistry.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title TransferHandlerRegistry: holds registry of contract to\",\n                \"  * facilitate token transfers\",\n                \"  */\",\n                \"contract TransferHandlerRegistry is Ownable {\",\n                \"  event AddTransferHandler(\",\n                \"    bytes4 kind,\",\n                \"    address contractAddress\",\n                \"  );\",\n                \"  // Mapping of bytes4 to contract interface type\",\n                \"  mapping (bytes4 => ITransferHandler) public transferHandlers;\",\n                \"  /**\",\n                \"  * @notice Adds handler to mapping\",\n                \"  * @param kind bytes4 Key value that defines a token type\",\n                \"  * @param transferHandler ITransferHandler\",\n                \"  */\",\n                \"  function addTransferHandler(bytes4 kind, ITransferHandler transferHandler)\",\n                \"    external onlyOwner {\",\n                \"      require(address(transferHandlers[kind]) == address(0), \\\"HANDLER_EXISTS_FOR_KIND\\\");\",\n                \"      transferHandlers[kind] = transferHandler;\",\n                \"      emit AddTransferHandler(kind, address(transferHandler));\",\n                \"    }\",\n                \"}\",\n                \"// File: @airswap/swap/contracts/interfaces/ISwap.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"interface ISwap {\",\n                \"  event Swap(\",\n                \"    uint256 indexed nonce,\",\n                \"    uint256 timestamp,\",\n                \"    address indexed signerWallet,\",\n                \"    uint256 signerAmount,\",\n                \"    uint256 signerId,\",\n                \"    address signerToken,\",\n                \"    address indexed senderWallet,\",\n                \"    uint256 senderAmount,\",\n                \"    uint256 senderId,\",\n                \"    address senderToken,\",\n                \"    address affiliateWallet,\",\n                \"    uint256 affiliateAmount,\",\n                \"    uint256 affiliateId,\",\n                \"    address affiliateToken\",\n                \"  );\",\n                \"  event Cancel(\",\n                \"    uint256 indexed nonce,\",\n                \"    address indexed signerWallet\",\n                \"  );\",\n                \"  event CancelUpTo(\",\n                \"    uint256 indexed nonce,\",\n                \"    address indexed signerWallet\",\n                \"  );\",\n                \"  event AuthorizeSender(\",\n                \"    address indexed authorizerAddress,\",\n                \"    address indexed authorizedSender\",\n                \"  );\",\n                \"  event AuthorizeSigner(\",\n                \"    address indexed authorizerAddress,\",\n                \"    address indexed authorizedSigner\",\n                \"  );\",\n                \"  event RevokeSender(\",\n                \"    address indexed authorizerAddress,\",\n                \"    address indexed revokedSender\",\n                \"  );\",\n                \"  event RevokeSigner(\",\n                \"    address indexed authorizerAddress,\",\n                \"    address indexed revokedSigner\",\n                \"  );\",\n                \"  /**\",\n                \"    * @notice Atomic Token Swap\",\n                \"    * @param order Types.Order\",\n                \"    */\",\n                \"  function swap(\",\n                \"    Types.Order calldata order\",\n                \"  ) external;\",\n                \"  /**\",\n                \"    * @notice Cancel one or more open orders by nonce\",\n                \"    * @param nonces uint256[]\",\n                \"    */\",\n                \"  function cancel(\",\n                \"    uint256[] calldata nonces\",\n                \"  ) external;\",\n                \"  /**\",\n                \"    * @notice Cancels all orders below a nonce value\",\n                \"    * @dev These orders can be made active by reducing the minimum nonce\",\n                \"    * @param minimumNonce uint256\",\n                \"    */\",\n                \"  function cancelUpTo(\",\n                \"    uint256 minimumNonce\",\n                \"  ) external;\",\n                \"  /**\",\n                \"    * @notice Authorize a delegated sender\",\n                \"    * @param authorizedSender address\",\n                \"    */\",\n                \"  function authorizeSender(\",\n                \"    address authorizedSender\",\n                \"  ) external;\",\n                \"  /**\",\n                \"    * @notice Authorize a delegated signer\",\n                \"    * @param authorizedSigner address\",\n                \"    */\",\n                \"  function authorizeSigner(\",\n                \"    address authorizedSigner\",\n                \"  ) external;\",\n                \"  /**\",\n                \"    * @notice Revoke an authorization\",\n                \"    * @param authorizedSender address\",\n                \"    */\",\n                \"  function revokeSender(\",\n                \"    address authorizedSender\",\n                \"  ) external;\",\n                \"  /**\",\n                \"    * @notice Revoke an authorization\",\n                \"    * @param authorizedSigner address\",\n                \"    */\",\n                \"  function revokeSigner(\",\n                \"    address authorizedSigner\",\n                \"  ) external;\",\n                \"  function senderAuthorizations(address, address) external view returns (bool);\",\n                \"  function signerAuthorizations(address, address) external view returns (bool);\",\n                \"  function signerNonceStatus(address, uint256) external view returns (byte);\",\n                \"  function signerMinimumNonce(address) external view returns (uint256);\",\n                \"  function registry() external view returns (TransferHandlerRegistry);\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/math/SafeMath.sol\",\n                \"/**\",\n                \" * @dev Wrappers over Solidity's arithmetic operations with added overflow\",\n                \" * checks.\",\n                \" *\",\n                \" * Arithmetic operations in Solidity wrap on overflow. This can easily result\",\n                \" * in bugs, because programmers usually assume that an overflow raises an\",\n                \" * error, which is the standard behavior in high level programming languages.\",\n                \" * `SafeMath` restores this intuition by reverting the transaction when an\",\n                \" * operation overflows.\",\n                \" *\",\n                \" * Using this library instead of the unchecked operations eliminates an entire\",\n                \" * class of bugs, so it's recommended to use it always.\",\n                \" */\",\n                \"library SafeMath {\",\n                \"    /**\",\n                \"     * @dev Returns the addition of two unsigned integers, reverting on\",\n                \"     * overflow.\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `+` operator.\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - Addition cannot overflow.\",\n                \"     */\",\n                \"    function add(uint256 a, uint256 b) internal pure returns (uint256) {\",\n                \"        uint256 c = a + b;\",\n                \"        require(c >= a, \\\"SafeMath: addition overflow\\\");\",\n                \"        return c;\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the subtraction of two unsigned integers, reverting on\",\n                \"     * overflow (when the result is negative).\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `-` operator.\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - Subtraction cannot overflow.\",\n                \"     */\",\n                \"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\",\n                \"        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\",\n                \"     * overflow (when the result is negative).\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `-` operator.\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - Subtraction cannot overflow.\",\n                \"     *\",\n                \"     * _Available since v2.4.0._\",\n                \"     */\",\n                \"    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\",\n                \"        require(b <= a, errorMessage);\",\n                \"        uint256 c = a - b;\",\n                \"        return c;\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the multiplication of two unsigned integers, reverting on\",\n                \"     * overflow.\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `*` operator.\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - Multiplication cannot overflow.\",\n                \"     */\",\n                \"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\",\n                \"        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\",\n                \"        // benefit is lost if 'b' is also tested.\",\n                \"        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\",\n                \"        if (a == 0) {\",\n                \"            return 0;\",\n                \"        }\",\n                \"        uint256 c = a * b;\",\n                \"        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\",\n                \"        return c;\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the integer division of two unsigned integers. Reverts on\",\n                \"     * division by zero. The result is rounded towards zero.\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `/` operator. Note: this function uses a\",\n                \"     * `revert` opcode (which leaves remaining gas untouched) while Solidity\",\n                \"     * uses an invalid opcode to revert (consuming all remaining gas).\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - The divisor cannot be zero.\",\n                \"     */\",\n                \"    function div(uint256 a, uint256 b) internal pure returns (uint256) {\",\n                \"        return div(a, b, \\\"SafeMath: division by zero\\\");\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\",\n                \"     * division by zero. The result is rounded towards zero.\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `/` operator. Note: this function uses a\",\n                \"     * `revert` opcode (which leaves remaining gas untouched) while Solidity\",\n                \"     * uses an invalid opcode to revert (consuming all remaining gas).\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - The divisor cannot be zero.\",\n                \"     *\",\n                \"     * _Available since v2.4.0._\",\n                \"     */\",\n                \"    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\",\n                \"        // Solidity only automatically asserts when dividing by 0\",\n                \"        require(b > 0, errorMessage);\",\n                \"        uint256 c = a / b;\",\n                \"        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\",\n                \"        return c;\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\",\n                \"     * Reverts when dividing by zero.\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `%` operator. This function uses a `revert`\",\n                \"     * opcode (which leaves remaining gas untouched) while Solidity uses an\",\n                \"     * invalid opcode to revert (consuming all remaining gas).\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - The divisor cannot be zero.\",\n                \"     */\",\n                \"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\",\n                \"        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\",\n                \"     * Reverts with custom message when dividing by zero.\",\n                \"     *\",\n                \"     * Counterpart to Solidity's `%` operator. This function uses a `revert`\",\n                \"     * opcode (which leaves remaining gas untouched) while Solidity uses an\",\n                \"     * invalid opcode to revert (consuming all remaining gas).\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - The divisor cannot be zero.\",\n                \"     *\",\n                \"     * _Available since v2.4.0._\",\n                \"     */\",\n                \"    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\",\n                \"        require(b != 0, errorMessage);\",\n                \"        return a % b;\",\n                \"    }\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\",\n                \"/**\",\n                \" * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\",\n                \" * the optional functions; to access them see {ERC20Detailed}.\",\n                \" */\",\n                \"interface IERC20 {\",\n                \"    /**\",\n                \"     * @dev Returns the amount of tokens in existence.\",\n                \"     */\",\n                \"    function totalSupply() external view returns (uint256);\",\n                \"    /**\",\n                \"     * @dev Returns the amount of tokens owned by `account`.\",\n                \"     */\",\n                \"    function balanceOf(address account) external view returns (uint256);\",\n                \"    /**\",\n                \"     * @dev Moves `amount` tokens from the caller's account to `recipient`.\",\n                \"     *\",\n                \"     * Returns a boolean value indicating whether the operation succeeded.\",\n                \"     *\",\n                \"     * Emits a {Transfer} event.\",\n                \"     */\",\n                \"    function transfer(address recipient, uint256 amount) external returns (bool);\",\n                \"    /**\",\n                \"     * @dev Returns the remaining number of tokens that `spender` will be\",\n                \"     * allowed to spend on behalf of `owner` through {transferFrom}. This is\",\n                \"     * zero by default.\",\n                \"     *\",\n                \"     * This value changes when {approve} or {transferFrom} are called.\",\n                \"     */\",\n                \"    function allowance(address owner, address spender) external view returns (uint256);\",\n                \"    /**\",\n                \"     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\",\n                \"     *\",\n                \"     * Returns a boolean value indicating whether the operation succeeded.\",\n                \"     *\",\n                \"     * IMPORTANT: Beware that changing an allowance with this method brings the risk\",\n                \"     * that someone may use both the old and the new allowance by unfortunate\",\n                \"     * transaction ordering. One possible solution to mitigate this race\",\n                \"     * condition is to first reduce the spender's allowance to 0 and set the\",\n                \"     * desired value afterwards:\",\n                \"     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\n                \"     *\",\n                \"     * Emits an {Approval} event.\",\n                \"     */\",\n                \"    function approve(address spender, uint256 amount) external returns (bool);\",\n                \"    /**\",\n                \"     * @dev Moves `amount` tokens from `sender` to `recipient` using the\",\n                \"     * allowance mechanism. `amount` is then deducted from the caller's\",\n                \"     * allowance.\",\n                \"     *\",\n                \"     * Returns a boolean value indicating whether the operation succeeded.\",\n                \"     *\",\n                \"     * Emits a {Transfer} event.\",\n                \"     */\",\n                \"    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\",\n                \"    /**\",\n                \"     * @dev Emitted when `value` tokens are moved from one account (`from`) to\",\n                \"     * another (`to`).\",\n                \"     *\",\n                \"     * Note that `value` may be zero.\",\n                \"     */\",\n                \"    event Transfer(address indexed from, address indexed to, uint256 value);\",\n                \"    /**\",\n                \"     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\",\n                \"     * a call to {approve}. `value` is the new allowance.\",\n                \"     */\",\n                \"    event Approval(address indexed owner, address indexed spender, uint256 value);\",\n                \"}\",\n                \"// File: @airswap/delegate/contracts/Delegate.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title Delegate: Deployable Trading Rules for the AirSwap Network\",\n                \"  * @notice Supports fungible tokens (ERC-20)\",\n                \"  * @dev inherits IDelegate, Ownable uses SafeMath library\",\n                \"  */\",\n                \"contract Delegate is IDelegate, Ownable {\",\n                \"  using SafeMath for uint256;\",\n                \"  // The Swap contract to be used to settle trades\",\n                \"  ISwap public swapContract;\",\n                \"  // The Indexer to stake intent to trade on\",\n                \"  IIndexer public indexer;\",\n                \"  // Maximum integer for token transfer approval\",\n                \"  uint256 constant internal MAX_INT =  2**256 - 1;\",\n                \"  // Address holding tokens that will be trading through this delegate\",\n                \"  address public tradeWallet;\",\n                \"  // Mapping of senderToken to signerToken for rule lookup\",\n                \"  mapping (address => mapping (address => Rule)) public rules;\",\n                \"  // ERC-20 (fungible token) interface identifier (ERC-165)\",\n                \"  bytes4 constant internal ERC20_INTERFACE_ID = 0x36372b07;\",\n                \"  // The protocol identifier for setting intents on an Index\",\n                \"  bytes2 public protocol;\",\n                \"  /**\",\n                \"    * @notice Contract Constructor\",\n                \"    * @dev owner defaults to msg.sender if delegateContractOwner is provided as address(0)\",\n                \"    * @param delegateSwap address Swap contract the delegate will deploy with\",\n                \"    * @param delegateIndexer address Indexer contract the delegate will deploy with\",\n                \"    * @param delegateContractOwner address Owner of the delegate\",\n                \"    * @param delegateTradeWallet address Wallet the delegate will trade from\",\n                \"    * @param delegateProtocol bytes2 The protocol identifier for Delegate contracts\",\n                \"    */\",\n                \"  constructor(\",\n                \"    ISwap delegateSwap,\",\n                \"    IIndexer delegateIndexer,\",\n                \"    address delegateContractOwner,\",\n                \"    address delegateTradeWallet,\",\n                \"    bytes2 delegateProtocol\",\n                \"  ) public {\",\n                \"    swapContract = delegateSwap;\",\n                \"    indexer = delegateIndexer;\",\n                \"    protocol = delegateProtocol;\",\n                \"    // If no delegate owner is provided, the deploying address is the owner.\",\n                \"    if (delegateContractOwner != address(0)) {\",\n                \"      transferOwnership(delegateContractOwner);\",\n                \"    }\",\n                \"    // If no trade wallet is provided, the owner's wallet is the trade wallet.\",\n                \"    if (delegateTradeWallet != address(0)) {\",\n                \"      tradeWallet = delegateTradeWallet;\",\n                \"    } else {\",\n                \"      tradeWallet = owner();\",\n                \"    }\",\n                \"    // Ensure that the indexer can pull funds from delegate account.\",\n                \"    require(\",\n                \"      IERC20(indexer.stakingToken())\",\n                \"      .approve(address(indexer), MAX_INT), \\\"STAKING_APPROVAL_FAILED\\\"\",\n                \"    );\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Set a Trading Rule\",\n                \"    * @dev only callable by the owner of the contract\",\n                \"    * @dev 1 senderToken = priceCoef * 10^(-priceExp) * signerToken\",\n                \"    * @param senderToken address Address of an ERC-20 token the delegate would send\",\n                \"    * @param signerToken address Address of an ERC-20 token the consumer would send\",\n                \"    * @param maxSenderAmount uint256 Maximum amount of ERC-20 token the delegate would send\",\n                \"    * @param priceCoef uint256 Whole number that will be multiplied by 10^(-priceExp) - the price coefficient\",\n                \"    * @param priceExp uint256 Exponent of the price to indicate location of the decimal priceCoef * 10^(-priceExp)\",\n                \"    */\",\n                \"  function setRule(\",\n                \"    address senderToken,\",\n                \"    address signerToken,\",\n                \"    uint256 maxSenderAmount,\",\n                \"    uint256 priceCoef,\",\n                \"    uint256 priceExp\",\n                \"  ) external onlyOwner {\",\n                \"    _setRule(\",\n                \"      senderToken,\",\n                \"      signerToken,\",\n                \"      maxSenderAmount,\",\n                \"      priceCoef,\",\n                \"      priceExp\",\n                \"    );\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Unset a Trading Rule\",\n                \"    * @dev only callable by the owner of the contract, removes from a mapping\",\n                \"    * @param senderToken address Address of an ERC-20 token the delegate would send\",\n                \"    * @param signerToken address Address of an ERC-20 token the consumer would send\",\n                \"    */\",\n                \"  function unsetRule(\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) external onlyOwner {\",\n                \"    _unsetRule(\",\n                \"      senderToken,\",\n                \"      signerToken\",\n                \"    );\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice sets a rule on the delegate and an intent on the indexer\",\n                \"    * @dev only callable by owner\",\n                \"    * @dev delegate needs to be given allowance from msg.sender for the newStakeAmount\",\n                \"    * @dev swap needs to be given permission to move funds from the delegate\",\n                \"    * @param senderToken address Token the delgeate will send\",\n                \"    * @param signerToken address Token the delegate will receive\",\n                \"    * @param rule Rule Rule to set on a delegate\",\n                \"    * @param newStakeAmount uint256 Amount to stake for an intent\",\n                \"    */\",\n                \"  function setRuleAndIntent(\",\n                \"    address senderToken,\",\n                \"    address signerToken,\",\n                \"    Rule calldata rule,\",\n                \"    uint256 newStakeAmount\",\n                \"  ) external onlyOwner {\",\n                \"    _setRule(\",\n                \"      senderToken,\",\n                \"      signerToken,\",\n                \"      rule.maxSenderAmount,\",\n                \"      rule.priceCoef,\",\n                \"      rule.priceExp\",\n                \"    );\",\n                \"    // get currentAmount staked or 0 if never staked\",\n                \"    uint256 oldStakeAmount = indexer.getStakedAmount(address(this), signerToken, senderToken, protocol);\",\n                \"    if (oldStakeAmount == newStakeAmount && oldStakeAmount > 0) {\",\n                \"      return; // forgo trying to reset intent with non-zero same stake amount\",\n                \"    } else if (oldStakeAmount < newStakeAmount) {\",\n                \"      // transfer only the difference from the sender to the Delegate.\",\n                \"      require(\",\n                \"        IERC20(indexer.stakingToken())\",\n                \"        .transferFrom(msg.sender, address(this), newStakeAmount - oldStakeAmount), \\\"STAKING_TRANSFER_FAILED\\\"\",\n                \"      );\",\n                \"    }\",\n                \"    indexer.setIntent(\",\n                \"      signerToken,\",\n                \"      senderToken,\",\n                \"      protocol,\",\n                \"      newStakeAmount,\",\n                \"      bytes32(uint256(address(this)) << 96) //NOTE: this will pad 0's to the right\",\n                \"    );\",\n                \"    if (oldStakeAmount > newStakeAmount) {\",\n                \"      // return excess stake back\",\n                \"      require(\",\n                \"        IERC20(indexer.stakingToken())\",\n                \"        .transfer(msg.sender, oldStakeAmount - newStakeAmount), \\\"STAKING_RETURN_FAILED\\\"\",\n                \"      );\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice unsets a rule on the delegate and removes an intent on the indexer\",\n                \"    * @dev only callable by owner\",\n                \"    * @param senderToken address Maker token in the token pair for rules and intents\",\n                \"    * @param signerToken address Taker token  in the token pair for rules and intents\",\n                \"    */\",\n                \"  function unsetRuleAndIntent(\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) external onlyOwner {\",\n                \"    _unsetRule(senderToken, signerToken);\",\n                \"    // Query the indexer for the amount staked.\",\n                \"    uint256 stakedAmount = indexer.getStakedAmount(address(this), signerToken, senderToken, protocol);\",\n                \"    indexer.unsetIntent(signerToken, senderToken, protocol);\",\n                \"    // Upon unstaking, the Delegate will be given the staking amount.\",\n                \"    // This is returned to the msg.sender.\",\n                \"    if (stakedAmount > 0) {\",\n                \"      require(\",\n                \"        IERC20(indexer.stakingToken())\",\n                \"          .transfer(msg.sender, stakedAmount),\\\"STAKING_RETURN_FAILED\\\"\",\n                \"      );\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Provide an Order\",\n                \"    * @dev Rules get reset with new maxSenderAmount\",\n                \"    * @param order Types.Order Order a user wants to submit to Swap.\",\n                \"    */\",\n                \"  function provideOrder(\",\n                \"    Types.Order calldata order\",\n                \"  ) external {\",\n                \"    Rule memory rule = rules[order.sender.token][order.signer.token];\",\n                \"    require(order.signature.v != 0,\",\n                \"      \\\"SIGNATURE_MUST_BE_SENT\\\");\",\n                \"    // Ensure the order is for the trade wallet.\",\n                \"    require(order.sender.wallet == tradeWallet,\",\n                \"      \\\"SENDER_WALLET_INVALID\\\");\",\n                \"    // Ensure the tokens are valid ERC20 tokens.\",\n                \"    require(order.signer.kind == ERC20_INTERFACE_ID,\",\n                \"      \\\"SIGNER_KIND_MUST_BE_ERC20\\\");\",\n                \"    require(order.sender.kind == ERC20_INTERFACE_ID,\",\n                \"      \\\"SENDER_KIND_MUST_BE_ERC20\\\");\",\n                \"    // Ensure that a rule exists.\",\n                \"    require(rule.maxSenderAmount != 0,\",\n                \"      \\\"TOKEN_PAIR_INACTIVE\\\");\",\n                \"    // Ensure the order does not exceed the maximum amount.\",\n                \"    require(order.sender.amount <= rule.maxSenderAmount,\",\n                \"      \\\"AMOUNT_EXCEEDS_MAX\\\");\",\n                \"    // Ensure the order is priced according to the rule.\",\n                \"    require(order.sender.amount <= _calculateSenderAmount(order.signer.amount, rule.priceCoef, rule.priceExp),\",\n                \"      \\\"PRICE_INVALID\\\");\",\n                \"    // Overwrite the rule with a decremented maxSenderAmount.\",\n                \"    rules[order.sender.token][order.signer.token] = Rule({\",\n                \"      maxSenderAmount: (rule.maxSenderAmount).sub(order.sender.amount),\",\n                \"      priceCoef: rule.priceCoef,\",\n                \"      priceExp: rule.priceExp\",\n                \"    });\",\n                \"    // Perform the swap.\",\n                \"    swapContract.swap(order);\",\n                \"    emit ProvideOrder(\",\n                \"      owner(),\",\n                \"      tradeWallet,\",\n                \"      order.sender.token,\",\n                \"      order.signer.token,\",\n                \"      order.sender.amount,\",\n                \"      rule.priceCoef,\",\n                \"      rule.priceExp\",\n                \"    );\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Set a new trade wallet\",\n                \"    * @param newTradeWallet address Address of the new trade wallet\",\n                \"    */\",\n                \"  function setTradeWallet(address newTradeWallet) external onlyOwner {\",\n                \"    require(newTradeWallet != address(0), \\\"TRADE_WALLET_REQUIRED\\\");\",\n                \"    tradeWallet = newTradeWallet;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Get a Signer-Side Quote from the Delegate\",\n                \"    * @param senderAmount uint256 Amount of ERC-20 token the delegate would send\",\n                \"    * @param senderToken address Address of an ERC-20 token the delegate would send\",\n                \"    * @param signerToken address Address of an ERC-20 token the consumer would send\",\n                \"    * @return uint256 signerAmount Amount of ERC-20 token the consumer would send\",\n                \"    */\",\n                \"  function getSignerSideQuote(\",\n                \"    uint256 senderAmount,\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) external view returns (\",\n                \"    uint256 signerAmount\",\n                \"  ) {\",\n                \"    Rule memory rule = rules[senderToken][signerToken];\",\n                \"    // Ensure that a rule exists.\",\n                \"    if(rule.maxSenderAmount > 0) {\",\n                \"      // Ensure the senderAmount does not exceed maximum for the rule.\",\n                \"      if(senderAmount <= rule.maxSenderAmount) {\",\n                \"        signerAmount = _calculateSignerAmount(senderAmount, rule.priceCoef, rule.priceExp);\",\n                \"        // Return the quote.\",\n                \"        return signerAmount;\",\n                \"      }\",\n                \"    }\",\n                \"    return 0;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Get a Sender-Side Quote from the Delegate\",\n                \"    * @param signerAmount uint256 Amount of ERC-20 token the consumer would send\",\n                \"    * @param signerToken address Address of an ERC-20 token the consumer would send\",\n                \"    * @param senderToken address Address of an ERC-20 token the delegate would send\",\n                \"    * @return uint256 senderAmount Amount of ERC-20 token the delegate would send\",\n                \"    */\",\n                \"  function getSenderSideQuote(\",\n                \"    uint256 signerAmount,\",\n                \"    address signerToken,\",\n                \"    address senderToken\",\n                \"  ) external view returns (\",\n                \"    uint256 senderAmount\",\n                \"  ) {\",\n                \"    Rule memory rule = rules[senderToken][signerToken];\",\n                \"    // Ensure that a rule exists.\",\n                \"    if(rule.maxSenderAmount > 0) {\",\n                \"      // Calculate the senderAmount.\",\n                \"      senderAmount = _calculateSenderAmount(signerAmount, rule.priceCoef, rule.priceExp);\",\n                \"      // Ensure the senderAmount does not exceed the maximum trade amount.\",\n                \"      if(senderAmount <= rule.maxSenderAmount) {\",\n                \"        return senderAmount;\",\n                \"      }\",\n                \"    }\",\n                \"    return 0;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Get a Maximum Quote from the Delegate\",\n                \"    * @param senderToken address Address of an ERC-20 token the delegate would send\",\n                \"    * @param signerToken address Address of an ERC-20 token the consumer would send\",\n                \"    * @return uint256 senderAmount Amount the delegate would send\",\n                \"    * @return uint256 signerAmount Amount the consumer would send\",\n                \"    */\",\n                \"  function getMaxQuote(\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) external view returns (\",\n                \"    uint256 senderAmount,\",\n                \"    uint256 signerAmount\",\n                \"  ) {\",\n                \"    Rule memory rule = rules[senderToken][signerToken];\",\n                \"    senderAmount = rule.maxSenderAmount;\",\n                \"    // Ensure that a rule exists.\",\n                \"    if (senderAmount > 0) {\",\n                \"      // calculate the signerAmount\",\n                \"      signerAmount = _calculateSignerAmount(senderAmount, rule.priceCoef, rule.priceExp);\",\n                \"      // Return the maxSenderAmount and calculated signerAmount.\",\n                \"      return (\",\n                \"        senderAmount,\",\n                \"        signerAmount\",\n                \"      );\",\n                \"    }\",\n                \"    return (0, 0);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Set a Trading Rule\",\n                \"    * @dev only callable by the owner of the contract\",\n                \"    * @dev 1 senderToken = priceCoef * 10^(-priceExp) * signerToken\",\n                \"    * @param senderToken address Address of an ERC-20 token the delegate would send\",\n                \"    * @param signerToken address Address of an ERC-20 token the consumer would send\",\n                \"    * @param maxSenderAmount uint256 Maximum amount of ERC-20 token the delegate would send\",\n                \"    * @param priceCoef uint256 Whole number that will be multiplied by 10^(-priceExp) - the price coefficient\",\n                \"    * @param priceExp uint256 Exponent of the price to indicate location of the decimal priceCoef * 10^(-priceExp)\",\n                \"    */\",\n                \"  function _setRule(\",\n                \"    address senderToken,\",\n                \"    address signerToken,\",\n                \"    uint256 maxSenderAmount,\",\n                \"    uint256 priceCoef,\",\n                \"    uint256 priceExp\",\n                \"  ) internal {\",\n                \"    require(priceCoef > 0, \\\"PRICE_COEF_INVALID\\\");\",\n                \"    rules[senderToken][signerToken] = Rule({\",\n                \"      maxSenderAmount: maxSenderAmount,\",\n                \"      priceCoef: priceCoef,\",\n                \"      priceExp: priceExp\",\n                \"    });\",\n                \"    emit SetRule(\",\n                \"      owner(),\",\n                \"      senderToken,\",\n                \"      signerToken,\",\n                \"      maxSenderAmount,\",\n                \"      priceCoef,\",\n                \"      priceExp\",\n                \"    );\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Unset a Trading Rule\",\n                \"    * @param senderToken address Address of an ERC-20 token the delegate would send\",\n                \"    * @param signerToken address Address of an ERC-20 token the consumer would send\",\n                \"    */\",\n                \"  function _unsetRule(\",\n                \"    address senderToken,\",\n                \"    address signerToken\",\n                \"  ) internal {\",\n                \"    // using non-zero rule.priceCoef for rule existence check\",\n                \"    if (rules[senderToken][signerToken].priceCoef > 0) {\",\n                \"      // Delete the rule.\",\n                \"      delete rules[senderToken][signerToken];\",\n                \"      emit UnsetRule(\",\n                \"        owner(),\",\n                \"        senderToken,\",\n                \"        signerToken\",\n                \"    );\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Calculate the signer amount for a given sender amount and price\",\n                \"    * @param senderAmount uint256 The amount the delegate would send in the swap\",\n                \"    * @param priceCoef uint256 Coefficient of the token price defined in the rule\",\n                \"    * @param priceExp uint256 Exponent of the token price defined in the rule\",\n                \"    */\",\n                \"  function _calculateSignerAmount(\",\n                \"    uint256 senderAmount,\",\n                \"    uint256 priceCoef,\",\n                \"    uint256 priceExp\",\n                \"  ) internal pure returns (\",\n                \"    uint256 signerAmount\",\n                \"  ) {\",\n                \"    // Calculate the signer amount using the price formula\",\n                \"    uint256 multiplier = senderAmount.mul(priceCoef);\",\n                \"    signerAmount = multiplier.div(10 ** priceExp);\",\n                \"    // If the div rounded down, round up\",\n                \"    if (multiplier.mod(10 ** priceExp) > 0) {\",\n                \"      signerAmount++;\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Calculate the sender amount for a given signer amount and price\",\n                \"    * @param signerAmount uint256 The amount the signer would send in the swap\",\n                \"    * @param priceCoef uint256 Coefficient of the token price defined in the rule\",\n                \"    * @param priceExp uint256 Exponent of the token price defined in the rule\",\n                \"    */\",\n                \"  function _calculateSenderAmount(\",\n                \"    uint256 signerAmount,\",\n                \"    uint256 priceCoef,\",\n                \"    uint256 priceExp\",\n                \"  ) internal pure returns (\",\n                \"    uint256 senderAmount\",\n                \"  ) {\",\n                \"    // Calculate the sender anount using the price formula\",\n                \"    senderAmount = signerAmount\",\n                \"      .mul(10 ** priceExp)\",\n                \"      .div(priceCoef);\",\n                \"  }\",\n                \"}\",\n                \"// File: @airswap/delegate/contracts/interfaces/IDelegateFactory.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"interface IDelegateFactory {\",\n                \"  event CreateDelegate(\",\n                \"    address indexed delegateContract,\",\n                \"    address swapContract,\",\n                \"    address indexerContract,\",\n                \"    address indexed delegateContractOwner,\",\n                \"    address delegateTradeWallet\",\n                \"  );\",\n                \"  /**\",\n                \"    * @notice Deploy a trusted delegate contract\",\n                \"    * @param delegateTradeWallet the wallet the delegate will trade from\",\n                \"    * @return delegateContractAddress address of the delegate contract created\",\n                \"    */\",\n                \"  function createDelegate(\",\n                \"    address delegateTradeWallet\",\n                \"  ) external returns (address delegateContractAddress);\",\n                \"}\",\n                \"// File: @airswap/indexer/contracts/interfaces/ILocatorWhitelist.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"interface ILocatorWhitelist {\",\n                \"  function has(\",\n                \"    bytes32 locator\",\n                \"  ) external view returns (bool);\",\n                \"}\",\n                \"// File: @airswap/delegate/contracts/DelegateFactory.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"contract DelegateFactory is IDelegateFactory, ILocatorWhitelist {\",\n                \"  // Mapping specifying whether an address was deployed by this factory\",\n                \"  mapping(address => bool) internal _deployedAddresses;\",\n                \"  // The swap and indexer contracts to use in the deployment of Delegates\",\n                \"  ISwap public swapContract;\",\n                \"  IIndexer public indexerContract;\",\n                \"  bytes2 public protocol;\",\n                \"  /**\",\n                \"    * @notice Create a new Delegate contract\",\n                \"    * @dev swapContract is unable to be changed after the factory sets it\",\n                \"    * @param factorySwapContract address Swap contract the delegate will deploy with\",\n                \"    * @param factoryIndexerContract address Indexer contract the delegate will deploy with\",\n                \"    * @param factoryProtocol bytes2 Protocol type of the delegates the factory deploys\",\n                \"    */\",\n                \"  constructor(\",\n                \"    ISwap factorySwapContract,\",\n                \"    IIndexer factoryIndexerContract,\",\n                \"    bytes2 factoryProtocol\",\n                \"  ) public {\",\n                \"    swapContract = factorySwapContract;\",\n                \"    indexerContract = factoryIndexerContract;\",\n                \"    protocol = factoryProtocol;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @param delegateTradeWallet address Wallet the delegate will trade from\",\n                \"    * @return address delegateContractAddress Address of the delegate contract created\",\n                \"    */\",\n                \"  function createDelegate(\",\n                \"    address delegateTradeWallet\",\n                \"  ) external returns (address delegateContractAddress) {\",\n                \"    delegateContractAddress = address(\",\n                \"      new Delegate(swapContract, indexerContract, msg.sender, delegateTradeWallet, protocol)\",\n                \"    );\",\n                \"    _deployedAddresses[delegateContractAddress] = true;\",\n                \"    emit CreateDelegate(\",\n                \"      delegateContractAddress,\",\n                \"      address(swapContract),\",\n                \"      address(indexerContract),\",\n                \"      msg.sender,\",\n                \"      delegateTradeWallet\",\n                \"    );\",\n                \"    return delegateContractAddress;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice To check whether a locator was deployed\",\n                \"    * @dev Implements ILocatorWhitelist.has\",\n                \"    * @param locator bytes32 Locator of the delegate in question\",\n                \"    * @return bool True if the delegate was deployed by this contract\",\n                \"    */\",\n                \"  function has(bytes32 locator) external view returns (bool) {\",\n                \"    return _deployedAddresses[address(bytes20(locator))];\",\n                \"  }\",\n                \"}\",\n                \"// File: @airswap/indexer/contracts/Index.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title Index: A List of Locators\",\n                \"  * @notice The Locators are sorted in reverse order based on the score\",\n                \"  * meaning that the first element in the list has the largest score\",\n                \"  * and final element has the smallest\",\n                \"  * @dev A mapping is used to mimic a circular linked list structure\",\n                \"  * where every mapping Entry contains a pointer to the next\",\n                \"  * and the previous\",\n                \"  */\",\n                \"contract Index is Ownable {\",\n                \"  // The number of entries in the index\",\n                \"  uint256 public length;\",\n                \"  // Identifier to use for the head of the list\",\n                \"  address constant internal HEAD = address(uint160(2**160-1));\",\n                \"  // Mapping of an identifier to its entry\",\n                \"  mapping(address => Entry) public entries;\",\n                \"  /**\",\n                \"    * @notice Index Entry\",\n                \"    * @param score uint256\",\n                \"    * @param locator bytes32\",\n                \"    * @param prev address Previous address in the linked list\",\n                \"    * @param next address Next address in the linked list\",\n                \"    */\",\n                \"  struct Entry {\",\n                \"    bytes32 locator;\",\n                \"    uint256 score;\",\n                \"    address prev;\",\n                \"    address next;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Contract Events\",\n                \"    */\",\n                \"  event SetLocator(\",\n                \"    address indexed identifier,\",\n                \"    uint256 score,\",\n                \"    bytes32 indexed locator\",\n                \"  );\",\n                \"  event UnsetLocator(\",\n                \"    address indexed identifier\",\n                \"  );\",\n                \"  /**\",\n                \"    * @notice Contract Constructor\",\n                \"    */\",\n                \"  constructor() public {\",\n                \"    // Create initial entry.\",\n                \"    entries[HEAD] = Entry(bytes32(0), 0, HEAD, HEAD);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Set a Locator\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    * @param score uint256 Score for the locator being set\",\n                \"    * @param locator bytes32 Locator\",\n                \"    */\",\n                \"  function setLocator(\",\n                \"    address identifier,\",\n                \"    uint256 score,\",\n                \"    bytes32 locator\",\n                \"  ) external onlyOwner {\",\n                \"    // Ensure the entry does not already exist.\",\n                \"    require(!_hasEntry(identifier), \\\"ENTRY_ALREADY_EXISTS\\\");\",\n                \"    _setLocator(identifier, score, locator);\",\n                \"    // Increment the index length.\",\n                \"    length = length + 1;\",\n                \"    emit SetLocator(identifier, score, locator);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Unset a Locator\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    */\",\n                \"  function unsetLocator(\",\n                \"    address identifier\",\n                \"  ) external onlyOwner {\",\n                \"    _unsetLocator(identifier);\",\n                \"    // Decrement the index length.\",\n                \"    length = length - 1;\",\n                \"    emit UnsetLocator(identifier);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Update a Locator\",\n                \"    * @dev score and/or locator do not need to be different from old values\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    * @param score uint256 Score for the locator being set\",\n                \"    * @param locator bytes32 Locator\",\n                \"    */\",\n                \"  function updateLocator(\",\n                \"    address identifier,\",\n                \"    uint256 score,\",\n                \"    bytes32 locator\",\n                \"  ) external onlyOwner {\",\n                \"    // Don't need to update length as it is not used in set/unset logic\",\n                \"    _unsetLocator(identifier);\",\n                \"    _setLocator(identifier, score, locator);\",\n                \"    emit SetLocator(identifier, score, locator);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Get a Score\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    * @return uint256 Score corresponding to the identifier\",\n                \"    */\",\n                \"  function getScore(\",\n                \"    address identifier\",\n                \"  ) external view returns (uint256) {\",\n                \"    return entries[identifier].score;\",\n                \"  }\",\n                \"    /**\",\n                \"    * @notice Get a Locator\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    * @return bytes32 Locator information\",\n                \"    */\",\n                \"  function getLocator(\",\n                \"    address identifier\",\n                \"  ) external view returns (bytes32) {\",\n                \"    return entries[identifier].locator;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Get a Range of Locators\",\n                \"    * @dev start value of 0x0 starts at the head\",\n                \"    * @param cursor address Cursor to start with\",\n                \"    * @param limit uint256 Maximum number of locators to return\",\n                \"    * @return bytes32[] List of locators\",\n                \"    * @return uint256[] List of scores corresponding to locators\",\n                \"    * @return address The next cursor to provide for pagination\",\n                \"    */\",\n                \"  function getLocators(\",\n                \"    address cursor,\",\n                \"    uint256 limit\",\n                \"  ) external view returns (\",\n                \"    bytes32[] memory locators,\",\n                \"    uint256[] memory scores,\",\n                \"    address nextCursor\",\n                \"  ) {\",\n                \"    address identifier;\",\n                \"    // If a valid cursor is provided, start there.\",\n                \"    if (cursor != address(0) && cursor != HEAD) {\",\n                \"      // Check that the provided cursor exists.\",\n                \"      if (!_hasEntry(cursor)) {\",\n                \"        return (new bytes32[](0), new uint256[](0), address(0));\",\n                \"      }\",\n                \"      // Set the starting identifier to the provided cursor.\",\n                \"      identifier = cursor;\",\n                \"    } else {\",\n                \"      identifier = entries[HEAD].next;\",\n                \"    }\",\n                \"    // Although it's not known how many entries are between `cursor` and the end\",\n                \"    // We know that it is no more than `length`\",\n                \"    uint256 size = (length < limit) ? length : limit;\",\n                \"    locators = new bytes32[](size);\",\n                \"    scores = new uint256[](size);\",\n                \"    // Iterate over the list until the end or size.\",\n                \"    uint256 i;\",\n                \"    while (i < size && identifier != HEAD) {\",\n                \"      locators[i] = entries[identifier].locator;\",\n                \"      scores[i] = entries[identifier].score;\",\n                \"      i = i + 1;\",\n                \"      identifier = entries[identifier].next;\",\n                \"    }\",\n                \"    return (locators, scores, identifier);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Internal function to set a Locator\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    * @param score uint256 Score for the locator being set\",\n                \"    * @param locator bytes32 Locator\",\n                \"    */\",\n                \"  function _setLocator(\",\n                \"    address identifier,\",\n                \"    uint256 score,\",\n                \"    bytes32 locator\",\n                \"  ) internal {\",\n                \"    // Disallow locator set to 0x0 to ensure list integrity.\",\n                \"    require(locator != bytes32(0), \\\"LOCATOR_MUST_BE_SENT\\\");\",\n                \"    // Find the first entry with a lower score.\",\n                \"    address nextEntry = _getEntryLowerThan(score);\",\n                \"    // Link the new entry between previous and next.\",\n                \"    address prevEntry = entries[nextEntry].prev;\",\n                \"    entries[prevEntry].next = identifier;\",\n                \"    entries[nextEntry].prev = identifier;\",\n                \"    entries[identifier] = Entry(locator, score, prevEntry, nextEntry);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Internal function to unset a Locator\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    */\",\n                \"  function _unsetLocator(\",\n                \"    address identifier\",\n                \"  ) internal {\",\n                \"    // Ensure the entry exists.\",\n                \"    require(_hasEntry(identifier), \\\"ENTRY_DOES_NOT_EXIST\\\");\",\n                \"    // Link the previous and next entries together.\",\n                \"    address prevUser = entries[identifier].prev;\",\n                \"    address nextUser = entries[identifier].next;\",\n                \"    entries[prevUser].next = nextUser;\",\n                \"    entries[nextUser].prev = prevUser;\",\n                \"    // Delete entry from the index.\",\n                \"    delete entries[identifier];\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Check if the Index has an Entry\",\n                \"    * @param identifier address On-chain address identifying the owner of a locator\",\n                \"    * @return bool True if the identifier corresponds to an Entry in the list\",\n                \"    */\",\n                \"  function _hasEntry(\",\n                \"    address identifier\",\n                \"  ) internal view returns (bool) {\",\n                \"    return entries[identifier].locator != bytes32(0);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Returns the largest scoring Entry Lower than a Score\",\n                \"    * @param score uint256 Score in question\",\n                \"    * @return address Identifier of the largest score lower than score\",\n                \"    */\",\n                \"  function _getEntryLowerThan(\",\n                \"    uint256 score\",\n                \"  ) internal view returns (address) {\",\n                \"    address identifier = entries[HEAD].next;\",\n                \"    // Head indicates last because the list is circular.\",\n                \"    if (score == 0) {\",\n                \"      return HEAD;\",\n                \"    }\",\n                \"    // Iterate until a lower score is found.\",\n                \"    while (score <= entries[identifier].score) {\",\n                \"      identifier = entries[identifier].next;\",\n                \"    }\",\n                \"    return identifier;\",\n                \"  }\",\n                \"}\",\n                \"// File: @airswap/indexer/contracts/Indexer.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title Indexer: A Collection of Index contracts by Token Pair\",\n                \"  */\",\n                \"contract Indexer is IIndexer, Ownable {\",\n                \"  // Token to be used for staking (ERC-20)\",\n                \"  IERC20 public stakingToken;\",\n                \"  // Mapping of signer token to sender token to protocol type to index\",\n                \"  mapping (address => mapping (address => mapping (bytes2 => Index))) public indexes;\",\n                \"  // The whitelist contract for checking whether a peer is whitelisted per peer type\",\n                \"  mapping (bytes2 => address) public locatorWhitelists;\",\n                \"  // Mapping of token address to boolean\",\n                \"  mapping (address => bool) public tokenBlacklist;\",\n                \"  /**\",\n                \"    * @notice Contract Constructor\",\n                \"    * @param indexerStakingToken address\",\n                \"    */\",\n                \"  constructor(\",\n                \"    address indexerStakingToken\",\n                \"  ) public {\",\n                \"    stakingToken = IERC20(indexerStakingToken);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Modifier to check an index exists\",\n                \"    */\",\n                \"  modifier indexExists(address signerToken, address senderToken, bytes2 protocol) {\",\n                \"    require(indexes[signerToken][senderToken][protocol] != Index(0),\",\n                \"      \\\"INDEX_DOES_NOT_EXIST\\\");\",\n                \"    _;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Set the address of an ILocatorWhitelist to use\",\n                \"    * @dev Allows removal of locatorWhitelist by passing 0x0\",\n                \"    * @param protocol bytes2 Protocol type for locators\",\n                \"    * @param newLocatorWhitelist address Locator whitelist\",\n                \"    */\",\n                \"  function setLocatorWhitelist(\",\n                \"    bytes2 protocol,\",\n                \"    address newLocatorWhitelist\",\n                \"  ) external onlyOwner {\",\n                \"    locatorWhitelists[protocol] = newLocatorWhitelist;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Create an Index (List of Locators for a Token Pair)\",\n                \"    * @dev Deploys a new Index contract and stores the address. If the Index already\",\n                \"    * @dev exists, returns its address, and does not emit a CreateIndex event\",\n                \"    * @param signerToken address Signer token for the Index\",\n                \"    * @param senderToken address Sender token for the Index\",\n                \"    * @param protocol bytes2 Protocol type for locators in Index\",\n                \"    */\",\n                \"  function createIndex(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol\",\n                \"  ) external returns (address) {\",\n                \"    // If the Index does not exist, create it.\",\n                \"    if (indexes[signerToken][senderToken][protocol] == Index(0)) {\",\n                \"      // Create a new Index contract for the token pair.\",\n                \"      indexes[signerToken][senderToken][protocol] = new Index();\",\n                \"      emit CreateIndex(signerToken, senderToken, protocol, address(indexes[signerToken][senderToken][protocol]));\",\n                \"    }\",\n                \"    // Return the address of the Index contract.\",\n                \"    return address(indexes[signerToken][senderToken][protocol]);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Add a Token to the Blacklist\",\n                \"    * @param token address Token to blacklist\",\n                \"    */\",\n                \"  function addTokenToBlacklist(\",\n                \"    address token\",\n                \"  ) external onlyOwner {\",\n                \"    if (!tokenBlacklist[token]) {\",\n                \"      tokenBlacklist[token] = true;\",\n                \"      emit AddTokenToBlacklist(token);\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Remove a Token from the Blacklist\",\n                \"    * @param token address Token to remove from the blacklist\",\n                \"    */\",\n                \"  function removeTokenFromBlacklist(\",\n                \"    address token\",\n                \"  ) external onlyOwner {\",\n                \"    if (tokenBlacklist[token]) {\",\n                \"      tokenBlacklist[token] = false;\",\n                \"      emit RemoveTokenFromBlacklist(token);\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Set an Intent to Trade\",\n                \"    * @dev Requires approval to transfer staking token for sender\",\n                \"    *\",\n                \"    * @param signerToken address Signer token of the Index being staked\",\n                \"    * @param senderToken address Sender token of the Index being staked\",\n                \"    * @param protocol bytes2 Protocol type for locator in Intent\",\n                \"    * @param stakingAmount uint256 Amount being staked\",\n                \"    * @param locator bytes32 Locator of the staker\",\n                \"    */\",\n                \"  function setIntent(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    uint256 stakingAmount,\",\n                \"    bytes32 locator\",\n                \"  ) external indexExists(signerToken, senderToken, protocol) {\",\n                \"    // If whitelist set, ensure the locator is valid.\",\n                \"    if (locatorWhitelists[protocol] != address(0)) {\",\n                \"      require(ILocatorWhitelist(locatorWhitelists[protocol]).has(locator),\",\n                \"      \\\"LOCATOR_NOT_WHITELISTED\\\");\",\n                \"    }\",\n                \"    // Ensure neither of the tokens are blacklisted.\",\n                \"    require(!tokenBlacklist[signerToken] && !tokenBlacklist[senderToken],\",\n                \"      \\\"PAIR_IS_BLACKLISTED\\\");\",\n                \"    bool notPreviouslySet = (indexes[signerToken][senderToken][protocol].getLocator(msg.sender) == bytes32(0));\",\n                \"    if (notPreviouslySet) {\",\n                \"      // Only transfer for staking if stakingAmount is set.\",\n                \"      if (stakingAmount > 0) {\",\n                \"        // Transfer the stakingAmount for staking.\",\n                \"        require(stakingToken.transferFrom(msg.sender, address(this), stakingAmount),\",\n                \"          \\\"STAKING_FAILED\\\");\",\n                \"      }\",\n                \"      // Set the locator on the index.\",\n                \"      indexes[signerToken][senderToken][protocol].setLocator(msg.sender, stakingAmount, locator);\",\n                \"      emit Stake(msg.sender, signerToken, senderToken, protocol, stakingAmount);\",\n                \"    } else {\",\n                \"      uint256 oldStake = indexes[signerToken][senderToken][protocol].getScore(msg.sender);\",\n                \"      _updateIntent(msg.sender, signerToken, senderToken, protocol, stakingAmount, locator, oldStake);\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Unset an Intent to Trade\",\n                \"    * @dev Users are allowed to unstake from blacklisted indexes\",\n                \"    *\",\n                \"    * @param signerToken address Signer token of the Index being unstaked\",\n                \"    * @param senderToken address Sender token of the Index being staked\",\n                \"    * @param protocol bytes2 Protocol type for locators in Intent\",\n                \"    */\",\n                \"  function unsetIntent(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol\",\n                \"  ) external {\",\n                \"    _unsetIntent(msg.sender, signerToken, senderToken, protocol);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Get the locators of those trading a token pair\",\n                \"    * @dev Users are allowed to unstake from blacklisted indexes\",\n                \"    *\",\n                \"    * @param signerToken address Signer token of the trading pair\",\n                \"    * @param senderToken address Sender token of the trading pair\",\n                \"    * @param protocol bytes2 Protocol type for locators in Intent\",\n                \"    * @param cursor address Address to start from\",\n                \"    * @param limit uint256 Total number of locators to return\",\n                \"    * @return bytes32[] List of locators\",\n                \"    * @return uint256[] List of scores corresponding to locators\",\n                \"    * @return address The next cursor to provide for pagination\",\n                \"    */\",\n                \"  function getLocators(\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    address cursor,\",\n                \"    uint256 limit\",\n                \"  ) external view returns (\",\n                \"    bytes32[] memory locators,\",\n                \"    uint256[] memory scores,\",\n                \"    address nextCursor\",\n                \"  ) {\",\n                \"    // Ensure neither token is blacklisted.\",\n                \"    if (tokenBlacklist[signerToken] || tokenBlacklist[senderToken]) {\",\n                \"      return (new bytes32[](0), new uint256[](0), address(0));\",\n                \"    }\",\n                \"    // Ensure the index exists.\",\n                \"    if (indexes[signerToken][senderToken][protocol] == Index(0)) {\",\n                \"      return (new bytes32[](0), new uint256[](0), address(0));\",\n                \"    }\",\n                \"    return indexes[signerToken][senderToken][protocol].getLocators(cursor, limit);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Gets the Stake Amount for a User\",\n                \"    * @param user address User who staked\",\n                \"    * @param signerToken address Signer token the user staked on\",\n                \"    * @param senderToken address Sender token the user staked on\",\n                \"    * @param protocol bytes2 Protocol type for locators in Intent\",\n                \"    * @return uint256 Amount the user staked\",\n                \"    */\",\n                \"  function getStakedAmount(\",\n                \"    address user,\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol\",\n                \"  ) public view returns (uint256 stakedAmount) {\",\n                \"    if (indexes[signerToken][senderToken][protocol] == Index(0)) {\",\n                \"      return 0;\",\n                \"    }\",\n                \"    // Return the score, equivalent to the stake amount.\",\n                \"    return indexes[signerToken][senderToken][protocol].getScore(user);\",\n                \"  }\",\n                \"  function _updateIntent(\",\n                \"    address user,\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol,\",\n                \"    uint256 newAmount,\",\n                \"    bytes32 newLocator,\",\n                \"    uint256 oldAmount\",\n                \"  ) internal {\",\n                \"    // If the new stake is bigger, collect the difference.\",\n                \"    if (oldAmount < newAmount) {\",\n                \"      // Note: SafeMath not required due to the inequality check above\",\n                \"      require(stakingToken.transferFrom(user, address(this), newAmount - oldAmount),\",\n                \"        \\\"STAKING_FAILED\\\");\",\n                \"    }\",\n                \"    // If the old stake is bigger, return the excess.\",\n                \"    if (newAmount < oldAmount) {\",\n                \"      // Note: SafeMath not required due to the inequality check above\",\n                \"      require(stakingToken.transfer(user, oldAmount - newAmount));\",\n                \"    }\",\n                \"    // Update their intent.\",\n                \"    indexes[signerToken][senderToken][protocol].updateLocator(user, newAmount, newLocator);\",\n                \"    emit Stake(user, signerToken, senderToken, protocol, newAmount);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Unset intents and return staked tokens\",\n                \"    * @param user address Address of the user who staked\",\n                \"    * @param signerToken address Signer token of the trading pair\",\n                \"    * @param senderToken address Sender token of the trading pair\",\n                \"    * @param protocol bytes2 Protocol type for locators in Intent\",\n                \"    */\",\n                \"  function _unsetIntent(\",\n                \"    address user,\",\n                \"    address signerToken,\",\n                \"    address senderToken,\",\n                \"    bytes2 protocol\",\n                \"  ) internal indexExists(signerToken, senderToken, protocol) {\",\n                \"     // Get the score for the user.\",\n                \"    uint256 score = indexes[signerToken][senderToken][protocol].getScore(user);\",\n                \"    // Unset the locator on the index.\",\n                \"    indexes[signerToken][senderToken][protocol].unsetLocator(user);\",\n                \"    if (score > 0) {\",\n                \"      // Return the staked tokens. Reverts on failure.\",\n                \"      require(stakingToken.transfer(user, score));\",\n                \"    }\",\n                \"    emit Unstake(user, signerToken, senderToken, protocol, score);\",\n                \"  }\",\n                \"}\",\n                \"// File: @airswap/swap/contracts/Swap.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title Swap: The Atomic Swap used on the AirSwap Network\",\n                \"  */\",\n                \"contract Swap is ISwap {\",\n                \"  // Domain and version for use in signatures (EIP-712)\",\n                \"  bytes constant internal DOMAIN_NAME = \\\"SWAP\\\";\",\n                \"  bytes constant internal DOMAIN_VERSION = \\\"2\\\";\",\n                \"  // Unique domain identifier for use in signatures (EIP-712)\",\n                \"  bytes32 private _domainSeparator;\",\n                \"  // Possible nonce statuses\",\n                \"  byte constant internal AVAILABLE = 0x00;\",\n                \"  byte constant internal UNAVAILABLE = 0x01;\",\n                \"  // Mapping of sender address to a delegated sender address and bool\",\n                \"  mapping (address => mapping (address => bool)) public senderAuthorizations;\",\n                \"  // Mapping of signer address to a delegated signer and bool\",\n                \"  mapping (address => mapping (address => bool)) public signerAuthorizations;\",\n                \"  // Mapping of signers to nonces with value AVAILABLE (0x00) or UNAVAILABLE (0x01)\",\n                \"  mapping (address => mapping (uint256 => byte)) public signerNonceStatus;\",\n                \"  // Mapping of signer addresses to an optionally set minimum valid nonce\",\n                \"  mapping (address => uint256) public signerMinimumNonce;\",\n                \"  // A registry storing a transfer handler for different token kinds\",\n                \"  TransferHandlerRegistry public registry;\",\n                \"  /**\",\n                \"    * @notice Contract Constructor\",\n                \"    * @dev Sets domain for signature validation (EIP-712)\",\n                \"    * @param swapRegistry TransferHandlerRegistry\",\n                \"    */\",\n                \"  constructor(TransferHandlerRegistry swapRegistry) public {\",\n                \"    _domainSeparator = Types.hashDomain(\",\n                \"      DOMAIN_NAME,\",\n                \"      DOMAIN_VERSION,\",\n                \"      address(this)\",\n                \"    );\",\n                \"    registry = swapRegistry;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Atomic Token Swap\",\n                \"    * @param order Types.Order Order to settle\",\n                \"    */\",\n                \"  function swap(\",\n                \"    Types.Order calldata order\",\n                \"  ) external {\",\n                \"    // Ensure the order is not expired.\",\n                \"    require(order.expiry > block.timestamp,\",\n                \"      \\\"ORDER_EXPIRED\\\");\",\n                \"    // Ensure the nonce is AVAILABLE (0x00).\",\n                \"    require(signerNonceStatus[order.signer.wallet][order.nonce] == AVAILABLE,\",\n                \"      \\\"ORDER_TAKEN_OR_CANCELLED\\\");\",\n                \"    // Ensure the order nonce is above the minimum.\",\n                \"    require(order.nonce >= signerMinimumNonce[order.signer.wallet],\",\n                \"      \\\"NONCE_TOO_LOW\\\");\",\n                \"    // Mark the nonce UNAVAILABLE (0x01).\",\n                \"    signerNonceStatus[order.signer.wallet][order.nonce] = UNAVAILABLE;\",\n                \"    // Validate the sender side of the trade.\",\n                \"    address finalSenderWallet;\",\n                \"    if (order.sender.wallet == address(0)) {\",\n                \"      /**\",\n                \"        * Sender is not specified. The msg.sender of the transaction becomes\",\n                \"        * the sender of the order.\",\n                \"        */\",\n                \"      finalSenderWallet = msg.sender;\",\n                \"    } else {\",\n                \"      /**\",\n                \"        * Sender is specified. If the msg.sender is not the specified sender,\",\n                \"        * this determines whether the msg.sender is an authorized sender.\",\n                \"        */\",\n                \"      require(isSenderAuthorized(order.sender.wallet, msg.sender),\",\n                \"          \\\"SENDER_UNAUTHORIZED\\\");\",\n                \"      // The msg.sender is authorized.\",\n                \"      finalSenderWallet = order.sender.wallet;\",\n                \"    }\",\n                \"    // Validate the signer side of the trade.\",\n                \"    if (order.signature.v == 0) {\",\n                \"      /**\",\n                \"        * Signature is not provided. The signer may have authorized the\",\n                \"        * msg.sender to swap on its behalf, which does not require a signature.\",\n                \"        */\",\n                \"      require(isSignerAuthorized(order.signer.wallet, msg.sender),\",\n                \"        \\\"SIGNER_UNAUTHORIZED\\\");\",\n                \"    } else {\",\n                \"      /**\",\n                \"        * The signature is provided. Determine whether the signer is\",\n                \"        * authorized and if so validate the signature itself.\",\n                \"        */\",\n                \"      require(isSignerAuthorized(order.signer.wallet, order.signature.signatory),\",\n                \"        \\\"SIGNER_UNAUTHORIZED\\\");\",\n                \"      // Ensure the signature is valid.\",\n                \"      require(isValid(order, _domainSeparator),\",\n                \"        \\\"SIGNATURE_INVALID\\\");\",\n                \"    }\",\n                \"    // Transfer token from sender to signer.\",\n                \"    transferToken(\",\n                \"      finalSenderWallet,\",\n                \"      order.signer.wallet,\",\n                \"      order.sender.amount,\",\n                \"      order.sender.id,\",\n                \"      order.sender.token,\",\n                \"      order.sender.kind\",\n                \"    );\",\n                \"    // Transfer token from signer to sender.\",\n                \"    transferToken(\",\n                \"      order.signer.wallet,\",\n                \"      finalSenderWallet,\",\n                \"      order.signer.amount,\",\n                \"      order.signer.id,\",\n                \"      order.signer.token,\",\n                \"      order.signer.kind\",\n                \"    );\",\n                \"    // Transfer token from signer to affiliate if specified.\",\n                \"    if (order.affiliate.token != address(0)) {\",\n                \"      transferToken(\",\n                \"        order.signer.wallet,\",\n                \"        order.affiliate.wallet,\",\n                \"        order.affiliate.amount,\",\n                \"        order.affiliate.id,\",\n                \"        order.affiliate.token,\",\n                \"        order.affiliate.kind\",\n                \"      );\",\n                \"    }\",\n                \"    emit Swap(\",\n                \"      order.nonce,\",\n                \"      block.timestamp,\",\n                \"      order.signer.wallet,\",\n                \"      order.signer.amount,\",\n                \"      order.signer.id,\",\n                \"      order.signer.token,\",\n                \"      finalSenderWallet,\",\n                \"      order.sender.amount,\",\n                \"      order.sender.id,\",\n                \"      order.sender.token,\",\n                \"      order.affiliate.wallet,\",\n                \"      order.affiliate.amount,\",\n                \"      order.affiliate.id,\",\n                \"      order.affiliate.token\",\n                \"    );\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Cancel one or more open orders by nonce\",\n                \"    * @dev Cancelled nonces are marked UNAVAILABLE (0x01)\",\n                \"    * @dev Emits a Cancel event\",\n                \"    * @dev Out of gas may occur in arrays of length > 400\",\n                \"    * @param nonces uint256[] List of nonces to cancel\",\n                \"    */\",\n                \"  function cancel(\",\n                \"    uint256[] calldata nonces\",\n                \"  ) external {\",\n                \"    for (uint256 i = 0; i < nonces.length; i++) {\",\n                \"      if (signerNonceStatus[msg.sender][nonces[i]] == AVAILABLE) {\",\n                \"        signerNonceStatus[msg.sender][nonces[i]] = UNAVAILABLE;\",\n                \"        emit Cancel(nonces[i], msg.sender);\",\n                \"      }\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Cancels all orders below a nonce value\",\n                \"    * @dev Emits a CancelUpTo event\",\n                \"    * @param minimumNonce uint256 Minimum valid nonce\",\n                \"    */\",\n                \"  function cancelUpTo(\",\n                \"    uint256 minimumNonce\",\n                \"  ) external {\",\n                \"    signerMinimumNonce[msg.sender] = minimumNonce;\",\n                \"    emit CancelUpTo(minimumNonce, msg.sender);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Authorize a delegated sender\",\n                \"    * @dev Emits an AuthorizeSender event\",\n                \"    * @param authorizedSender address Address to authorize\",\n                \"    */\",\n                \"  function authorizeSender(\",\n                \"    address authorizedSender\",\n                \"  ) external {\",\n                \"    require(msg.sender != authorizedSender, \\\"SELF_AUTH_INVALID\\\");\",\n                \"    if (!senderAuthorizations[msg.sender][authorizedSender]) {\",\n                \"      senderAuthorizations[msg.sender][authorizedSender] = true;\",\n                \"      emit AuthorizeSender(msg.sender, authorizedSender);\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Authorize a delegated signer\",\n                \"    * @dev Emits an AuthorizeSigner event\",\n                \"    * @param authorizedSigner address Address to authorize\",\n                \"    */\",\n                \"  function authorizeSigner(\",\n                \"    address authorizedSigner\",\n                \"  ) external {\",\n                \"    require(msg.sender != authorizedSigner, \\\"SELF_AUTH_INVALID\\\");\",\n                \"    if (!signerAuthorizations[msg.sender][authorizedSigner]) {\",\n                \"      signerAuthorizations[msg.sender][authorizedSigner] = true;\",\n                \"      emit AuthorizeSigner(msg.sender, authorizedSigner);\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Revoke an authorized sender\",\n                \"    * @dev Emits a RevokeSender event\",\n                \"    * @param authorizedSender address Address to revoke\",\n                \"    */\",\n                \"  function revokeSender(\",\n                \"    address authorizedSender\",\n                \"  ) external {\",\n                \"    if (senderAuthorizations[msg.sender][authorizedSender]) {\",\n                \"      delete senderAuthorizations[msg.sender][authorizedSender];\",\n                \"      emit RevokeSender(msg.sender, authorizedSender);\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Revoke an authorized signer\",\n                \"    * @dev Emits a RevokeSigner event\",\n                \"    * @param authorizedSigner address Address to revoke\",\n                \"    */\",\n                \"  function revokeSigner(\",\n                \"    address authorizedSigner\",\n                \"  ) external {\",\n                \"    if (signerAuthorizations[msg.sender][authorizedSigner]) {\",\n                \"      delete signerAuthorizations[msg.sender][authorizedSigner];\",\n                \"      emit RevokeSigner(msg.sender, authorizedSigner);\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Determine whether a sender delegate is authorized\",\n                \"    * @param authorizer address Address doing the authorization\",\n                \"    * @param delegate address Address being authorized\",\n                \"    * @return bool True if a delegate is authorized to send\",\n                \"    */\",\n                \"  function isSenderAuthorized(\",\n                \"    address authorizer,\",\n                \"    address delegate\",\n                \"  ) internal view returns (bool) {\",\n                \"    return ((authorizer == delegate) ||\",\n                \"      senderAuthorizations[authorizer][delegate]);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Determine whether a signer delegate is authorized\",\n                \"    * @param authorizer address Address doing the authorization\",\n                \"    * @param delegate address Address being authorized\",\n                \"    * @return bool True if a delegate is authorized to sign\",\n                \"    */\",\n                \"  function isSignerAuthorized(\",\n                \"    address authorizer,\",\n                \"    address delegate\",\n                \"  ) internal view returns (bool) {\",\n                \"    return ((authorizer == delegate) ||\",\n                \"      signerAuthorizations[authorizer][delegate]);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Validate signature using an EIP-712 typed data hash\",\n                \"    * @param order Types.Order Order to validate\",\n                \"    * @param domainSeparator bytes32 Domain identifier used in signatures (EIP-712)\",\n                \"    * @return bool True if order has a valid signature\",\n                \"    */\",\n                \"  function isValid(\",\n                \"    Types.Order memory order,\",\n                \"    bytes32 domainSeparator\",\n                \"  ) internal pure returns (bool) {\",\n                \"    if (order.signature.version == byte(0x01)) {\",\n                \"      return order.signature.signatory == ecrecover(\",\n                \"        Types.hashOrder(\",\n                \"          order,\",\n                \"          domainSeparator\",\n                \"        ),\",\n                \"        order.signature.v,\",\n                \"        order.signature.r,\",\n                \"        order.signature.s\",\n                \"      );\",\n                \"    }\",\n                \"    if (order.signature.version == byte(0x45)) {\",\n                \"      return order.signature.signatory == ecrecover(\",\n                \"        keccak256(\",\n                \"          abi.encodePacked(\",\n                \"            \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\",\",\n                \"            Types.hashOrder(order, domainSeparator)\",\n                \"          )\",\n                \"        ),\",\n                \"        order.signature.v,\",\n                \"        order.signature.r,\",\n                \"        order.signature.s\",\n                \"      );\",\n                \"    }\",\n                \"    return false;\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Perform token transfer for tokens in registry\",\n                \"    * @dev Transfer type specified by the bytes4 kind param\",\n                \"    * @dev ERC721: uses transferFrom for transfer\",\n                \"    * @dev ERC20: Takes into account non-standard ERC-20 tokens.\",\n                \"    * @param from address Wallet address to transfer from\",\n                \"    * @param to address Wallet address to transfer to\",\n                \"    * @param amount uint256 Amount for ERC-20\",\n                \"    * @param id token ID for ERC-721\",\n                \"    * @param token address Contract address of token\",\n                \"    * @param kind bytes4 EIP-165 interface ID of the token\",\n                \"    */\",\n                \"  function transferToken(\",\n                \"      address from,\",\n                \"      address to,\",\n                \"      uint256 amount,\",\n                \"      uint256 id,\",\n                \"      address token,\",\n                \"      bytes4 kind\",\n                \"  ) internal {\",\n                \"    // Ensure the transfer is not to self.\",\n                \"    require(from != to, \\\"SELF_TRANSFER_INVALID\\\");\",\n                \"    ITransferHandler transferHandler = registry.transferHandlers(kind);\",\n                \"    require(address(transferHandler) != address(0), \\\"TOKEN_KIND_UNKNOWN\\\");\",\n                \"    // delegatecall required to pass msg.sender as Swap contract to handle the\",\n                \"    // token transfer in the calling contract\",\n                \"    (bool success, bytes memory data) = address(transferHandler).\",\n                \"      delegatecall(abi.encodeWithSelector(\",\n                \"        transferHandler.transferTokens.selector,\",\n                \"        from,\",\n                \"        to,\",\n                \"        amount,\",\n                \"        id,\",\n                \"        token\",\n                \"    ));\",\n                \"    require(success && abi.decode(data, (bool)), \\\"TRANSFER_FAILED\\\");\",\n                \"  }\",\n                \"}\",\n                \"// File: @airswap/tokens/contracts/interfaces/IWETH.sol\",\n                \"interface IWETH {\",\n                \"  function deposit() external payable;\",\n                \"  function withdraw(uint256) external;\",\n                \"  function totalSupply() external view returns (uint256);\",\n                \"  function balanceOf(address account) external view returns (uint256);\",\n                \"  function transfer(address recipient, uint256 amount) external returns (bool);\",\n                \"  function allowance(address owner, address spender) external view returns (uint256);\",\n                \"  function approve(address spender, uint256 amount) external returns (bool);\",\n                \"  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\",\n                \"  event Transfer(address indexed from, address indexed to, uint256 value);\",\n                \"  event Approval(address indexed owner, address indexed spender, uint256 value);\",\n                \"}\",\n                \"// File: @airswap/wrapper/contracts/Wrapper.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \"  * @title Wrapper: Send and receive ether for WETH trades\",\n                \"  */\",\n                \"contract Wrapper {\",\n                \"  // The Swap contract to settle trades\",\n                \"  ISwap public swapContract;\",\n                \"  // The WETH contract to wrap ether\",\n                \"  IWETH public wethContract;\",\n                \"  /**\",\n                \"    * @notice Contract Constructor\",\n                \"    * @param wrapperSwapContract address\",\n                \"    * @param wrapperWethContract address\",\n                \"    */\",\n                \"  constructor(\",\n                \"    address wrapperSwapContract,\",\n                \"    address wrapperWethContract\",\n                \"  ) public {\",\n                \"    swapContract = ISwap(wrapperSwapContract);\",\n                \"    wethContract = IWETH(wrapperWethContract);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Required when withdrawing from WETH\",\n                \"    * @dev During unwraps, WETH.withdraw transfers ether to msg.sender (this contract)\",\n                \"    */\",\n                \"  function() external payable {\",\n                \"    // Ensure the message sender is the WETH contract.\",\n                \"    if(msg.sender != address(wethContract)) {\",\n                \"      revert(\\\"DO_NOT_SEND_ETHER\\\");\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Send an Order to be forwarded to Swap\",\n                \"    * @dev Sender must authorize this contract on the swapContract\",\n                \"    * @dev Sender must approve this contract on the wethContract\",\n                \"    * @param order Types.Order The Order\",\n                \"    */\",\n                \"  function swap(\",\n                \"    Types.Order calldata order\",\n                \"  ) external payable {\",\n                \"    // Ensure msg.sender is sender wallet.\",\n                \"    require(order.sender.wallet == msg.sender,\",\n                \"      \\\"MSG_SENDER_MUST_BE_ORDER_SENDER\\\");\",\n                \"    // Ensure that the signature is present.\",\n                \"    // The signature will be explicitly checked in Swap.\",\n                \"    require(order.signature.v != 0,\",\n                \"      \\\"SIGNATURE_MUST_BE_SENT\\\");\",\n                \"    // Wraps ETH to WETH when the sender provides ETH and the order is WETH\",\n                \"    _wrapEther(order.sender);\",\n                \"    // Perform the swap.\",\n                \"    swapContract.swap(order);\",\n                \"    // Unwraps WETH to ETH when the sender receives WETH\",\n                \"    _unwrapEther(order.sender.wallet, order.signer.token, order.signer.amount);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Send an Order to be forwarded to a Delegate\",\n                \"    * @dev Sender must authorize the Delegate contract on the swapContract\",\n                \"    * @dev Sender must approve this contract on the wethContract\",\n                \"    * @dev Delegate's tradeWallet must be order.sender - checked in Delegate\",\n                \"    * @param order Types.Order The Order\",\n                \"    * @param delegate IDelegate The Delegate to provide the order to\",\n                \"    */\",\n                \"  function provideDelegateOrder(\",\n                \"    Types.Order calldata order,\",\n                \"    IDelegate delegate\",\n                \"  ) external payable {\",\n                \"    // Ensure that the signature is present.\",\n                \"    // The signature will be explicitly checked in Swap.\",\n                \"    require(order.signature.v != 0,\",\n                \"      \\\"SIGNATURE_MUST_BE_SENT\\\");\",\n                \"    // Wraps ETH to WETH when the signer provides ETH and the order is WETH\",\n                \"    _wrapEther(order.signer);\",\n                \"    // Provide the order to the Delegate.\",\n                \"    delegate.provideOrder(order);\",\n                \"    // Unwraps WETH to ETH when the signer receives WETH\",\n                \"    _unwrapEther(order.signer.wallet, order.sender.token, order.sender.amount);\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Wraps ETH to WETH when a trade requires it\",\n                \"    * @param party Types.Party The side of the trade that may need wrapping\",\n                \"    */\",\n                \"  function _wrapEther(Types.Party memory party) internal {\",\n                \"    // Check whether ether needs wrapping\",\n                \"    if (party.token == address(wethContract)) {\",\n                \"      // Ensure message value is param.\",\n                \"      require(party.amount == msg.value,\",\n                \"        \\\"VALUE_MUST_BE_SENT\\\");\",\n                \"      // Wrap (deposit) the ether.\",\n                \"      wethContract.deposit.value(msg.value)();\",\n                \"      // Transfer the WETH from the wrapper to party.\",\n                \"      // Return value not checked - WETH throws on error and does not return false\",\n                \"      wethContract.transfer(party.wallet, party.amount);\",\n                \"    } else {\",\n                \"      // Ensure no unexpected ether is sent.\",\n                \"      require(msg.value == 0,\",\n                \"        \\\"VALUE_MUST_BE_ZERO\\\");\",\n                \"    }\",\n                \"  }\",\n                \"  /**\",\n                \"    * @notice Unwraps WETH to ETH when a trade requires it\",\n                \"    * @dev The unwrapping only succeeds if recipientWallet has approved transferFrom\",\n                \"    * @param recipientWallet address The trade recipient, who may have received WETH\",\n                \"    * @param receivingToken address The token address the recipient received\",\n                \"    * @param amount uint256 The amount of token the recipient received\",\n                \"    */\",\n                \"  function _unwrapEther(address recipientWallet, address receivingToken, uint256 amount) internal {\",\n                \"    // Check whether ether needs unwrapping\",\n                \"    if (receivingToken == address(wethContract)) {\",\n                \"      // Transfer weth from the recipient to the wrapper.\",\n                \"      wethContract.transferFrom(recipientWallet, address(this), amount);\",\n                \"      // Unwrap (withdraw) the ether.\",\n                \"      wethContract.withdraw(amount);\",\n                \"      // Transfer ether to the recipient.\",\n                \"      // solium-disable-next-line security/no-call-value\",\n                \"      (bool success, ) = recipientWallet.call.value(amount)(\\\"\\\");\",\n                \"      require(success, \\\"ETH_RETURN_FAILED\\\");\",\n                \"    }\",\n                \"  }\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/introspection/IERC165.sol\",\n                \"/**\",\n                \" * @dev Interface of the ERC165 standard, as defined in the\",\n                \" * https://eips.ethereum.org/EIPS/eip-165[EIP].\",\n                \" *\",\n                \" * Implementers can declare support of contract interfaces, which can then be\",\n                \" * queried by others ({ERC165Checker}).\",\n                \" *\",\n                \" * For an implementation, see {ERC165}.\",\n                \" */\",\n                \"interface IERC165 {\",\n                \"    /**\",\n                \"     * @dev Returns true if this contract implements the interface defined by\",\n                \"     * `interfaceId`. See the corresponding\",\n                \"     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\",\n                \"     * to learn more about how these ids are created.\",\n                \"     *\",\n                \"     * This function call must use less than 30 000 gas.\",\n                \"     */\",\n                \"    function supportsInterface(bytes4 interfaceId) external view returns (bool);\",\n                \"}\",\n                \"// File: @airswap/tokens/contracts/interfaces/IERC1155.sol\",\n                \"/**\",\n                \" *\",\n                \" * Copied from OpenZeppelin ERC1155 feature branch from (20642cca30fa18fb167df6db1889b558742d189a)\",\n                \" * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/feature-erc1155/contracts/token/ERC1155/ERC1155.sol\",\n                \" */\",\n                \"/**\",\n                \"    @title ERC-1155 Multi Token Standard basic interface\",\n                \"    @dev See https://eips.ethereum.org/EIPS/eip-1155\",\n                \" */\",\n                \"contract IERC1155 is IERC165 {\",\n                \"    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\",\n                \"    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\",\n                \"    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\",\n                \"    event URI(string value, uint256 indexed id);\",\n                \"    function balanceOf(address account, uint256 id) public view returns (uint256);\",\n                \"    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) public view returns (uint256[] memory);\",\n                \"    function setApprovalForAll(address operator, bool approved) external;\",\n                \"    function isApprovedForAll(address account, address operator) external view returns (bool);\",\n                \"    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\",\n                \"    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\",\n                \"}\",\n                \"// File: @airswap/transfers/contracts/handlers/ERC1155TransferHandler.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"contract ERC1155TransferHandler is ITransferHandler {\",\n                \" /**\",\n                \"  * @notice Function to wrap safeTransferFrom for ERC1155\",\n                \"  * @param from address Wallet address to transfer from\",\n                \"  * @param to address Wallet address to transfer to\",\n                \"  * @param amount uint256 Amount for ERC-1155\",\n                \"  * @param id uint256 token ID for ERC-1155\",\n                \"  * @param token address Contract address of token\",\n                \"  * @return bool on success of the token transfer\",\n                \"  */\",\n                \"  function transferTokens(\",\n                \"    address from,\",\n                \"    address to,\",\n                \"    uint256 amount,\",\n                \"    uint256 id,\",\n                \"    address token\",\n                \"  ) external returns (bool) {\",\n                \"    IERC1155(token).safeTransferFrom(\",\n                \"      from,\",\n                \"      to,\",\n                \"      id,\",\n                \"      amount,\",\n                \"      \\\"\\\" // bytes are empty\",\n                \"    );\",\n                \"    return true;\",\n                \"  }\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/utils/Address.sol\",\n                \"/**\",\n                \" * @dev Collection of functions related to the address type\",\n                \" */\",\n                \"library Address {\",\n                \"    /**\",\n                \"     * @dev Returns true if `account` is a contract.\",\n                \"     *\",\n                \"     * This test is non-exhaustive, and there may be false-negatives: during the\",\n                \"     * execution of a contract's constructor, its address will be reported as\",\n                \"     * not containing a contract.\",\n                \"     *\",\n                \"     * IMPORTANT: It is unsafe to assume that an address for which this\",\n                \"     * function returns false is an externally-owned account (EOA) and not a\",\n                \"     * contract.\",\n                \"     */\",\n                \"    function isContract(address account) internal view returns (bool) {\",\n                \"        // This method relies in extcodesize, which returns 0 for contracts in\",\n                \"        // construction, since the code is only stored at the end of the\",\n                \"        // constructor execution.\",\n                \"        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\",\n                \"        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\",\n                \"        // for accounts without code, i.e. `keccak256('')`\",\n                \"        bytes32 codehash;\",\n                \"        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\",\n                \"        // solhint-disable-next-line no-inline-assembly\",\n                \"        assembly { codehash := extcodehash(account) }\",\n                \"        return (codehash != 0x0 && codehash != accountHash);\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Converts an `address` into `address payable`. Note that this is\",\n                \"     * simply a type cast: the actual underlying value is not changed.\",\n                \"     *\",\n                \"     * _Available since v2.4.0._\",\n                \"     */\",\n                \"    function toPayable(address account) internal pure returns (address payable) {\",\n                \"        return address(uint160(account));\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\",\n                \"     * `recipient`, forwarding all available gas and reverting on errors.\",\n                \"     *\",\n                \"     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\",\n                \"     * of certain opcodes, possibly making contracts go over the 2300 gas limit\",\n                \"     * imposed by `transfer`, making them unable to receive funds via\",\n                \"     * `transfer`. {sendValue} removes this limitation.\",\n                \"     *\",\n                \"     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\",\n                \"     *\",\n                \"     * IMPORTANT: because control is transferred to `recipient`, care must be\",\n                \"     * taken to not create reentrancy vulnerabilities. Consider using\",\n                \"     * {ReentrancyGuard} or the\",\n                \"     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\",\n                \"     *\",\n                \"     * _Available since v2.4.0._\",\n                \"     */\",\n                \"    function sendValue(address payable recipient, uint256 amount) internal {\",\n                \"        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\",\n                \"        // solhint-disable-next-line avoid-call-value\",\n                \"        (bool success, ) = recipient.call.value(amount)(\\\"\\\");\",\n                \"        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\",\n                \"    }\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol\",\n                \"/**\",\n                \" * @title SafeERC20\",\n                \" * @dev Wrappers around ERC20 operations that throw on failure (when the token\",\n                \" * contract returns false). Tokens that return no value (and instead revert or\",\n                \" * throw on failure) are also supported, non-reverting calls are assumed to be\",\n                \" * successful.\",\n                \" * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\",\n                \" * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\n                \" */\",\n                \"library SafeERC20 {\",\n                \"    using SafeMath for uint256;\",\n                \"    using Address for address;\",\n                \"    function safeTransfer(IERC20 token, address to, uint256 value) internal {\",\n                \"        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\",\n                \"    }\",\n                \"    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\",\n                \"        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\",\n                \"    }\",\n                \"    function safeApprove(IERC20 token, address spender, uint256 value) internal {\",\n                \"        // safeApprove should only be called when setting an initial allowance,\",\n                \"        // or when resetting it to zero. To increase and decrease it, use\",\n                \"        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\",\n                \"        // solhint-disable-next-line max-line-length\",\n                \"        require((value == 0) || (token.allowance(address(this), spender) == 0),\",\n                \"            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\",\n                \"        );\",\n                \"        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\",\n                \"    }\",\n                \"    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\",\n                \"        uint256 newAllowance = token.allowance(address(this), spender).add(value);\",\n                \"        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\",\n                \"    }\",\n                \"    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\",\n                \"        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\",\n                \"        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\",\n                \"    }\",\n                \"    /**\",\n                \"     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\",\n                \"     * on the return value: the return value is optional (but if data is returned, it must not be false).\",\n                \"     * @param token The token targeted by the call.\",\n                \"     * @param data The call data (encoded using abi.encode or one of its variants).\",\n                \"     */\",\n                \"    function callOptionalReturn(IERC20 token, bytes memory data) private {\",\n                \"        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\",\n                \"        // we're implementing it ourselves.\",\n                \"        // A Solidity high level call has three parts:\",\n                \"        //  1. The target address is checked to verify it contains contract code\",\n                \"        //  2. The call itself is made, and success asserted\",\n                \"        //  3. The return value is decoded, which in turn checks the size of the returned data.\",\n                \"        // solhint-disable-next-line max-line-length\",\n                \"        require(address(token).isContract(), \\\"SafeERC20: call to non-contract\\\");\",\n                \"        // solhint-disable-next-line avoid-low-level-calls\",\n                \"        (bool success, bytes memory returndata) = address(token).call(data);\",\n                \"        require(success, \\\"SafeERC20: low-level call failed\\\");\",\n                \"        if (returndata.length > 0) { // Return data is optional\",\n                \"            // solhint-disable-next-line max-line-length\",\n                \"            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\",\n                \"        }\",\n                \"    }\",\n                \"}\",\n                \"// File: @airswap/transfers/contracts/handlers/ERC20TransferHandler.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"contract ERC20TransferHandler is ITransferHandler {\",\n                \"  using SafeERC20 for IERC20;\",\n                \" /**\",\n                \"  * @notice Function to wrap safeTransferFrom for ERC20\",\n                \"  * @param from address Wallet address to transfer from\",\n                \"  * @param to address Wallet address to transfer to\",\n                \"  * @param amount uint256 Amount for ERC-20\",\n                \"  * @param id uint256 ID, must be 0 for this contract\",\n                \"  * @param token address Contract address of token\",\n                \"  * @return bool on success of the token transfer\",\n                \"  */\",\n                \"  function transferTokens(\",\n                \"    address from,\",\n                \"    address to,\",\n                \"    uint256 amount,\",\n                \"    uint256 id,\",\n                \"    address token\",\n                \"  ) external returns (bool) {\",\n                \"    require(id == 0, \\\"ID_INVALID\\\");\",\n                \"    IERC20(token).safeTransferFrom(from, to, amount);\",\n                \"    return true;\",\n                \"  }\",\n                \"}\",\n                \"// File: openzeppelin-solidity/contracts/token/ERC721/IERC721.sol\",\n                \"/**\",\n                \" * @dev Required interface of an ERC721 compliant contract.\",\n                \" */\",\n                \"contract IERC721 is IERC165 {\",\n                \"    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\",\n                \"    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\",\n                \"    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\",\n                \"    /**\",\n                \"     * @dev Returns the number of NFTs in `owner`'s account.\",\n                \"     */\",\n                \"    function balanceOf(address owner) public view returns (uint256 balance);\",\n                \"    /**\",\n                \"     * @dev Returns the owner of the NFT specified by `tokenId`.\",\n                \"     */\",\n                \"    function ownerOf(uint256 tokenId) public view returns (address owner);\",\n                \"    /**\",\n                \"     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\",\n                \"     * another (`to`).\",\n                \"     *\",\n                \"     *\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - `from`, `to` cannot be zero.\",\n                \"     * - `tokenId` must be owned by `from`.\",\n                \"     * - If the caller is not `from`, it must be have been allowed to move this\",\n                \"     * NFT by either {approve} or {setApprovalForAll}.\",\n                \"     */\",\n                \"    function safeTransferFrom(address from, address to, uint256 tokenId) public;\",\n                \"    /**\",\n                \"     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\",\n                \"     * another (`to`).\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     * - If the caller is not `from`, it must be approved to move this NFT by\",\n                \"     * either {approve} or {setApprovalForAll}.\",\n                \"     */\",\n                \"    function transferFrom(address from, address to, uint256 tokenId) public;\",\n                \"    function approve(address to, uint256 tokenId) public;\",\n                \"    function getApproved(uint256 tokenId) public view returns (address operator);\",\n                \"    function setApprovalForAll(address operator, bool _approved) public;\",\n                \"    function isApprovedForAll(address owner, address operator) public view returns (bool);\",\n                \"    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public;\",\n                \"}\",\n                \"// File: @airswap/transfers/contracts/handlers/ERC721TransferHandler.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"contract ERC721TransferHandler is ITransferHandler {\",\n                \" /**\",\n                \"  * @notice Function to wrap safeTransferFrom for ERC721\",\n                \"  * @param from address Wallet address to transfer from\",\n                \"  * @param to address Wallet address to transfer to\",\n                \"  * @param amount uint256, must be 0 for this contract\",\n                \"  * @param id uint256 ID for ERC721\",\n                \"  * @param token address Contract address of token\",\n                \"  * @return bool on success of the token transfer\",\n                \"  */\",\n                \"  function transferTokens(\",\n                \"    address from,\",\n                \"    address to,\",\n                \"    uint256 amount,\",\n                \"    uint256 id,\",\n                \"    address token)\",\n                \"  external returns (bool) {\",\n                \"    require(amount == 0, \\\"AMOUNT_INVALID\\\");\",\n                \"    IERC721(token).safeTransferFrom(from, to, id);\",\n                \"    return true;\",\n                \"  }\",\n                \"}\",\n                \"// File: @airswap/transfers/contracts/interfaces/IKittyCoreTokenTransfer.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"/**\",\n                \" * @title IKittyCoreTokenTransfer\",\n                \" * @dev transferFrom function from KittyCore\",\n                \" */\",\n                \"contract IKittyCoreTokenTransfer {\",\n                \"  function transferFrom(address from, address to, uint256 tokenId) external;\",\n                \"}\",\n                \"// File: @airswap/transfers/contracts/handlers/KittyCoreTransferHandler.sol\",\n                \"/*\",\n                \"  Copyright 2020 Swap Holdings Ltd.\",\n                \"  Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\",\n                \"  you may not use this file except in compliance with the License.\",\n                \"  You may obtain a copy of the License at\",\n                \"    http://www.apache.org/licenses/LICENSE-2.0\",\n                \"  Unless required by applicable law or agreed to in writing, software\",\n                \"  distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\",\n                \"  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\",\n                \"  See the License for the specific language governing permissions and\",\n                \"  limitations under the License.\",\n                \"*/\",\n                \"contract KittyCoreTransferHandler is ITransferHandler {\",\n                \" /**\",\n                \"  * @notice Function to wrap transferFrom for CKitty\",\n                \"  * @param from address Wallet address to transfer from\",\n                \"  * @param to address Wallet address to transfer to\",\n                \"  * @param amount uint256, must be 0 for this contract\",\n                \"  * @param id uint256 ID for ERC721\",\n                \"  * @param token address Contract address of token\",\n                \"  * @return bool on success of the token transfer\",\n                \"  */\",\n                \"  function transferTokens(\",\n                \"    address from,\",\n                \"    address to,\",\n                \"    uint256 amount,\",\n                \"    uint256 id,\",\n                \"    address token\",\n                \"  ) external returns (bool) {\",\n                \"    require(amount == 0, \\\"AMOUNT_INVALID\\\");\",\n                \"    IKittyCoreTokenTransfer(token).transferFrom(from, to, id);\",\n                \"    return true;\",\n                \"  }\",\n                \"}\",\n                \"// File: contracts/Imports.sol\",\n                \"//Import all the contracts desired to be deployed\",\n                \"contract Imports {}\",\n                \"\"\n              ]\n            }\n          },\n          \"sourceRangesById\": {\n            \"18\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 24,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 31,\n                \"column\": 2\n              }\n            },\n            \"29\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 32,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 38,\n                \"column\": 2\n              }\n            },\n            \"42\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 39,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 46,\n                \"column\": 2\n              }\n            },\n            \"207\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 22,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 144,\n                \"column\": 0\n              }\n            },\n            \"214\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 159,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 163,\n                \"column\": 2\n              }\n            },\n            \"228\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 164,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 171,\n                \"column\": 3\n              }\n            },\n            \"236\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 172,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 176,\n                \"column\": 3\n              }\n            },\n            \"252\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 177,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 185,\n                \"column\": 3\n              }\n            },\n            \"330\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 158,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 226,\n                \"column\": 0\n              }\n            },\n            \"340\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 241,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 246,\n                \"column\": 3\n              }\n            },\n            \"352\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 247,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 253,\n                \"column\": 3\n              }\n            },\n            \"364\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 254,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 260,\n                \"column\": 3\n              }\n            },\n            \"368\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 261,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 263,\n                \"column\": 3\n              }\n            },\n            \"372\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 264,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 266,\n                \"column\": 3\n              }\n            },\n            \"480\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 240,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 314,\n                \"column\": 0\n              }\n            },\n            \"496\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 331,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 348,\n                \"column\": 0\n              }\n            },\n            \"521\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 360,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 372,\n                \"column\": 0\n              }\n            },\n            \"531\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 385,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 385,\n                \"column\": 87\n              }\n            },\n            \"632\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 383,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 438,\n                \"column\": 0\n              }\n            },\n            \"640\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 457,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 460,\n                \"column\": 3\n              }\n            },\n            \"681\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 456,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 474,\n                \"column\": 0\n              }\n            },\n            \"711\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 489,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 504,\n                \"column\": 3\n              }\n            },\n            \"717\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 505,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 508,\n                \"column\": 3\n              }\n            },\n            \"723\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 509,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 512,\n                \"column\": 3\n              }\n            },\n            \"729\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 513,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 516,\n                \"column\": 3\n              }\n            },\n            \"735\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 517,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 520,\n                \"column\": 3\n              }\n            },\n            \"741\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 521,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 524,\n                \"column\": 3\n              }\n            },\n            \"747\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 525,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 528,\n                \"column\": 3\n              }\n            },\n            \"823\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 488,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 584,\n                \"column\": 0\n              }\n            },\n            \"1008\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 599,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 727,\n                \"column\": 0\n              }\n            },\n            \"1066\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 789,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 789,\n                \"column\": 75\n              }\n            },\n            \"1074\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 794,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 794,\n                \"column\": 81\n              }\n            },\n            \"1075\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 733,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 795,\n                \"column\": 0\n              }\n            },\n            \"1819\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 814,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 1202,\n                \"column\": 0\n              }\n            },\n            \"1831\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1217,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 1223,\n                \"column\": 3\n              }\n            },\n            \"1839\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1216,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 1232,\n                \"column\": 0\n              }\n            },\n            \"1847\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1246,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 1250,\n                \"column\": 0\n              }\n            },\n            \"1943\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1264,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 1316,\n                \"column\": 0\n              }\n            },\n            \"1971\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1353,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 1358,\n                \"column\": 2\n              }\n            },\n            \"1979\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1362,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 1366,\n                \"column\": 3\n              }\n            },\n            \"1983\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1367,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 1369,\n                \"column\": 3\n              }\n            },\n            \"2411\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1339,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 1555,\n                \"column\": 0\n              }\n            },\n            \"3017\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1572,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 1813,\n                \"column\": 0\n              }\n            },\n            \"3712\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 1830,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2144,\n                \"column\": 0\n              }\n            },\n            \"3778\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2155,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 2155,\n                \"column\": 73\n              }\n            },\n            \"3786\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2156,\n                \"column\": 2\n              },\n              \"to\": {\n                \"line\": 2156,\n                \"column\": 79\n              }\n            },\n            \"3787\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2146,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2157,\n                \"column\": 0\n              }\n            },\n            \"4015\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2174,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2288,\n                \"column\": 0\n              }\n            },\n            \"4023\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2299,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2309,\n                \"column\": 0\n              }\n            },\n            \"4037\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2321,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 2321,\n                \"column\": 119\n              }\n            },\n            \"4051\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2322,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 2322,\n                \"column\": 124\n              }\n            },\n            \"4059\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2323,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 2323,\n                \"column\": 90\n              }\n            },\n            \"4065\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2324,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 2324,\n                \"column\": 47\n              }\n            },\n            \"4131\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2320,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2331,\n                \"column\": 0\n              }\n            },\n            \"4163\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2345,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2371,\n                \"column\": 0\n              }\n            },\n            \"4236\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2376,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2434,\n                \"column\": 0\n              }\n            },\n            \"4451\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2445,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2495,\n                \"column\": 0\n              }\n            },\n            \"4491\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2509,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2531,\n                \"column\": 0\n              }\n            },\n            \"4501\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2537,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 2537,\n                \"column\": 85\n              }\n            },\n            \"4509\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2538,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 2538,\n                \"column\": 92\n              }\n            },\n            \"4517\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2539,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 2539,\n                \"column\": 88\n              }\n            },\n            \"4591\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2536,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2575,\n                \"column\": 0\n              }\n            },\n            \"4628\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2589,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2610,\n                \"column\": 0\n              }\n            },\n            \"4638\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2628,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2630,\n                \"column\": 0\n              }\n            },\n            \"4675\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2644,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2665,\n                \"column\": 0\n              }\n            },\n            \"4676\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 2668,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 2668,\n                \"column\": 18\n              }\n            }\n          }\n        }\n      }\n    },\n    \"desc\": \"Airswap tx\"\n  },\n  {\n    \"tx\": {\n      \"kind\": \"function\",\n      \"class\": {\n        \"typeClass\": \"contract\",\n        \"kind\": \"native\",\n        \"id\": \"shimmedcompilationNumber(0):1272\",\n        \"typeName\": \"Moloch\",\n        \"contractKind\": \"contract\",\n        \"payable\": false\n      },\n      \"abi\": {\n        \"inputs\": [\n          {\n            \"name\": \"sharesToBurn\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"name\": \"ragequit\",\n        \"outputs\": [],\n        \"stateMutability\": \"nonpayable\",\n        \"type\": \"function\"\n      },\n      \"arguments\": [\n        {\n          \"name\": \"sharesToBurn\",\n          \"value\": {\n            \"type\": {\n              \"typeClass\": \"uint\",\n              \"bits\": 256,\n              \"typeHint\": \"uint256\"\n            },\n            \"kind\": \"value\",\n            \"value\": {\n              \"asString\": \"34\",\n              \"rawAsString\": \"34\"\n            }\n          }\n        }\n      ],\n      \"selector\": \"0x8436593f\",\n      \"decodingMode\": \"full\"\n    },\n    \"definitions\": {\n      \"compilationsById\": {\n        \"shimmedcompilationNumber(0)\": {\n          \"sourcesById\": {\n            \"0\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"/**\",\n                \" *Submitted for verification at Etherscan.io on 20XX-XX-XX\",\n                \"*/\",\n                \"\",\n                \"pragma solidity ^0.5.3;\\r\",\n                \"\\r\",\n                \"contract Moloch {\\r\",\n                \"    using SafeMath for uint256;\\r\",\n                \"\\r\",\n                \"    /***************\\r\",\n                \"    GLOBAL CONSTANTS\\r\",\n                \"    ***************/\\r\",\n                \"    uint256 public periodDuration; // default = 17280 = 4.8 hours in seconds (5 periods per day)\\r\",\n                \"    uint256 public votingPeriodLength; // default = 35 periods (7 days)\\r\",\n                \"    uint256 public gracePeriodLength; // default = 35 periods (7 days)\\r\",\n                \"    uint256 public abortWindow; // default = 5 periods (1 day)\\r\",\n                \"    uint256 public proposalDeposit; // default = 10 ETH (~$1,000 worth of ETH at contract deployment)\\r\",\n                \"    uint256 public dilutionBound; // default = 3 - maximum multiplier a YES voter will be obligated to pay in case of mass ragequit\\r\",\n                \"    uint256 public processingReward; // default = 0.1 - amount of ETH to give to whoever processes a proposal\\r\",\n                \"    uint256 public summoningTime; // needed to determine the current period\\r\",\n                \"\\r\",\n                \"    IERC20 public approvedToken; // approved token contract reference; default = wETH\\r\",\n                \"    GuildBank public guildBank; // guild bank contract reference\\r\",\n                \"\\r\",\n                \"    // HARD-CODED LIMITS\\r\",\n                \"    // These numbers are quite arbitrary; they are small enough to avoid overflows when doing calculations\\r\",\n                \"    // with periods or shares, yet big enough to not limit reasonable use cases.\\r\",\n                \"    uint256 constant MAX_VOTING_PERIOD_LENGTH = 10**18; // maximum length of voting period\\r\",\n                \"    uint256 constant MAX_GRACE_PERIOD_LENGTH = 10**18; // maximum length of grace period\\r\",\n                \"    uint256 constant MAX_DILUTION_BOUND = 10**18; // maximum dilution bound\\r\",\n                \"    uint256 constant MAX_NUMBER_OF_SHARES = 10**18; // maximum number of shares that can be minted\\r\",\n                \"\\r\",\n                \"    /***************\\r\",\n                \"    EVENTS\\r\",\n                \"    ***************/\\r\",\n                \"    event SubmitProposal(uint256 proposalIndex, address indexed delegateKey, address indexed memberAddress, address indexed applicant, uint256 tokenTribute, uint256 sharesRequested);\\r\",\n                \"    event SubmitVote(uint256 indexed proposalIndex, address indexed delegateKey, address indexed memberAddress, uint8 uintVote);\\r\",\n                \"    event ProcessProposal(uint256 indexed proposalIndex, address indexed applicant, address indexed memberAddress, uint256 tokenTribute, uint256 sharesRequested, bool didPass);\\r\",\n                \"    event Ragequit(address indexed memberAddress, uint256 sharesToBurn);\\r\",\n                \"    event Abort(uint256 indexed proposalIndex, address applicantAddress);\\r\",\n                \"    event UpdateDelegateKey(address indexed memberAddress, address newDelegateKey);\\r\",\n                \"    event SummonComplete(address indexed summoner, uint256 shares);\\r\",\n                \"\\r\",\n                \"    /******************\\r\",\n                \"    INTERNAL ACCOUNTING\\r\",\n                \"    ******************/\\r\",\n                \"    uint256 public totalShares = 0; // total shares across all members\\r\",\n                \"    uint256 public totalSharesRequested = 0; // total shares that have been requested in unprocessed proposals\\r\",\n                \"\\r\",\n                \"    enum Vote {\\r\",\n                \"        Null, // default value, counted as abstention\\r\",\n                \"        Yes,\\r\",\n                \"        No\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    struct Member {\\r\",\n                \"        address delegateKey; // the key responsible for submitting proposals and voting - defaults to member address unless updated\\r\",\n                \"        uint256 shares; // the # of shares assigned to this member\\r\",\n                \"        bool exists; // always true once a member has been created\\r\",\n                \"        uint256 highestIndexYesVote; // highest proposal index # on which the member voted YES\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    struct Proposal {\\r\",\n                \"        address proposer; // the member who submitted the proposal\\r\",\n                \"        address applicant; // the applicant who wishes to become a member - this key will be used for withdrawals\\r\",\n                \"        uint256 sharesRequested; // the # of shares the applicant is requesting\\r\",\n                \"        uint256 startingPeriod; // the period in which voting can start for this proposal\\r\",\n                \"        uint256 yesVotes; // the total number of YES votes for this proposal\\r\",\n                \"        uint256 noVotes; // the total number of NO votes for this proposal\\r\",\n                \"        bool processed; // true only if the proposal has been processed\\r\",\n                \"        bool didPass; // true only if the proposal passed\\r\",\n                \"        bool aborted; // true only if applicant calls \\\"abort\\\" fn before end of voting period\\r\",\n                \"        uint256 tokenTribute; // amount of tokens offered as tribute\\r\",\n                \"        string details; // proposal details - could be IPFS hash, plaintext, or JSON\\r\",\n                \"        uint256 maxTotalSharesAtYesVote; // the maximum # of total shares encountered at a yes vote on this proposal\\r\",\n                \"        mapping (address => Vote) votesByMember; // the votes on this proposal by each member\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    mapping (address => Member) public members;\\r\",\n                \"    mapping (address => address) public memberAddressByDelegateKey;\\r\",\n                \"    Proposal[] public proposalQueue;\\r\",\n                \"\\r\",\n                \"    /********\\r\",\n                \"    MODIFIERS\\r\",\n                \"    ********/\\r\",\n                \"    modifier onlyMember {\\r\",\n                \"        require(members[msg.sender].shares > 0, \\\"Moloch::onlyMember - not a member\\\");\\r\",\n                \"        _;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    modifier onlyDelegate {\\r\",\n                \"        require(members[memberAddressByDelegateKey[msg.sender]].shares > 0, \\\"Moloch::onlyDelegate - not a delegate\\\");\\r\",\n                \"        _;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /********\\r\",\n                \"    FUNCTIONS\\r\",\n                \"    ********/\\r\",\n                \"    constructor(\\r\",\n                \"        address summoner,\\r\",\n                \"        address _approvedToken,\\r\",\n                \"        uint256 _periodDuration,\\r\",\n                \"        uint256 _votingPeriodLength,\\r\",\n                \"        uint256 _gracePeriodLength,\\r\",\n                \"        uint256 _abortWindow,\\r\",\n                \"        uint256 _proposalDeposit,\\r\",\n                \"        uint256 _dilutionBound,\\r\",\n                \"        uint256 _processingReward\\r\",\n                \"    ) public {\\r\",\n                \"        require(summoner != address(0), \\\"Moloch::constructor - summoner cannot be 0\\\");\\r\",\n                \"        require(_approvedToken != address(0), \\\"Moloch::constructor - _approvedToken cannot be 0\\\");\\r\",\n                \"        require(_periodDuration > 0, \\\"Moloch::constructor - _periodDuration cannot be 0\\\");\\r\",\n                \"        require(_votingPeriodLength > 0, \\\"Moloch::constructor - _votingPeriodLength cannot be 0\\\");\\r\",\n                \"        require(_votingPeriodLength <= MAX_VOTING_PERIOD_LENGTH, \\\"Moloch::constructor - _votingPeriodLength exceeds limit\\\");\\r\",\n                \"        require(_gracePeriodLength <= MAX_GRACE_PERIOD_LENGTH, \\\"Moloch::constructor - _gracePeriodLength exceeds limit\\\");\\r\",\n                \"        require(_abortWindow > 0, \\\"Moloch::constructor - _abortWindow cannot be 0\\\");\\r\",\n                \"        require(_abortWindow <= _votingPeriodLength, \\\"Moloch::constructor - _abortWindow must be smaller than or equal to _votingPeriodLength\\\");\\r\",\n                \"        require(_dilutionBound > 0, \\\"Moloch::constructor - _dilutionBound cannot be 0\\\");\\r\",\n                \"        require(_dilutionBound <= MAX_DILUTION_BOUND, \\\"Moloch::constructor - _dilutionBound exceeds limit\\\");\\r\",\n                \"        require(_proposalDeposit >= _processingReward, \\\"Moloch::constructor - _proposalDeposit cannot be smaller than _processingReward\\\");\\r\",\n                \"\\r\",\n                \"        approvedToken = IERC20(_approvedToken);\\r\",\n                \"\\r\",\n                \"        guildBank = new GuildBank(_approvedToken);\\r\",\n                \"\\r\",\n                \"        periodDuration = _periodDuration;\\r\",\n                \"        votingPeriodLength = _votingPeriodLength;\\r\",\n                \"        gracePeriodLength = _gracePeriodLength;\\r\",\n                \"        abortWindow = _abortWindow;\\r\",\n                \"        proposalDeposit = _proposalDeposit;\\r\",\n                \"        dilutionBound = _dilutionBound;\\r\",\n                \"        processingReward = _processingReward;\\r\",\n                \"\\r\",\n                \"        summoningTime = now;\\r\",\n                \"\\r\",\n                \"        members[summoner] = Member(summoner, 1, true, 0);\\r\",\n                \"        memberAddressByDelegateKey[summoner] = summoner;\\r\",\n                \"        totalShares = 1;\\r\",\n                \"\\r\",\n                \"        emit SummonComplete(summoner, 1);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /*****************\\r\",\n                \"    PROPOSAL FUNCTIONS\\r\",\n                \"    *****************/\\r\",\n                \"\\r\",\n                \"    function submitProposal(\\r\",\n                \"        address applicant,\\r\",\n                \"        uint256 tokenTribute,\\r\",\n                \"        uint256 sharesRequested,\\r\",\n                \"        string memory details\\r\",\n                \"    )\\r\",\n                \"        public\\r\",\n                \"        onlyDelegate\\r\",\n                \"    {\\r\",\n                \"        require(applicant != address(0), \\\"Moloch::submitProposal - applicant cannot be 0\\\");\\r\",\n                \"\\r\",\n                \"        // Make sure we won't run into overflows when doing calculations with shares.\\r\",\n                \"        // Note that totalShares + totalSharesRequested + sharesRequested is an upper bound\\r\",\n                \"        // on the number of shares that can exist until this proposal has been processed.\\r\",\n                \"        require(totalShares.add(totalSharesRequested).add(sharesRequested) <= MAX_NUMBER_OF_SHARES, \\\"Moloch::submitProposal - too many shares requested\\\");\\r\",\n                \"\\r\",\n                \"        totalSharesRequested = totalSharesRequested.add(sharesRequested);\\r\",\n                \"\\r\",\n                \"        address memberAddress = memberAddressByDelegateKey[msg.sender];\\r\",\n                \"\\r\",\n                \"        // collect proposal deposit from proposer and store it in the Moloch until the proposal is processed\\r\",\n                \"        require(approvedToken.transferFrom(msg.sender, address(this), proposalDeposit), \\\"Moloch::submitProposal - proposal deposit token transfer failed\\\");\\r\",\n                \"\\r\",\n                \"        // collect tribute from applicant and store it in the Moloch until the proposal is processed\\r\",\n                \"        require(approvedToken.transferFrom(applicant, address(this), tokenTribute), \\\"Moloch::submitProposal - tribute token transfer failed\\\");\\r\",\n                \"\\r\",\n                \"        // compute startingPeriod for proposal\\r\",\n                \"        uint256 startingPeriod = max(\\r\",\n                \"            getCurrentPeriod(),\\r\",\n                \"            proposalQueue.length == 0 ? 0 : proposalQueue[proposalQueue.length.sub(1)].startingPeriod\\r\",\n                \"        ).add(1);\\r\",\n                \"\\r\",\n                \"        // create proposal ...\\r\",\n                \"        Proposal memory proposal = Proposal({\\r\",\n                \"            proposer: memberAddress,\\r\",\n                \"            applicant: applicant,\\r\",\n                \"            sharesRequested: sharesRequested,\\r\",\n                \"            startingPeriod: startingPeriod,\\r\",\n                \"            yesVotes: 0,\\r\",\n                \"            noVotes: 0,\\r\",\n                \"            processed: false,\\r\",\n                \"            didPass: false,\\r\",\n                \"            aborted: false,\\r\",\n                \"            tokenTribute: tokenTribute,\\r\",\n                \"            details: details,\\r\",\n                \"            maxTotalSharesAtYesVote: 0\\r\",\n                \"        });\\r\",\n                \"\\r\",\n                \"        // ... and append it to the queue\\r\",\n                \"        proposalQueue.push(proposal);\\r\",\n                \"\\r\",\n                \"        uint256 proposalIndex = proposalQueue.length.sub(1);\\r\",\n                \"        emit SubmitProposal(proposalIndex, msg.sender, memberAddress, applicant, tokenTribute, sharesRequested);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function submitVote(uint256 proposalIndex, uint8 uintVote) public onlyDelegate {\\r\",\n                \"        address memberAddress = memberAddressByDelegateKey[msg.sender];\\r\",\n                \"        Member storage member = members[memberAddress];\\r\",\n                \"\\r\",\n                \"        require(proposalIndex < proposalQueue.length, \\\"Moloch::submitVote - proposal does not exist\\\");\\r\",\n                \"        Proposal storage proposal = proposalQueue[proposalIndex];\\r\",\n                \"\\r\",\n                \"        require(uintVote < 3, \\\"Moloch::submitVote - uintVote must be less than 3\\\");\\r\",\n                \"        Vote vote = Vote(uintVote);\\r\",\n                \"\\r\",\n                \"        require(getCurrentPeriod() >= proposal.startingPeriod, \\\"Moloch::submitVote - voting period has not started\\\");\\r\",\n                \"        require(!hasVotingPeriodExpired(proposal.startingPeriod), \\\"Moloch::submitVote - proposal voting period has expired\\\");\\r\",\n                \"        require(proposal.votesByMember[memberAddress] == Vote.Null, \\\"Moloch::submitVote - member has already voted on this proposal\\\");\\r\",\n                \"        require(vote == Vote.Yes || vote == Vote.No, \\\"Moloch::submitVote - vote must be either Yes or No\\\");\\r\",\n                \"        require(!proposal.aborted, \\\"Moloch::submitVote - proposal has been aborted\\\");\\r\",\n                \"\\r\",\n                \"        // store vote\\r\",\n                \"        proposal.votesByMember[memberAddress] = vote;\\r\",\n                \"\\r\",\n                \"        // count vote\\r\",\n                \"        if (vote == Vote.Yes) {\\r\",\n                \"            proposal.yesVotes = proposal.yesVotes.add(member.shares);\\r\",\n                \"\\r\",\n                \"            // set highest index (latest) yes vote - must be processed for member to ragequit\\r\",\n                \"            if (proposalIndex > member.highestIndexYesVote) {\\r\",\n                \"                member.highestIndexYesVote = proposalIndex;\\r\",\n                \"            }\\r\",\n                \"\\r\",\n                \"            // set maximum of total shares encountered at a yes vote - used to bound dilution for yes voters\\r\",\n                \"            if (totalShares > proposal.maxTotalSharesAtYesVote) {\\r\",\n                \"                proposal.maxTotalSharesAtYesVote = totalShares;\\r\",\n                \"            }\\r\",\n                \"\\r\",\n                \"        } else if (vote == Vote.No) {\\r\",\n                \"            proposal.noVotes = proposal.noVotes.add(member.shares);\\r\",\n                \"        }\\r\",\n                \"\\r\",\n                \"        emit SubmitVote(proposalIndex, msg.sender, memberAddress, uintVote);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function processProposal(uint256 proposalIndex) public {\\r\",\n                \"        require(proposalIndex < proposalQueue.length, \\\"Moloch::processProposal - proposal does not exist\\\");\\r\",\n                \"        Proposal storage proposal = proposalQueue[proposalIndex];\\r\",\n                \"\\r\",\n                \"        require(getCurrentPeriod() >= proposal.startingPeriod.add(votingPeriodLength).add(gracePeriodLength), \\\"Moloch::processProposal - proposal is not ready to be processed\\\");\\r\",\n                \"        require(proposal.processed == false, \\\"Moloch::processProposal - proposal has already been processed\\\");\\r\",\n                \"        require(proposalIndex == 0 || proposalQueue[proposalIndex.sub(1)].processed, \\\"Moloch::processProposal - previous proposal must be processed\\\");\\r\",\n                \"\\r\",\n                \"        proposal.processed = true;\\r\",\n                \"        totalSharesRequested = totalSharesRequested.sub(proposal.sharesRequested);\\r\",\n                \"\\r\",\n                \"        bool didPass = proposal.yesVotes > proposal.noVotes;\\r\",\n                \"\\r\",\n                \"        // Make the proposal fail if the dilutionBound is exceeded\\r\",\n                \"        if (totalShares.mul(dilutionBound) < proposal.maxTotalSharesAtYesVote) {\\r\",\n                \"            didPass = false;\\r\",\n                \"        }\\r\",\n                \"\\r\",\n                \"        // PROPOSAL PASSED\\r\",\n                \"        if (didPass && !proposal.aborted) {\\r\",\n                \"\\r\",\n                \"            proposal.didPass = true;\\r\",\n                \"\\r\",\n                \"            // if the applicant is already a member, add to their existing shares\\r\",\n                \"            if (members[proposal.applicant].exists) {\\r\",\n                \"                members[proposal.applicant].shares = members[proposal.applicant].shares.add(proposal.sharesRequested);\\r\",\n                \"\\r\",\n                \"            // the applicant is a new member, create a new record for them\\r\",\n                \"            } else {\\r\",\n                \"                // if the applicant address is already taken by a member's delegateKey, reset it to their member address\\r\",\n                \"                if (members[memberAddressByDelegateKey[proposal.applicant]].exists) {\\r\",\n                \"                    address memberToOverride = memberAddressByDelegateKey[proposal.applicant];\\r\",\n                \"                    memberAddressByDelegateKey[memberToOverride] = memberToOverride;\\r\",\n                \"                    members[memberToOverride].delegateKey = memberToOverride;\\r\",\n                \"                }\\r\",\n                \"\\r\",\n                \"                // use applicant address as delegateKey by default\\r\",\n                \"                members[proposal.applicant] = Member(proposal.applicant, proposal.sharesRequested, true, 0);\\r\",\n                \"                memberAddressByDelegateKey[proposal.applicant] = proposal.applicant;\\r\",\n                \"            }\\r\",\n                \"\\r\",\n                \"            // mint new shares\\r\",\n                \"            totalShares = totalShares.add(proposal.sharesRequested);\\r\",\n                \"\\r\",\n                \"            // transfer tokens to guild bank\\r\",\n                \"            require(\\r\",\n                \"                approvedToken.transfer(address(guildBank), proposal.tokenTribute),\\r\",\n                \"                \\\"Moloch::processProposal - token transfer to guild bank failed\\\"\\r\",\n                \"            );\\r\",\n                \"\\r\",\n                \"        // PROPOSAL FAILED OR ABORTED\\r\",\n                \"        } else {\\r\",\n                \"            // return all tokens to the applicant\\r\",\n                \"            require(\\r\",\n                \"                approvedToken.transfer(proposal.applicant, proposal.tokenTribute),\\r\",\n                \"                \\\"Moloch::processProposal - failing vote token transfer failed\\\"\\r\",\n                \"            );\\r\",\n                \"        }\\r\",\n                \"\\r\",\n                \"        // send msg.sender the processingReward\\r\",\n                \"        require(\\r\",\n                \"            approvedToken.transfer(msg.sender, processingReward),\\r\",\n                \"            \\\"Moloch::processProposal - failed to send processing reward to msg.sender\\\"\\r\",\n                \"        );\\r\",\n                \"\\r\",\n                \"        // return deposit to proposer (subtract processing reward)\\r\",\n                \"        require(\\r\",\n                \"            approvedToken.transfer(proposal.proposer, proposalDeposit.sub(processingReward)),\\r\",\n                \"            \\\"Moloch::processProposal - failed to return proposal deposit to proposer\\\"\\r\",\n                \"        );\\r\",\n                \"\\r\",\n                \"        emit ProcessProposal(\\r\",\n                \"            proposalIndex,\\r\",\n                \"            proposal.applicant,\\r\",\n                \"            proposal.proposer,\\r\",\n                \"            proposal.tokenTribute,\\r\",\n                \"            proposal.sharesRequested,\\r\",\n                \"            didPass\\r\",\n                \"        );\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function ragequit(uint256 sharesToBurn) public onlyMember {\\r\",\n                \"        uint256 initialTotalShares = totalShares;\\r\",\n                \"\\r\",\n                \"        Member storage member = members[msg.sender];\\r\",\n                \"\\r\",\n                \"        require(member.shares >= sharesToBurn, \\\"Moloch::ragequit - insufficient shares\\\");\\r\",\n                \"\\r\",\n                \"        require(canRagequit(member.highestIndexYesVote), \\\"Moloch::ragequit - cant ragequit until highest index proposal member voted YES on is processed\\\");\\r\",\n                \"\\r\",\n                \"        // burn shares\\r\",\n                \"        member.shares = member.shares.sub(sharesToBurn);\\r\",\n                \"        totalShares = totalShares.sub(sharesToBurn);\\r\",\n                \"\\r\",\n                \"        // instruct guildBank to transfer fair share of tokens to the ragequitter\\r\",\n                \"        require(\\r\",\n                \"            guildBank.withdraw(msg.sender, sharesToBurn, initialTotalShares),\\r\",\n                \"            \\\"Moloch::ragequit - withdrawal of tokens from guildBank failed\\\"\\r\",\n                \"        );\\r\",\n                \"\\r\",\n                \"        emit Ragequit(msg.sender, sharesToBurn);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function abort(uint256 proposalIndex) public {\\r\",\n                \"        require(proposalIndex < proposalQueue.length, \\\"Moloch::abort - proposal does not exist\\\");\\r\",\n                \"        Proposal storage proposal = proposalQueue[proposalIndex];\\r\",\n                \"\\r\",\n                \"        require(msg.sender == proposal.applicant, \\\"Moloch::abort - msg.sender must be applicant\\\");\\r\",\n                \"        require(getCurrentPeriod() < proposal.startingPeriod.add(abortWindow), \\\"Moloch::abort - abort window must not have passed\\\");\\r\",\n                \"        require(!proposal.aborted, \\\"Moloch::abort - proposal must not have already been aborted\\\");\\r\",\n                \"\\r\",\n                \"        uint256 tokensToAbort = proposal.tokenTribute;\\r\",\n                \"        proposal.tokenTribute = 0;\\r\",\n                \"        proposal.aborted = true;\\r\",\n                \"\\r\",\n                \"        // return all tokens to the applicant\\r\",\n                \"        require(\\r\",\n                \"            approvedToken.transfer(proposal.applicant, tokensToAbort),\\r\",\n                \"            \\\"Moloch::processProposal - failed to return tribute to applicant\\\"\\r\",\n                \"        );\\r\",\n                \"\\r\",\n                \"        emit Abort(proposalIndex, msg.sender);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function updateDelegateKey(address newDelegateKey) public onlyMember {\\r\",\n                \"        require(newDelegateKey != address(0), \\\"Moloch::updateDelegateKey - newDelegateKey cannot be 0\\\");\\r\",\n                \"\\r\",\n                \"        // skip checks if member is setting the delegate key to their member address\\r\",\n                \"        if (newDelegateKey != msg.sender) {\\r\",\n                \"            require(!members[newDelegateKey].exists, \\\"Moloch::updateDelegateKey - cant overwrite existing members\\\");\\r\",\n                \"            require(!members[memberAddressByDelegateKey[newDelegateKey]].exists, \\\"Moloch::updateDelegateKey - cant overwrite existing delegate keys\\\");\\r\",\n                \"        }\\r\",\n                \"\\r\",\n                \"        Member storage member = members[msg.sender];\\r\",\n                \"        memberAddressByDelegateKey[member.delegateKey] = address(0);\\r\",\n                \"        memberAddressByDelegateKey[newDelegateKey] = msg.sender;\\r\",\n                \"        member.delegateKey = newDelegateKey;\\r\",\n                \"\\r\",\n                \"        emit UpdateDelegateKey(msg.sender, newDelegateKey);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /***************\\r\",\n                \"    GETTER FUNCTIONS\\r\",\n                \"    ***************/\\r\",\n                \"\\r\",\n                \"    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\r\",\n                \"        return x >= y ? x : y;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function getCurrentPeriod() public view returns (uint256) {\\r\",\n                \"        return now.sub(summoningTime).div(periodDuration);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function getProposalQueueLength() public view returns (uint256) {\\r\",\n                \"        return proposalQueue.length;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    // can only ragequit if the latest proposal you voted YES on has been processed\\r\",\n                \"    function canRagequit(uint256 highestIndexYesVote) public view returns (bool) {\\r\",\n                \"        require(highestIndexYesVote < proposalQueue.length, \\\"Moloch::canRagequit - proposal does not exist\\\");\\r\",\n                \"        return proposalQueue[highestIndexYesVote].processed;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function hasVotingPeriodExpired(uint256 startingPeriod) public view returns (bool) {\\r\",\n                \"        return getCurrentPeriod() >= startingPeriod.add(votingPeriodLength);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function getMemberProposalVote(address memberAddress, uint256 proposalIndex) public view returns (Vote) {\\r\",\n                \"        require(members[memberAddress].exists, \\\"Moloch::getMemberProposalVote - member doesn't exist\\\");\\r\",\n                \"        require(proposalIndex < proposalQueue.length, \\\"Moloch::getMemberProposalVote - proposal doesn't exist\\\");\\r\",\n                \"        return proposalQueue[proposalIndex].votesByMember[memberAddress];\\r\",\n                \"    }\\r\",\n                \"}\\r\",\n                \"\\r\",\n                \"interface IERC20 {\\r\",\n                \"    function transfer(address to, uint256 value) external returns (bool);\\r\",\n                \"\\r\",\n                \"    function approve(address spender, uint256 value) external returns (bool);\\r\",\n                \"\\r\",\n                \"    function transferFrom(address from, address to, uint256 value) external returns (bool);\\r\",\n                \"\\r\",\n                \"    function totalSupply() external view returns (uint256);\\r\",\n                \"\\r\",\n                \"    function balanceOf(address who) external view returns (uint256);\\r\",\n                \"\\r\",\n                \"    function allowance(address owner, address spender) external view returns (uint256);\\r\",\n                \"\\r\",\n                \"    event Transfer(address indexed from, address indexed to, uint256 value);\\r\",\n                \"\\r\",\n                \"    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\",\n                \"}\\r\",\n                \"\\r\",\n                \"contract Ownable {\\r\",\n                \"    address private _owner;\\r\",\n                \"\\r\",\n                \"    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\r\",\n                \"     * account.\\r\",\n                \"     */\\r\",\n                \"    constructor () internal {\\r\",\n                \"        _owner = msg.sender;\\r\",\n                \"        emit OwnershipTransferred(address(0), _owner);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @return the address of the owner.\\r\",\n                \"     */\\r\",\n                \"    function owner() public view returns (address) {\\r\",\n                \"        return _owner;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Throws if called by any account other than the owner.\\r\",\n                \"     */\\r\",\n                \"    modifier onlyOwner() {\\r\",\n                \"        require(isOwner());\\r\",\n                \"        _;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @return true if `msg.sender` is the owner of the contract.\\r\",\n                \"     */\\r\",\n                \"    function isOwner() public view returns (bool) {\\r\",\n                \"        return msg.sender == _owner;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Allows the current owner to relinquish control of the contract.\\r\",\n                \"     * @notice Renouncing to ownership will leave the contract without an owner.\\r\",\n                \"     * It will not be possible to call the functions with the `onlyOwner`\\r\",\n                \"     * modifier anymore.\\r\",\n                \"     */\\r\",\n                \"    function renounceOwnership() public onlyOwner {\\r\",\n                \"        emit OwnershipTransferred(_owner, address(0));\\r\",\n                \"        _owner = address(0);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Allows the current owner to transfer control of the contract to a newOwner.\\r\",\n                \"     * @param newOwner The address to transfer ownership to.\\r\",\n                \"     */\\r\",\n                \"    function transferOwnership(address newOwner) public onlyOwner {\\r\",\n                \"        _transferOwnership(newOwner);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Transfers control of the contract to a newOwner.\\r\",\n                \"     * @param newOwner The address to transfer ownership to.\\r\",\n                \"     */\\r\",\n                \"    function _transferOwnership(address newOwner) internal {\\r\",\n                \"        require(newOwner != address(0));\\r\",\n                \"        emit OwnershipTransferred(_owner, newOwner);\\r\",\n                \"        _owner = newOwner;\\r\",\n                \"    }\\r\",\n                \"}\\r\",\n                \"\\r\",\n                \"contract GuildBank is Ownable {\\r\",\n                \"    using SafeMath for uint256;\\r\",\n                \"\\r\",\n                \"    IERC20 public approvedToken; // approved token contract reference\\r\",\n                \"\\r\",\n                \"    event Withdrawal(address indexed receiver, uint256 amount);\\r\",\n                \"\\r\",\n                \"    constructor(address approvedTokenAddress) public {\\r\",\n                \"        approvedToken = IERC20(approvedTokenAddress);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function withdraw(address receiver, uint256 shares, uint256 totalShares) public onlyOwner returns (bool) {\\r\",\n                \"        uint256 amount = approvedToken.balanceOf(address(this)).mul(shares).div(totalShares);\\r\",\n                \"        emit Withdrawal(receiver, amount);\\r\",\n                \"        return approvedToken.transfer(receiver, amount);\\r\",\n                \"    }\\r\",\n                \"}\\r\",\n                \"\\r\",\n                \"library SafeMath {\\r\",\n                \"    /**\\r\",\n                \"     * @dev Multiplies two unsigned integers, reverts on overflow.\\r\",\n                \"     */\\r\",\n                \"    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\",\n                \"        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\",\n                \"        // benefit is lost if 'b' is also tested.\\r\",\n                \"        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\r\",\n                \"        if (a == 0) {\\r\",\n                \"            return 0;\\r\",\n                \"        }\\r\",\n                \"\\r\",\n                \"        uint256 c = a * b;\\r\",\n                \"        require(c / a == b);\\r\",\n                \"\\r\",\n                \"        return c;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\\r\",\n                \"     */\\r\",\n                \"    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\",\n                \"        // Solidity only automatically asserts when dividing by 0\\r\",\n                \"        require(b > 0);\\r\",\n                \"        uint256 c = a / b;\\r\",\n                \"        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\",\n                \"\\r\",\n                \"        return c;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\r\",\n                \"     */\\r\",\n                \"    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\",\n                \"        require(b <= a);\\r\",\n                \"        uint256 c = a - b;\\r\",\n                \"\\r\",\n                \"        return c;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Adds two unsigned integers, reverts on overflow.\\r\",\n                \"     */\\r\",\n                \"    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\",\n                \"        uint256 c = a + b;\\r\",\n                \"        require(c >= a);\\r\",\n                \"\\r\",\n                \"        return c;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    /**\\r\",\n                \"     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\\r\",\n                \"     * reverts when dividing by zero.\\r\",\n                \"     */\\r\",\n                \"    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\",\n                \"        require(b != 0);\\r\",\n                \"        return a % b;\\r\",\n                \"    }\\r\",\n                \"}\"\n              ]\n            }\n          },\n          \"sourceRangesById\": {\n            \"58\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 35,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 35,\n                \"column\": 181\n              }\n            },\n            \"68\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 36,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 36,\n                \"column\": 127\n              }\n            },\n            \"82\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 37,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 37,\n                \"column\": 175\n              }\n            },\n            \"88\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 38,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 38,\n                \"column\": 71\n              }\n            },\n            \"94\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 39,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 39,\n                \"column\": 72\n              }\n            },\n            \"100\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 40,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 40,\n                \"column\": 82\n              }\n            },\n            \"106\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 41,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 41,\n                \"column\": 66\n              }\n            },\n            \"116\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 49,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 53,\n                \"column\": 4\n              }\n            },\n            \"125\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 55,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 60,\n                \"column\": 4\n              }\n            },\n            \"154\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 62,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 76,\n                \"column\": 4\n              }\n            },\n            \"1272\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 6,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 413,\n                \"column\": 0\n              }\n            },\n            \"1330\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 428,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 428,\n                \"column\": 75\n              }\n            },\n            \"1338\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 430,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 430,\n                \"column\": 81\n              }\n            },\n            \"1339\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 415,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 431,\n                \"column\": 0\n              }\n            },\n            \"1347\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 436,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 436,\n                \"column\": 87\n              }\n            },\n            \"1446\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 433,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 497,\n                \"column\": 0\n              }\n            },\n            \"1459\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 504,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 504,\n                \"column\": 62\n              }\n            },\n            \"1512\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 499,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 515,\n                \"column\": 0\n              }\n            },\n            \"1638\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 517,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 575,\n                \"column\": 0\n              }\n            }\n          }\n        }\n      }\n    },\n    \"desc\": \"MolochDao Rage quit\"\n  },\n  {\n    \"tx\": {\n      \"kind\": \"message\",\n      \"class\": {\n        \"typeClass\": \"contract\",\n        \"kind\": \"native\",\n        \"id\": \"shimmedcompilationNumber(0):317\",\n        \"typeName\": \"UpgradableProxy\",\n        \"contractKind\": \"contract\",\n        \"payable\": true\n      },\n      \"abi\": {\n        \"stateMutability\": \"payable\",\n        \"type\": \"fallback\"\n      },\n      \"data\": \"0x4faa8a260000000000000000000000001843b97aa4f16b5ed64069c0c956a455b24faacb\",\n      \"decodingMode\": \"full\"\n    },\n    \"definitions\": {\n      \"compilationsById\": {\n        \"shimmedcompilationNumber(0)\": {\n          \"sourcesById\": {\n            \"0\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"/**\",\n                \" *Submitted for verification at Etherscan.io on 20XX-XX-XX\",\n                \"*/\",\n                \"\",\n                \"// File: contracts/common/Proxy/IERCProxy.sol\\r\",\n                \"\\r\",\n                \"pragma solidity 0.6.6;\\r\",\n                \"\\r\",\n                \"interface IERCProxy {\\r\",\n                \"    function proxyType() external pure returns (uint256 proxyTypeId);\\r\",\n                \"\\r\",\n                \"    function implementation() external view returns (address codeAddr);\\r\",\n                \"}\\r\",\n                \"\\r\",\n                \"// File: contracts/common/Proxy/Proxy.sol\\r\",\n                \"\\r\",\n                \"pragma solidity 0.6.6;\\r\",\n                \"\\r\",\n                \"\\r\",\n                \"abstract contract Proxy is IERCProxy {\\r\",\n                \"    function delegatedFwd(address _dst, bytes memory _calldata) internal {\\r\",\n                \"        // solium-disable-next-line security/no-inline-assembly\\r\",\n                \"        assembly {\\r\",\n                \"            let result := delegatecall(\\r\",\n                \"                sub(gas(), 10000),\\r\",\n                \"                _dst,\\r\",\n                \"                add(_calldata, 0x20),\\r\",\n                \"                mload(_calldata),\\r\",\n                \"                0,\\r\",\n                \"                0\\r\",\n                \"            )\\r\",\n                \"            let size := returndatasize()\\r\",\n                \"\\r\",\n                \"            let ptr := mload(0x40)\\r\",\n                \"            returndatacopy(ptr, 0, size)\\r\",\n                \"\\r\",\n                \"            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\r\",\n                \"            // if the call returned error data, forward it\\r\",\n                \"            switch result\\r\",\n                \"                case 0 {\\r\",\n                \"                    revert(ptr, size)\\r\",\n                \"                }\\r\",\n                \"                default {\\r\",\n                \"                    return(ptr, size)\\r\",\n                \"                }\\r\",\n                \"        }\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function proxyType() external virtual override pure returns (uint256 proxyTypeId) {\\r\",\n                \"        // Upgradeable proxy\\r\",\n                \"        proxyTypeId = 2;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function implementation() external virtual override view returns (address);\\r\",\n                \"}\\r\",\n                \"\\r\",\n                \"// File: contracts/common/Proxy/UpgradableProxy.sol\\r\",\n                \"\\r\",\n                \"pragma solidity 0.6.6;\\r\",\n                \"\\r\",\n                \"\\r\",\n                \"contract UpgradableProxy is Proxy {\\r\",\n                \"    event ProxyUpdated(address indexed _new, address indexed _old);\\r\",\n                \"    event ProxyOwnerUpdate(address _new, address _old);\\r\",\n                \"\\r\",\n                \"    bytes32 constant IMPLEMENTATION_SLOT = keccak256(\\\"matic.network.proxy.implementation\\\");\\r\",\n                \"    bytes32 constant OWNER_SLOT = keccak256(\\\"matic.network.proxy.owner\\\");\\r\",\n                \"\\r\",\n                \"    constructor(address _proxyTo) public {\\r\",\n                \"        setProxyOwner(msg.sender);\\r\",\n                \"        setImplementation(_proxyTo);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    fallback() external payable {\\r\",\n                \"        delegatedFwd(loadImplementation(), msg.data);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    receive() external payable {\\r\",\n                \"        delegatedFwd(loadImplementation(), msg.data);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    modifier onlyProxyOwner() {\\r\",\n                \"        require(loadProxyOwner() == msg.sender, \\\"NOT_OWNER\\\");\\r\",\n                \"        _;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function proxyOwner() external view returns(address) {\\r\",\n                \"        return loadProxyOwner();\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function loadProxyOwner() internal view returns(address) {\\r\",\n                \"        address _owner;\\r\",\n                \"        bytes32 position = OWNER_SLOT;\\r\",\n                \"        assembly {\\r\",\n                \"            _owner := sload(position)\\r\",\n                \"        }\\r\",\n                \"        return _owner;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function implementation() external override view returns (address) {\\r\",\n                \"        return loadImplementation();\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function loadImplementation() internal view returns(address) {\\r\",\n                \"        address _impl;\\r\",\n                \"        bytes32 position = IMPLEMENTATION_SLOT;\\r\",\n                \"        assembly {\\r\",\n                \"            _impl := sload(position)\\r\",\n                \"        }\\r\",\n                \"        return _impl;\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function transferProxyOwnership(address newOwner) public onlyProxyOwner {\\r\",\n                \"        require(newOwner != address(0), \\\"ZERO_ADDRESS\\\");\\r\",\n                \"        emit ProxyOwnerUpdate(newOwner, loadProxyOwner());\\r\",\n                \"        setProxyOwner(newOwner);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function setProxyOwner(address newOwner) private {\\r\",\n                \"        bytes32 position = OWNER_SLOT;\\r\",\n                \"        assembly {\\r\",\n                \"            sstore(position, newOwner)\\r\",\n                \"        }\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function updateImplementation(address _newProxyTo) public onlyProxyOwner {\\r\",\n                \"        require(_newProxyTo != address(0x0), \\\"INVALID_PROXY_ADDRESS\\\");\\r\",\n                \"        require(isContract(_newProxyTo), \\\"DESTINATION_ADDRESS_IS_NOT_A_CONTRACT\\\");\\r\",\n                \"\\r\",\n                \"        emit ProxyUpdated(_newProxyTo, loadImplementation());\\r\",\n                \"        \\r\",\n                \"        setImplementation(_newProxyTo);\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function updateAndCall(address _newProxyTo, bytes memory data) payable public onlyProxyOwner {\\r\",\n                \"        updateImplementation(_newProxyTo);\\r\",\n                \"\\r\",\n                \"        (bool success, bytes memory returnData) = address(this).call{value: msg.value}(data);\\r\",\n                \"        require(success, string(returnData));\\r\",\n                \"    }\\r\",\n                \"\\r\",\n                \"    function setImplementation(address _newProxyTo) private {\\r\",\n                \"        bytes32 position = IMPLEMENTATION_SLOT;\\r\",\n                \"        assembly {\\r\",\n                \"            sstore(position, _newProxyTo)\\r\",\n                \"        }\\r\",\n                \"    }\\r\",\n                \"    \\r\",\n                \"    function isContract(address _target) internal view returns (bool) {\\r\",\n                \"        if (_target == address(0)) {\\r\",\n                \"            return false;\\r\",\n                \"        }\\r\",\n                \"\\r\",\n                \"        uint256 size;\\r\",\n                \"        assembly {\\r\",\n                \"            size := extcodesize(_target)\\r\",\n                \"        }\\r\",\n                \"        return size > 0;\\r\",\n                \"    }\\r\",\n                \"}\\r\",\n                \"\\r\",\n                \"// File: contracts/root/RootChainManager/RootChainManagerProxy.sol\\r\",\n                \"\\r\",\n                \"pragma solidity 0.6.6;\\r\",\n                \"\\r\",\n                \"\\r\",\n                \"contract RootChainManagerProxy is UpgradableProxy {\\r\",\n                \"    constructor(address _proxyTo)\\r\",\n                \"        public\\r\",\n                \"        UpgradableProxy(_proxyTo)\\r\",\n                \"    {}\\r\",\n                \"}\"\n              ]\n            }\n          },\n          \"sourceRangesById\": {\n            \"12\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 8,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 12,\n                \"column\": 0\n              }\n            },\n            \"42\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 19,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 54,\n                \"column\": 0\n              }\n            },\n            \"51\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 62,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 62,\n                \"column\": 66\n              }\n            },\n            \"57\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 63,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 63,\n                \"column\": 54\n              }\n            },\n            \"317\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 61,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 159,\n                \"column\": 0\n              }\n            },\n            \"330\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 166,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 171,\n                \"column\": 0\n              }\n            }\n          }\n        }\n      }\n    },\n    \"desc\": \"Polygon deposit\"\n  },\n  {\n    \"tx\": {\n      \"kind\": \"function\",\n      \"class\": {\n        \"typeClass\": \"contract\",\n        \"kind\": \"native\",\n        \"id\": \"shimmedcompilationNumber(0):1970\",\n        \"typeName\": \"SwapRouter\",\n        \"contractKind\": \"contract\",\n        \"payable\": true\n      },\n      \"abi\": {\n        \"inputs\": [\n          {\n            \"components\": [\n              {\n                \"internalType\": \"address\",\n                \"name\": \"tokenIn\",\n                \"type\": \"address\"\n              },\n              {\n                \"internalType\": \"address\",\n                \"name\": \"tokenOut\",\n                \"type\": \"address\"\n              },\n              {\n                \"internalType\": \"uint24\",\n                \"name\": \"fee\",\n                \"type\": \"uint24\"\n              },\n              {\n                \"internalType\": \"address\",\n                \"name\": \"recipient\",\n                \"type\": \"address\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"deadline\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"amountIn\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint256\",\n                \"name\": \"amountOutMinimum\",\n                \"type\": \"uint256\"\n              },\n              {\n                \"internalType\": \"uint160\",\n                \"name\": \"sqrtPriceLimitX96\",\n                \"type\": \"uint160\"\n              }\n            ],\n            \"internalType\": \"struct ISwapRouter.ExactInputSingleParams\",\n            \"name\": \"params\",\n            \"type\": \"tuple\"\n          }\n        ],\n        \"name\": \"exactInputSingle\",\n        \"outputs\": [\n          {\n            \"internalType\": \"uint256\",\n            \"name\": \"amountOut\",\n            \"type\": \"uint256\"\n          }\n        ],\n        \"stateMutability\": \"payable\",\n        \"type\": \"function\"\n      },\n      \"arguments\": [\n        {\n          \"name\": \"params\",\n          \"value\": {\n            \"type\": {\n              \"typeClass\": \"struct\",\n              \"kind\": \"local\",\n              \"id\": \"shimmedcompilationNumber(0):2860\",\n              \"typeName\": \"ExactInputSingleParams\",\n              \"definingContractName\": \"ISwapRouter\",\n              \"location\": \"calldata\"\n            },\n            \"kind\": \"value\",\n            \"value\": [\n              {\n                \"name\": \"tokenIn\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"address\",\n                    \"kind\": \"general\",\n                    \"typeHint\": \"address\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asAddress\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n                    \"rawAsHex\": \"0x000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\"\n                  }\n                }\n              },\n              {\n                \"name\": \"tokenOut\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"address\",\n                    \"kind\": \"general\",\n                    \"typeHint\": \"address\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asAddress\": \"0xDe30da39c46104798bB5aA3fe8B9e0e1F348163F\",\n                    \"rawAsHex\": \"0x000000000000000000000000de30da39c46104798bb5aa3fe8b9e0e1f348163f\"\n                  }\n                }\n              },\n              {\n                \"name\": \"fee\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"uint\",\n                    \"bits\": 24,\n                    \"typeHint\": \"uint24\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asString\": \"3000\",\n                    \"rawAsString\": \"3000\"\n                  }\n                }\n              },\n              {\n                \"name\": \"recipient\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"address\",\n                    \"kind\": \"general\",\n                    \"typeHint\": \"address\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asAddress\": \"0xEB0d7e41840066F834eeAd0A22242E2A3A0c8108\",\n                    \"rawAsHex\": \"0x000000000000000000000000eb0d7e41840066f834eead0a22242e2a3a0c8108\"\n                  }\n                }\n              },\n              {\n                \"name\": \"deadline\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"uint\",\n                    \"bits\": 256,\n                    \"typeHint\": \"uint256\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asString\": \"1623295758\",\n                    \"rawAsString\": \"1623295758\"\n                  }\n                }\n              },\n              {\n                \"name\": \"amountIn\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"uint\",\n                    \"bits\": 256,\n                    \"typeHint\": \"uint256\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asString\": \"947761864335456327\",\n                    \"rawAsString\": \"947761864335456327\"\n                  }\n                }\n              },\n              {\n                \"name\": \"amountOutMinimum\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"uint\",\n                    \"bits\": 256,\n                    \"typeHint\": \"uint256\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asString\": \"247249836670459470768\",\n                    \"rawAsString\": \"247249836670459470768\"\n                  }\n                }\n              },\n              {\n                \"name\": \"sqrtPriceLimitX96\",\n                \"value\": {\n                  \"type\": {\n                    \"typeClass\": \"uint\",\n                    \"bits\": 160,\n                    \"typeHint\": \"uint160\"\n                  },\n                  \"kind\": \"value\",\n                  \"value\": {\n                    \"asString\": \"0\",\n                    \"rawAsString\": \"0\"\n                  }\n                }\n              }\n            ]\n          }\n        }\n      ],\n      \"selector\": \"0x414bf389\",\n      \"decodingMode\": \"full\"\n    },\n    \"definitions\": {\n      \"compilationsById\": {\n        \"shimmedcompilationNumber(0)\": {\n          \"sourcesById\": {\n            \"0\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: MIT\",\n                \"\",\n                \"pragma solidity >=0.6.0 <0.8.0;\",\n                \"\",\n                \"/**\",\n                \" * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\",\n                \" * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\",\n                \" *\",\n                \" * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\",\n                \" * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\",\n                \" * need to send a transaction, and thus is not required to hold Ether at all.\",\n                \" */\",\n                \"interface IERC20Permit {\",\n                \"    /**\",\n                \"     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\",\n                \"     * given `owner`'s signed approval.\",\n                \"     *\",\n                \"     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\",\n                \"     * ordering also apply here.\",\n                \"     *\",\n                \"     * Emits an {Approval} event.\",\n                \"     *\",\n                \"     * Requirements:\",\n                \"     *\",\n                \"     * - `spender` cannot be the zero address.\",\n                \"     * - `deadline` must be a timestamp in the future.\",\n                \"     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\",\n                \"     * over the EIP712-formatted function arguments.\",\n                \"     * - the signature must use ``owner``'s current nonce (see {nonces}).\",\n                \"     *\",\n                \"     * For more information on the signature format, see the\",\n                \"     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\",\n                \"     * section].\",\n                \"     */\",\n                \"    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Returns the current nonce for `owner`. This value must be\",\n                \"     * included whenever a signature is generated for {permit}.\",\n                \"     *\",\n                \"     * Every successful call to {permit} increases ``owner``'s nonce by one. This\",\n                \"     * prevents a signature from being used multiple times.\",\n                \"     */\",\n                \"    function nonces(address owner) external view returns (uint256);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\",\n                \"     */\",\n                \"    // solhint-disable-next-line func-name-mixedcase\",\n                \"    function DOMAIN_SEPARATOR() external view returns (bytes32);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"1\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: MIT\",\n                \"\",\n                \"pragma solidity ^0.7.0;\",\n                \"\",\n                \"/**\",\n                \" * @dev Interface of the ERC20 standard as defined in the EIP.\",\n                \" */\",\n                \"interface IERC20 {\",\n                \"    /**\",\n                \"     * @dev Returns the amount of tokens in existence.\",\n                \"     */\",\n                \"    function totalSupply() external view returns (uint256);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Returns the amount of tokens owned by `account`.\",\n                \"     */\",\n                \"    function balanceOf(address account) external view returns (uint256);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Moves `amount` tokens from the caller's account to `recipient`.\",\n                \"     *\",\n                \"     * Returns a boolean value indicating whether the operation succeeded.\",\n                \"     *\",\n                \"     * Emits a {Transfer} event.\",\n                \"     */\",\n                \"    function transfer(address recipient, uint256 amount) external returns (bool);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Returns the remaining number of tokens that `spender` will be\",\n                \"     * allowed to spend on behalf of `owner` through {transferFrom}. This is\",\n                \"     * zero by default.\",\n                \"     *\",\n                \"     * This value changes when {approve} or {transferFrom} are called.\",\n                \"     */\",\n                \"    function allowance(address owner, address spender) external view returns (uint256);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\",\n                \"     *\",\n                \"     * Returns a boolean value indicating whether the operation succeeded.\",\n                \"     *\",\n                \"     * IMPORTANT: Beware that changing an allowance with this method brings the risk\",\n                \"     * that someone may use both the old and the new allowance by unfortunate\",\n                \"     * transaction ordering. One possible solution to mitigate this race\",\n                \"     * condition is to first reduce the spender's allowance to 0 and set the\",\n                \"     * desired value afterwards:\",\n                \"     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\n                \"     *\",\n                \"     * Emits an {Approval} event.\",\n                \"     */\",\n                \"    function approve(address spender, uint256 amount) external returns (bool);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Moves `amount` tokens from `sender` to `recipient` using the\",\n                \"     * allowance mechanism. `amount` is then deducted from the caller's\",\n                \"     * allowance.\",\n                \"     *\",\n                \"     * Returns a boolean value indicating whether the operation succeeded.\",\n                \"     *\",\n                \"     * Emits a {Transfer} event.\",\n                \"     */\",\n                \"    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Emitted when `value` tokens are moved from one account (`from`) to\",\n                \"     * another (`to`).\",\n                \"     *\",\n                \"     * Note that `value` may be zero.\",\n                \"     */\",\n                \"    event Transfer(address indexed from, address indexed to, uint256 value);\",\n                \"\",\n                \"    /**\",\n                \"     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\",\n                \"     * a call to {approve}. `value` is the new allowance.\",\n                \"     */\",\n                \"    event Approval(address indexed owner, address indexed spender, uint256 value);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"2\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"import './pool/IUniswapV3PoolImmutables.sol';\",\n                \"import './pool/IUniswapV3PoolState.sol';\",\n                \"import './pool/IUniswapV3PoolDerivedState.sol';\",\n                \"import './pool/IUniswapV3PoolActions.sol';\",\n                \"import './pool/IUniswapV3PoolOwnerActions.sol';\",\n                \"import './pool/IUniswapV3PoolEvents.sol';\",\n                \"\",\n                \"/// @title The interface for a Uniswap V3 Pool\",\n                \"/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\",\n                \"/// to the ERC20 specification\",\n                \"/// @dev The pool interface is broken up into many smaller pieces\",\n                \"interface IUniswapV3Pool is\",\n                \"    IUniswapV3PoolImmutables,\",\n                \"    IUniswapV3PoolState,\",\n                \"    IUniswapV3PoolDerivedState,\",\n                \"    IUniswapV3PoolActions,\",\n                \"    IUniswapV3PoolOwnerActions,\",\n                \"    IUniswapV3PoolEvents\",\n                \"{\",\n                \"\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"3\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Callback for IUniswapV3PoolActions#swap\",\n                \"/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\",\n                \"interface IUniswapV3SwapCallback {\",\n                \"    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\",\n                \"    /// @dev In the implementation you must pay the pool tokens owed for the swap.\",\n                \"    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\",\n                \"    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\",\n                \"    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\",\n                \"    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\",\n                \"    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\",\n                \"    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\",\n                \"    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\",\n                \"    function uniswapV3SwapCallback(\",\n                \"        int256 amount0Delta,\",\n                \"        int256 amount1Delta,\",\n                \"        bytes calldata data\",\n                \"    ) external;\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"4\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Permissionless pool actions\",\n                \"/// @notice Contains pool methods that can be called by anyone\",\n                \"interface IUniswapV3PoolActions {\",\n                \"    /// @notice Sets the initial price for the pool\",\n                \"    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\",\n                \"    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\",\n                \"    function initialize(uint160 sqrtPriceX96) external;\",\n                \"\",\n                \"    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\",\n                \"    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\",\n                \"    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\",\n                \"    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\",\n                \"    /// @param recipient The address for which the liquidity will be created\",\n                \"    /// @param tickLower The lower tick of the position in which to add liquidity\",\n                \"    /// @param tickUpper The upper tick of the position in which to add liquidity\",\n                \"    /// @param amount The amount of liquidity to mint\",\n                \"    /// @param data Any data that should be passed through to the callback\",\n                \"    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\n                \"    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\",\n                \"    function mint(\",\n                \"        address recipient,\",\n                \"        int24 tickLower,\",\n                \"        int24 tickUpper,\",\n                \"        uint128 amount,\",\n                \"        bytes calldata data\",\n                \"    ) external returns (uint256 amount0, uint256 amount1);\",\n                \"\",\n                \"    /// @notice Collects tokens owed to a position\",\n                \"    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\",\n                \"    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\",\n                \"    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\",\n                \"    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\",\n                \"    /// @param recipient The address which should receive the fees collected\",\n                \"    /// @param tickLower The lower tick of the position for which to collect fees\",\n                \"    /// @param tickUpper The upper tick of the position for which to collect fees\",\n                \"    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\",\n                \"    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\",\n                \"    /// @return amount0 The amount of fees collected in token0\",\n                \"    /// @return amount1 The amount of fees collected in token1\",\n                \"    function collect(\",\n                \"        address recipient,\",\n                \"        int24 tickLower,\",\n                \"        int24 tickUpper,\",\n                \"        uint128 amount0Requested,\",\n                \"        uint128 amount1Requested\",\n                \"    ) external returns (uint128 amount0, uint128 amount1);\",\n                \"\",\n                \"    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\",\n                \"    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\",\n                \"    /// @dev Fees must be collected separately via a call to #collect\",\n                \"    /// @param tickLower The lower tick of the position for which to burn liquidity\",\n                \"    /// @param tickUpper The upper tick of the position for which to burn liquidity\",\n                \"    /// @param amount How much liquidity to burn\",\n                \"    /// @return amount0 The amount of token0 sent to the recipient\",\n                \"    /// @return amount1 The amount of token1 sent to the recipient\",\n                \"    function burn(\",\n                \"        int24 tickLower,\",\n                \"        int24 tickUpper,\",\n                \"        uint128 amount\",\n                \"    ) external returns (uint256 amount0, uint256 amount1);\",\n                \"\",\n                \"    /// @notice Swap token0 for token1, or token1 for token0\",\n                \"    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\",\n                \"    /// @param recipient The address to receive the output of the swap\",\n                \"    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\",\n                \"    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\",\n                \"    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\",\n                \"    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\",\n                \"    /// @param data Any data to be passed through to the callback\",\n                \"    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\",\n                \"    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\",\n                \"    function swap(\",\n                \"        address recipient,\",\n                \"        bool zeroForOne,\",\n                \"        int256 amountSpecified,\",\n                \"        uint160 sqrtPriceLimitX96,\",\n                \"        bytes calldata data\",\n                \"    ) external returns (int256 amount0, int256 amount1);\",\n                \"\",\n                \"    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\",\n                \"    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\",\n                \"    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\",\n                \"    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\",\n                \"    /// @param recipient The address which will receive the token0 and token1 amounts\",\n                \"    /// @param amount0 The amount of token0 to send\",\n                \"    /// @param amount1 The amount of token1 to send\",\n                \"    /// @param data Any data to be passed through to the callback\",\n                \"    function flash(\",\n                \"        address recipient,\",\n                \"        uint256 amount0,\",\n                \"        uint256 amount1,\",\n                \"        bytes calldata data\",\n                \"    ) external;\",\n                \"\",\n                \"    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\",\n                \"    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\",\n                \"    /// the input observationCardinalityNext.\",\n                \"    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\",\n                \"    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"5\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Pool state that is not stored\",\n                \"/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\",\n                \"/// blockchain. The functions here may have variable gas costs.\",\n                \"interface IUniswapV3PoolDerivedState {\",\n                \"    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\",\n                \"    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\",\n                \"    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\",\n                \"    /// you must call it with secondsAgos = [3600, 0].\",\n                \"    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\",\n                \"    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\",\n                \"    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\",\n                \"    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\",\n                \"    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\",\n                \"    /// timestamp\",\n                \"    function observe(uint32[] calldata secondsAgos)\",\n                \"        external\",\n                \"        view\",\n                \"        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\",\n                \"\",\n                \"    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\",\n                \"    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\",\n                \"    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\",\n                \"    /// snapshot is taken and the second snapshot is taken.\",\n                \"    /// @param tickLower The lower tick of the range\",\n                \"    /// @param tickUpper The upper tick of the range\",\n                \"    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\",\n                \"    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\",\n                \"    /// @return secondsInside The snapshot of seconds per liquidity for the range\",\n                \"    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\",\n                \"        external\",\n                \"        view\",\n                \"        returns (\",\n                \"            int56 tickCumulativeInside,\",\n                \"            uint160 secondsPerLiquidityInsideX128,\",\n                \"            uint32 secondsInside\",\n                \"        );\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"6\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Events emitted by a pool\",\n                \"/// @notice Contains all events emitted by the pool\",\n                \"interface IUniswapV3PoolEvents {\",\n                \"    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\",\n                \"    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\",\n                \"    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\",\n                \"    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\",\n                \"    event Initialize(uint160 sqrtPriceX96, int24 tick);\",\n                \"\",\n                \"    /// @notice Emitted when liquidity is minted for a given position\",\n                \"    /// @param sender The address that minted the liquidity\",\n                \"    /// @param owner The owner of the position and recipient of any minted liquidity\",\n                \"    /// @param tickLower The lower tick of the position\",\n                \"    /// @param tickUpper The upper tick of the position\",\n                \"    /// @param amount The amount of liquidity minted to the position range\",\n                \"    /// @param amount0 How much token0 was required for the minted liquidity\",\n                \"    /// @param amount1 How much token1 was required for the minted liquidity\",\n                \"    event Mint(\",\n                \"        address sender,\",\n                \"        address indexed owner,\",\n                \"        int24 indexed tickLower,\",\n                \"        int24 indexed tickUpper,\",\n                \"        uint128 amount,\",\n                \"        uint256 amount0,\",\n                \"        uint256 amount1\",\n                \"    );\",\n                \"\",\n                \"    /// @notice Emitted when fees are collected by the owner of a position\",\n                \"    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\",\n                \"    /// @param owner The owner of the position for which fees are collected\",\n                \"    /// @param tickLower The lower tick of the position\",\n                \"    /// @param tickUpper The upper tick of the position\",\n                \"    /// @param amount0 The amount of token0 fees collected\",\n                \"    /// @param amount1 The amount of token1 fees collected\",\n                \"    event Collect(\",\n                \"        address indexed owner,\",\n                \"        address recipient,\",\n                \"        int24 indexed tickLower,\",\n                \"        int24 indexed tickUpper,\",\n                \"        uint128 amount0,\",\n                \"        uint128 amount1\",\n                \"    );\",\n                \"\",\n                \"    /// @notice Emitted when a position's liquidity is removed\",\n                \"    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\",\n                \"    /// @param owner The owner of the position for which liquidity is removed\",\n                \"    /// @param tickLower The lower tick of the position\",\n                \"    /// @param tickUpper The upper tick of the position\",\n                \"    /// @param amount The amount of liquidity to remove\",\n                \"    /// @param amount0 The amount of token0 withdrawn\",\n                \"    /// @param amount1 The amount of token1 withdrawn\",\n                \"    event Burn(\",\n                \"        address indexed owner,\",\n                \"        int24 indexed tickLower,\",\n                \"        int24 indexed tickUpper,\",\n                \"        uint128 amount,\",\n                \"        uint256 amount0,\",\n                \"        uint256 amount1\",\n                \"    );\",\n                \"\",\n                \"    /// @notice Emitted by the pool for any swaps between token0 and token1\",\n                \"    /// @param sender The address that initiated the swap call, and that received the callback\",\n                \"    /// @param recipient The address that received the output of the swap\",\n                \"    /// @param amount0 The delta of the token0 balance of the pool\",\n                \"    /// @param amount1 The delta of the token1 balance of the pool\",\n                \"    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\",\n                \"    /// @param liquidity The liquidity of the pool after the swap\",\n                \"    /// @param tick The log base 1.0001 of price of the pool after the swap\",\n                \"    event Swap(\",\n                \"        address indexed sender,\",\n                \"        address indexed recipient,\",\n                \"        int256 amount0,\",\n                \"        int256 amount1,\",\n                \"        uint160 sqrtPriceX96,\",\n                \"        uint128 liquidity,\",\n                \"        int24 tick\",\n                \"    );\",\n                \"\",\n                \"    /// @notice Emitted by the pool for any flashes of token0/token1\",\n                \"    /// @param sender The address that initiated the swap call, and that received the callback\",\n                \"    /// @param recipient The address that received the tokens from flash\",\n                \"    /// @param amount0 The amount of token0 that was flashed\",\n                \"    /// @param amount1 The amount of token1 that was flashed\",\n                \"    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\",\n                \"    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\",\n                \"    event Flash(\",\n                \"        address indexed sender,\",\n                \"        address indexed recipient,\",\n                \"        uint256 amount0,\",\n                \"        uint256 amount1,\",\n                \"        uint256 paid0,\",\n                \"        uint256 paid1\",\n                \"    );\",\n                \"\",\n                \"    /// @notice Emitted by the pool for increases to the number of observations that can be stored\",\n                \"    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\",\n                \"    /// just before a mint/swap/burn.\",\n                \"    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\",\n                \"    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\",\n                \"    event IncreaseObservationCardinalityNext(\",\n                \"        uint16 observationCardinalityNextOld,\",\n                \"        uint16 observationCardinalityNextNew\",\n                \"    );\",\n                \"\",\n                \"    /// @notice Emitted when the protocol fee is changed by the pool\",\n                \"    /// @param feeProtocol0Old The previous value of the token0 protocol fee\",\n                \"    /// @param feeProtocol1Old The previous value of the token1 protocol fee\",\n                \"    /// @param feeProtocol0New The updated value of the token0 protocol fee\",\n                \"    /// @param feeProtocol1New The updated value of the token1 protocol fee\",\n                \"    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\",\n                \"\",\n                \"    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\",\n                \"    /// @param sender The address that collects the protocol fees\",\n                \"    /// @param recipient The address that receives the collected protocol fees\",\n                \"    /// @param amount0 The amount of token0 protocol fees that is withdrawn\",\n                \"    /// @param amount0 The amount of token1 protocol fees that is withdrawn\",\n                \"    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"7\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Pool state that never changes\",\n                \"/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\",\n                \"interface IUniswapV3PoolImmutables {\",\n                \"    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\",\n                \"    /// @return The contract address\",\n                \"    function factory() external view returns (address);\",\n                \"\",\n                \"    /// @notice The first of the two tokens of the pool, sorted by address\",\n                \"    /// @return The token contract address\",\n                \"    function token0() external view returns (address);\",\n                \"\",\n                \"    /// @notice The second of the two tokens of the pool, sorted by address\",\n                \"    /// @return The token contract address\",\n                \"    function token1() external view returns (address);\",\n                \"\",\n                \"    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\",\n                \"    /// @return The fee\",\n                \"    function fee() external view returns (uint24);\",\n                \"\",\n                \"    /// @notice The pool tick spacing\",\n                \"    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\",\n                \"    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\",\n                \"    /// This value is an int24 to avoid casting even though it is always positive.\",\n                \"    /// @return The tick spacing\",\n                \"    function tickSpacing() external view returns (int24);\",\n                \"\",\n                \"    /// @notice The maximum amount of position liquidity that can use any tick in the range\",\n                \"    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\",\n                \"    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\",\n                \"    /// @return The max amount of liquidity per tick\",\n                \"    function maxLiquidityPerTick() external view returns (uint128);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"8\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Permissioned pool actions\",\n                \"/// @notice Contains pool methods that may only be called by the factory owner\",\n                \"interface IUniswapV3PoolOwnerActions {\",\n                \"    /// @notice Set the denominator of the protocol's % share of the fees\",\n                \"    /// @param feeProtocol0 new protocol fee for token0 of the pool\",\n                \"    /// @param feeProtocol1 new protocol fee for token1 of the pool\",\n                \"    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\",\n                \"\",\n                \"    /// @notice Collect the protocol fee accrued to the pool\",\n                \"    /// @param recipient The address to which collected protocol fees should be sent\",\n                \"    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\",\n                \"    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\",\n                \"    /// @return amount0 The protocol fee collected in token0\",\n                \"    /// @return amount1 The protocol fee collected in token1\",\n                \"    function collectProtocol(\",\n                \"        address recipient,\",\n                \"        uint128 amount0Requested,\",\n                \"        uint128 amount1Requested\",\n                \"    ) external returns (uint128 amount0, uint128 amount1);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"9\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Pool state that can change\",\n                \"/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\",\n                \"/// per transaction\",\n                \"interface IUniswapV3PoolState {\",\n                \"    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\",\n                \"    /// when accessed externally.\",\n                \"    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\",\n                \"    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\",\n                \"    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\",\n                \"    /// boundary.\",\n                \"    /// observationIndex The index of the last oracle observation that was written,\",\n                \"    /// observationCardinality The current maximum number of observations stored in the pool,\",\n                \"    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\",\n                \"    /// feeProtocol The protocol fee for both tokens of the pool.\",\n                \"    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\",\n                \"    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\",\n                \"    /// unlocked Whether the pool is currently locked to reentrancy\",\n                \"    function slot0()\",\n                \"        external\",\n                \"        view\",\n                \"        returns (\",\n                \"            uint160 sqrtPriceX96,\",\n                \"            int24 tick,\",\n                \"            uint16 observationIndex,\",\n                \"            uint16 observationCardinality,\",\n                \"            uint16 observationCardinalityNext,\",\n                \"            uint8 feeProtocol,\",\n                \"            bool unlocked\",\n                \"        );\",\n                \"\",\n                \"    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\",\n                \"    /// @dev This value can overflow the uint256\",\n                \"    function feeGrowthGlobal0X128() external view returns (uint256);\",\n                \"\",\n                \"    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\",\n                \"    /// @dev This value can overflow the uint256\",\n                \"    function feeGrowthGlobal1X128() external view returns (uint256);\",\n                \"\",\n                \"    /// @notice The amounts of token0 and token1 that are owed to the protocol\",\n                \"    /// @dev Protocol fees will never exceed uint128 max in either token\",\n                \"    function protocolFees() external view returns (uint128 token0, uint128 token1);\",\n                \"\",\n                \"    /// @notice The currently in range liquidity available to the pool\",\n                \"    /// @dev This value has no relationship to the total liquidity across all ticks\",\n                \"    function liquidity() external view returns (uint128);\",\n                \"\",\n                \"    /// @notice Look up information about a specific tick in the pool\",\n                \"    /// @param tick The tick to look up\",\n                \"    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\",\n                \"    /// tick upper,\",\n                \"    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\",\n                \"    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\",\n                \"    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\",\n                \"    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\",\n                \"    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\",\n                \"    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\",\n                \"    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\",\n                \"    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\",\n                \"    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\",\n                \"    /// a specific position.\",\n                \"    function ticks(int24 tick)\",\n                \"        external\",\n                \"        view\",\n                \"        returns (\",\n                \"            uint128 liquidityGross,\",\n                \"            int128 liquidityNet,\",\n                \"            uint256 feeGrowthOutside0X128,\",\n                \"            uint256 feeGrowthOutside1X128,\",\n                \"            int56 tickCumulativeOutside,\",\n                \"            uint160 secondsPerLiquidityOutsideX128,\",\n                \"            uint32 secondsOutside,\",\n                \"            bool initialized\",\n                \"        );\",\n                \"\",\n                \"    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\",\n                \"    function tickBitmap(int16 wordPosition) external view returns (uint256);\",\n                \"\",\n                \"    /// @notice Returns the information about a position by the position's key\",\n                \"    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\",\n                \"    /// @return _liquidity The amount of liquidity in the position,\",\n                \"    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\",\n                \"    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\",\n                \"    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\",\n                \"    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\",\n                \"    function positions(bytes32 key)\",\n                \"        external\",\n                \"        view\",\n                \"        returns (\",\n                \"            uint128 _liquidity,\",\n                \"            uint256 feeGrowthInside0LastX128,\",\n                \"            uint256 feeGrowthInside1LastX128,\",\n                \"            uint128 tokensOwed0,\",\n                \"            uint128 tokensOwed1\",\n                \"        );\",\n                \"\",\n                \"    /// @notice Returns data about a specific observation index\",\n                \"    /// @param index The element of the observations array to fetch\",\n                \"    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\",\n                \"    /// ago, rather than at a specific index in the array.\",\n                \"    /// @return blockTimestamp The timestamp of the observation,\",\n                \"    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\",\n                \"    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\",\n                \"    /// Returns initialized whether the observation has been initialized and the values are safe to use\",\n                \"    function observations(uint256 index)\",\n                \"        external\",\n                \"        view\",\n                \"        returns (\",\n                \"            uint32 blockTimestamp,\",\n                \"            int56 tickCumulative,\",\n                \"            uint160 secondsPerLiquidityCumulativeX128,\",\n                \"            bool initialized\",\n                \"        );\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"10\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.0;\",\n                \"\",\n                \"/// @title Optimized overflow and underflow safe math operations\",\n                \"/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\",\n                \"library LowGasSafeMath {\",\n                \"    /// @notice Returns x + y, reverts if sum overflows uint256\",\n                \"    /// @param x The augend\",\n                \"    /// @param y The addend\",\n                \"    /// @return z The sum of x and y\",\n                \"    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\",\n                \"        require((z = x + y) >= x);\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Returns x - y, reverts if underflows\",\n                \"    /// @param x The minuend\",\n                \"    /// @param y The subtrahend\",\n                \"    /// @return z The difference of x and y\",\n                \"    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\",\n                \"        require((z = x - y) <= x);\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Returns x * y, reverts if overflows\",\n                \"    /// @param x The multiplicand\",\n                \"    /// @param y The multiplier\",\n                \"    /// @return z The product of x and y\",\n                \"    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\",\n                \"        require(x == 0 || (z = x * y) / x == y);\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Returns x + y, reverts if overflows or underflows\",\n                \"    /// @param x The augend\",\n                \"    /// @param y The addend\",\n                \"    /// @return z The sum of x and y\",\n                \"    function add(int256 x, int256 y) internal pure returns (int256 z) {\",\n                \"        require((z = x + y) >= x == (y >= 0));\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Returns x - y, reverts if overflows or underflows\",\n                \"    /// @param x The minuend\",\n                \"    /// @param y The subtrahend\",\n                \"    /// @return z The difference of x and y\",\n                \"    function sub(int256 x, int256 y) internal pure returns (int256 z) {\",\n                \"        require((z = x - y) <= x == (y >= 0));\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"11\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Safe casting methods\",\n                \"/// @notice Contains methods for safely casting between types\",\n                \"library SafeCast {\",\n                \"    /// @notice Cast a uint256 to a uint160, revert on overflow\",\n                \"    /// @param y The uint256 to be downcasted\",\n                \"    /// @return z The downcasted integer, now type uint160\",\n                \"    function toUint160(uint256 y) internal pure returns (uint160 z) {\",\n                \"        require((z = uint160(y)) == y);\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Cast a int256 to a int128, revert on overflow or underflow\",\n                \"    /// @param y The int256 to be downcasted\",\n                \"    /// @return z The downcasted integer, now type int128\",\n                \"    function toInt128(int256 y) internal pure returns (int128 z) {\",\n                \"        require((z = int128(y)) == y);\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Cast a uint256 to a int256, revert on overflow\",\n                \"    /// @param y The uint256 to be casted\",\n                \"    /// @return z The casted integer, now type int256\",\n                \"    function toInt256(uint256 y) internal pure returns (int256 z) {\",\n                \"        require(y < 2**255);\",\n                \"        z = int256(y);\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"12\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Math library for computing sqrt prices from ticks and vice versa\",\n                \"/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\",\n                \"/// prices between 2**-128 and 2**128\",\n                \"library TickMath {\",\n                \"    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\",\n                \"    int24 internal constant MIN_TICK = -887272;\",\n                \"    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\",\n                \"    int24 internal constant MAX_TICK = -MIN_TICK;\",\n                \"\",\n                \"    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\",\n                \"    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\",\n                \"    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\",\n                \"    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\",\n                \"\",\n                \"    /// @notice Calculates sqrt(1.0001^tick) * 2^96\",\n                \"    /// @dev Throws if |tick| > max tick\",\n                \"    /// @param tick The input tick for the above formula\",\n                \"    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\",\n                \"    /// at the given tick\",\n                \"    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\",\n                \"        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\",\n                \"        require(absTick <= uint256(MAX_TICK), 'T');\",\n                \"\",\n                \"        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\",\n                \"        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\",\n                \"        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\",\n                \"        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\",\n                \"        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\",\n                \"        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\",\n                \"        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\",\n                \"        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\",\n                \"        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\",\n                \"        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\",\n                \"        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\",\n                \"        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\",\n                \"        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\",\n                \"        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\",\n                \"        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\",\n                \"        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\",\n                \"        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\",\n                \"        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\",\n                \"        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\",\n                \"        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\",\n                \"\",\n                \"        if (tick > 0) ratio = type(uint256).max / ratio;\",\n                \"\",\n                \"        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\",\n                \"        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\",\n                \"        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\",\n                \"        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\",\n                \"    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\",\n                \"    /// ever return.\",\n                \"    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\",\n                \"    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\",\n                \"    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\",\n                \"        // second inequality must be < because the price can never reach the price at the max tick\",\n                \"        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\",\n                \"        uint256 ratio = uint256(sqrtPriceX96) << 32;\",\n                \"\",\n                \"        uint256 r = ratio;\",\n                \"        uint256 msb = 0;\",\n                \"\",\n                \"        assembly {\",\n                \"            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\",\n                \"            msb := or(msb, f)\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\",\n                \"            msb := or(msb, f)\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            let f := shl(5, gt(r, 0xFFFFFFFF))\",\n                \"            msb := or(msb, f)\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            let f := shl(4, gt(r, 0xFFFF))\",\n                \"            msb := or(msb, f)\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            let f := shl(3, gt(r, 0xFF))\",\n                \"            msb := or(msb, f)\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            let f := shl(2, gt(r, 0xF))\",\n                \"            msb := or(msb, f)\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            let f := shl(1, gt(r, 0x3))\",\n                \"            msb := or(msb, f)\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            let f := gt(r, 0x1)\",\n                \"            msb := or(msb, f)\",\n                \"        }\",\n                \"\",\n                \"        if (msb >= 128) r = ratio >> (msb - 127);\",\n                \"        else r = ratio << (127 - msb);\",\n                \"\",\n                \"        int256 log_2 = (int256(msb) - 128) << 64;\",\n                \"\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(63, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(62, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(61, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(60, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(59, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(58, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(57, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(56, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(55, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(54, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(53, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(52, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(51, f))\",\n                \"            r := shr(f, r)\",\n                \"        }\",\n                \"        assembly {\",\n                \"            r := shr(127, mul(r, r))\",\n                \"            let f := shr(128, r)\",\n                \"            log_2 := or(log_2, shl(50, f))\",\n                \"        }\",\n                \"\",\n                \"        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\",\n                \"\",\n                \"        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\",\n                \"        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\",\n                \"\",\n                \"        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"13\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity =0.7.6;\",\n                \"pragma abicoder v2;\",\n                \"\",\n                \"import '@uniswap/v3-core/contracts/libraries/SafeCast.sol';\",\n                \"import '@uniswap/v3-core/contracts/libraries/TickMath.sol';\",\n                \"import '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\",\n                \"\",\n                \"import './interfaces/ISwapRouter.sol';\",\n                \"import './base/PeripheryImmutableState.sol';\",\n                \"import './base/PeripheryValidation.sol';\",\n                \"import './base/PeripheryPaymentsWithFee.sol';\",\n                \"import './base/Multicall.sol';\",\n                \"import './base/SelfPermit.sol';\",\n                \"import './libraries/Path.sol';\",\n                \"import './libraries/PoolAddress.sol';\",\n                \"import './libraries/CallbackValidation.sol';\",\n                \"import './interfaces/external/IWETH9.sol';\",\n                \"\",\n                \"/// @title Uniswap V3 Swap Router\",\n                \"/// @notice Router for stateless execution of swaps against Uniswap V3\",\n                \"contract SwapRouter is\",\n                \"    ISwapRouter,\",\n                \"    PeripheryImmutableState,\",\n                \"    PeripheryValidation,\",\n                \"    PeripheryPaymentsWithFee,\",\n                \"    Multicall,\",\n                \"    SelfPermit\",\n                \"{\",\n                \"    using Path for bytes;\",\n                \"    using SafeCast for uint256;\",\n                \"\",\n                \"    /// @dev Used as the placeholder value for amountInCached, because the computed amount in for an exact output swap\",\n                \"    /// can never actually be this value\",\n                \"    uint256 private constant DEFAULT_AMOUNT_IN_CACHED = type(uint256).max;\",\n                \"\",\n                \"    /// @dev Transient storage variable used for returning the computed amount in for an exact output swap.\",\n                \"    uint256 private amountInCached = DEFAULT_AMOUNT_IN_CACHED;\",\n                \"\",\n                \"    constructor(address _factory, address _WETH9) PeripheryImmutableState(_factory, _WETH9) {}\",\n                \"\",\n                \"    /// @dev Returns the pool for the given token pair and fee. The pool contract may or may not exist.\",\n                \"    function getPool(\",\n                \"        address tokenA,\",\n                \"        address tokenB,\",\n                \"        uint24 fee\",\n                \"    ) private view returns (IUniswapV3Pool) {\",\n                \"        return IUniswapV3Pool(PoolAddress.computeAddress(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee)));\",\n                \"    }\",\n                \"\",\n                \"    struct SwapCallbackData {\",\n                \"        bytes path;\",\n                \"        address payer;\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc IUniswapV3SwapCallback\",\n                \"    function uniswapV3SwapCallback(\",\n                \"        int256 amount0Delta,\",\n                \"        int256 amount1Delta,\",\n                \"        bytes calldata _data\",\n                \"    ) external override {\",\n                \"        require(amount0Delta > 0 || amount1Delta > 0); // swaps entirely within 0-liquidity regions are not supported\",\n                \"        SwapCallbackData memory data = abi.decode(_data, (SwapCallbackData));\",\n                \"        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\",\n                \"        CallbackValidation.verifyCallback(factory, tokenIn, tokenOut, fee);\",\n                \"\",\n                \"        (bool isExactInput, uint256 amountToPay) =\",\n                \"            amount0Delta > 0\",\n                \"                ? (tokenIn < tokenOut, uint256(amount0Delta))\",\n                \"                : (tokenOut < tokenIn, uint256(amount1Delta));\",\n                \"        if (isExactInput) {\",\n                \"            pay(tokenIn, data.payer, msg.sender, amountToPay);\",\n                \"        } else {\",\n                \"            // either initiate the next swap or pay\",\n                \"            if (data.path.hasMultiplePools()) {\",\n                \"                data.path = data.path.skipToken();\",\n                \"                exactOutputInternal(amountToPay, msg.sender, 0, data);\",\n                \"            } else {\",\n                \"                amountInCached = amountToPay;\",\n                \"                tokenIn = tokenOut; // swap in/out because exact output swaps are reversed\",\n                \"                pay(tokenIn, data.payer, msg.sender, amountToPay);\",\n                \"            }\",\n                \"        }\",\n                \"    }\",\n                \"\",\n                \"    /// @dev Performs a single exact input swap\",\n                \"    function exactInputInternal(\",\n                \"        uint256 amountIn,\",\n                \"        address recipient,\",\n                \"        uint160 sqrtPriceLimitX96,\",\n                \"        SwapCallbackData memory data\",\n                \"    ) private returns (uint256 amountOut) {\",\n                \"        // allow swapping to the router address with address 0\",\n                \"        if (recipient == address(0)) recipient = address(this);\",\n                \"\",\n                \"        (address tokenIn, address tokenOut, uint24 fee) = data.path.decodeFirstPool();\",\n                \"\",\n                \"        bool zeroForOne = tokenIn < tokenOut;\",\n                \"\",\n                \"        (int256 amount0, int256 amount1) =\",\n                \"            getPool(tokenIn, tokenOut, fee).swap(\",\n                \"                recipient,\",\n                \"                zeroForOne,\",\n                \"                amountIn.toInt256(),\",\n                \"                sqrtPriceLimitX96 == 0\",\n                \"                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\",\n                \"                    : sqrtPriceLimitX96,\",\n                \"                abi.encode(data)\",\n                \"            );\",\n                \"\",\n                \"        return uint256(-(zeroForOne ? amount1 : amount0));\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc ISwapRouter\",\n                \"    function exactInputSingle(ExactInputSingleParams calldata params)\",\n                \"        external\",\n                \"        payable\",\n                \"        override\",\n                \"        checkDeadline(params.deadline)\",\n                \"        returns (uint256 amountOut)\",\n                \"    {\",\n                \"        amountOut = exactInputInternal(\",\n                \"            params.amountIn,\",\n                \"            params.recipient,\",\n                \"            params.sqrtPriceLimitX96,\",\n                \"            SwapCallbackData({path: abi.encodePacked(params.tokenIn, params.fee, params.tokenOut), payer: msg.sender})\",\n                \"        );\",\n                \"        require(amountOut >= params.amountOutMinimum, 'Too little received');\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc ISwapRouter\",\n                \"    function exactInput(ExactInputParams memory params)\",\n                \"        external\",\n                \"        payable\",\n                \"        override\",\n                \"        checkDeadline(params.deadline)\",\n                \"        returns (uint256 amountOut)\",\n                \"    {\",\n                \"        address payer = msg.sender; // msg.sender pays for the first hop\",\n                \"\",\n                \"        while (true) {\",\n                \"            bool hasMultiplePools = params.path.hasMultiplePools();\",\n                \"\",\n                \"            // the outputs of prior swaps become the inputs to subsequent ones\",\n                \"            params.amountIn = exactInputInternal(\",\n                \"                params.amountIn,\",\n                \"                hasMultiplePools ? address(this) : params.recipient, // for intermediate swaps, this contract custodies\",\n                \"                0,\",\n                \"                SwapCallbackData({\",\n                \"                    path: params.path.getFirstPool(), // only the first pool in the path is necessary\",\n                \"                    payer: payer\",\n                \"                })\",\n                \"            );\",\n                \"\",\n                \"            // decide whether to continue or terminate\",\n                \"            if (hasMultiplePools) {\",\n                \"                payer = address(this); // at this point, the caller has paid\",\n                \"                params.path = params.path.skipToken();\",\n                \"            } else {\",\n                \"                amountOut = params.amountIn;\",\n                \"                break;\",\n                \"            }\",\n                \"        }\",\n                \"\",\n                \"        require(amountOut >= params.amountOutMinimum, 'Too little received');\",\n                \"    }\",\n                \"\",\n                \"    /// @dev Performs a single exact output swap\",\n                \"    function exactOutputInternal(\",\n                \"        uint256 amountOut,\",\n                \"        address recipient,\",\n                \"        uint160 sqrtPriceLimitX96,\",\n                \"        SwapCallbackData memory data\",\n                \"    ) private returns (uint256 amountIn) {\",\n                \"        // allow swapping to the router address with address 0\",\n                \"        if (recipient == address(0)) recipient = address(this);\",\n                \"\",\n                \"        (address tokenOut, address tokenIn, uint24 fee) = data.path.decodeFirstPool();\",\n                \"\",\n                \"        bool zeroForOne = tokenIn < tokenOut;\",\n                \"\",\n                \"        (int256 amount0Delta, int256 amount1Delta) =\",\n                \"            getPool(tokenIn, tokenOut, fee).swap(\",\n                \"                recipient,\",\n                \"                zeroForOne,\",\n                \"                -amountOut.toInt256(),\",\n                \"                sqrtPriceLimitX96 == 0\",\n                \"                    ? (zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1)\",\n                \"                    : sqrtPriceLimitX96,\",\n                \"                abi.encode(data)\",\n                \"            );\",\n                \"\",\n                \"        uint256 amountOutReceived;\",\n                \"        (amountIn, amountOutReceived) = zeroForOne\",\n                \"            ? (uint256(amount0Delta), uint256(-amount1Delta))\",\n                \"            : (uint256(amount1Delta), uint256(-amount0Delta));\",\n                \"        // it's technically possible to not receive the full output amount,\",\n                \"        // so if no price limit has been specified, require this possibility away\",\n                \"        if (sqrtPriceLimitX96 == 0) require(amountOutReceived == amountOut);\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc ISwapRouter\",\n                \"    function exactOutputSingle(ExactOutputSingleParams calldata params)\",\n                \"        external\",\n                \"        payable\",\n                \"        override\",\n                \"        checkDeadline(params.deadline)\",\n                \"        returns (uint256 amountIn)\",\n                \"    {\",\n                \"        // avoid an SLOAD by using the swap return data\",\n                \"        amountIn = exactOutputInternal(\",\n                \"            params.amountOut,\",\n                \"            params.recipient,\",\n                \"            params.sqrtPriceLimitX96,\",\n                \"            SwapCallbackData({path: abi.encodePacked(params.tokenOut, params.fee, params.tokenIn), payer: msg.sender})\",\n                \"        );\",\n                \"\",\n                \"        require(amountIn <= params.amountInMaximum, 'Too much requested');\",\n                \"        // has to be reset even though we don't use it in the single hop case\",\n                \"        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc ISwapRouter\",\n                \"    function exactOutput(ExactOutputParams calldata params)\",\n                \"        external\",\n                \"        payable\",\n                \"        override\",\n                \"        checkDeadline(params.deadline)\",\n                \"        returns (uint256 amountIn)\",\n                \"    {\",\n                \"        // it's okay that the payer is fixed to msg.sender here, as they're only paying for the \\\"final\\\" exact output\",\n                \"        // swap, which happens first, and subsequent swaps are paid for within nested callback frames\",\n                \"        exactOutputInternal(\",\n                \"            params.amountOut,\",\n                \"            params.recipient,\",\n                \"            0,\",\n                \"            SwapCallbackData({path: params.path, payer: msg.sender})\",\n                \"        );\",\n                \"\",\n                \"        amountIn = amountInCached;\",\n                \"        require(amountIn <= params.amountInMaximum, 'Too much requested');\",\n                \"        amountInCached = DEFAULT_AMOUNT_IN_CACHED;\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"14\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity =0.7.6;\",\n                \"\",\n                \"/// @title Function for getting block timestamp\",\n                \"/// @dev Base contract that is overridden for tests\",\n                \"abstract contract BlockTimestamp {\",\n                \"    /// @dev Method that exists purely to be overridden for tests\",\n                \"    /// @return The current block timestamp\",\n                \"    function _blockTimestamp() internal view virtual returns (uint256) {\",\n                \"        return block.timestamp;\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"15\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity =0.7.6;\",\n                \"pragma abicoder v2;\",\n                \"\",\n                \"import '../interfaces/IMulticall.sol';\",\n                \"\",\n                \"/// @title Multicall\",\n                \"/// @notice Enables calling multiple methods in a single call to the contract\",\n                \"abstract contract Multicall is IMulticall {\",\n                \"    /// @inheritdoc IMulticall\",\n                \"    function multicall(bytes[] calldata data) external payable override returns (bytes[] memory results) {\",\n                \"        results = new bytes[](data.length);\",\n                \"        for (uint256 i = 0; i < data.length; i++) {\",\n                \"            (bool success, bytes memory result) = address(this).delegatecall(data[i]);\",\n                \"\",\n                \"            if (!success) {\",\n                \"                // Next 5 lines from https://ethereum.stackexchange.com/a/83577\",\n                \"                if (result.length < 68) revert();\",\n                \"                assembly {\",\n                \"                    result := add(result, 0x04)\",\n                \"                }\",\n                \"                revert(abi.decode(result, (string)));\",\n                \"            }\",\n                \"\",\n                \"            results[i] = result;\",\n                \"        }\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"16\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity =0.7.6;\",\n                \"\",\n                \"import '../interfaces/IPeripheryImmutableState.sol';\",\n                \"\",\n                \"/// @title Immutable state\",\n                \"/// @notice Immutable state used by periphery contracts\",\n                \"abstract contract PeripheryImmutableState is IPeripheryImmutableState {\",\n                \"    /// @inheritdoc IPeripheryImmutableState\",\n                \"    address public immutable override factory;\",\n                \"    /// @inheritdoc IPeripheryImmutableState\",\n                \"    address public immutable override WETH9;\",\n                \"\",\n                \"    constructor(address _factory, address _WETH9) {\",\n                \"        factory = _factory;\",\n                \"        WETH9 = _WETH9;\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"17\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.5;\",\n                \"\",\n                \"import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\",\n                \"\",\n                \"import '../interfaces/IPeripheryPayments.sol';\",\n                \"import '../interfaces/external/IWETH9.sol';\",\n                \"\",\n                \"import '../libraries/TransferHelper.sol';\",\n                \"\",\n                \"import './PeripheryImmutableState.sol';\",\n                \"\",\n                \"abstract contract PeripheryPayments is IPeripheryPayments, PeripheryImmutableState {\",\n                \"    receive() external payable {\",\n                \"        require(msg.sender == WETH9, 'Not WETH9');\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc IPeripheryPayments\",\n                \"    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable override {\",\n                \"        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\",\n                \"        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\",\n                \"\",\n                \"        if (balanceWETH9 > 0) {\",\n                \"            IWETH9(WETH9).withdraw(balanceWETH9);\",\n                \"            TransferHelper.safeTransferETH(recipient, balanceWETH9);\",\n                \"        }\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc IPeripheryPayments\",\n                \"    function sweepToken(\",\n                \"        address token,\",\n                \"        uint256 amountMinimum,\",\n                \"        address recipient\",\n                \"    ) external payable override {\",\n                \"        uint256 balanceToken = IERC20(token).balanceOf(address(this));\",\n                \"        require(balanceToken >= amountMinimum, 'Insufficient token');\",\n                \"\",\n                \"        if (balanceToken > 0) {\",\n                \"            TransferHelper.safeTransfer(token, recipient, balanceToken);\",\n                \"        }\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc IPeripheryPayments\",\n                \"    function refundETH() external payable override {\",\n                \"        if (address(this).balance > 0) TransferHelper.safeTransferETH(msg.sender, address(this).balance);\",\n                \"    }\",\n                \"\",\n                \"    /// @param token The token to pay\",\n                \"    /// @param payer The entity that must pay\",\n                \"    /// @param recipient The entity that will receive payment\",\n                \"    /// @param value The amount to pay\",\n                \"    function pay(\",\n                \"        address token,\",\n                \"        address payer,\",\n                \"        address recipient,\",\n                \"        uint256 value\",\n                \"    ) internal {\",\n                \"        if (token == WETH9 && address(this).balance >= value) {\",\n                \"            // pay with WETH9\",\n                \"            IWETH9(WETH9).deposit{value: value}(); // wrap only what is needed to pay\",\n                \"            IWETH9(WETH9).transfer(recipient, value);\",\n                \"        } else if (payer == address(this)) {\",\n                \"            // pay with tokens already in the contract (for the exact input multihop case)\",\n                \"            TransferHelper.safeTransfer(token, recipient, value);\",\n                \"        } else {\",\n                \"            // pull payment\",\n                \"            TransferHelper.safeTransferFrom(token, payer, recipient, value);\",\n                \"        }\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"18\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.5;\",\n                \"\",\n                \"import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\",\n                \"import '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\",\n                \"\",\n                \"import './PeripheryPayments.sol';\",\n                \"import '../interfaces/IPeripheryPaymentsWithFee.sol';\",\n                \"\",\n                \"import '../interfaces/external/IWETH9.sol';\",\n                \"import '../libraries/TransferHelper.sol';\",\n                \"\",\n                \"abstract contract PeripheryPaymentsWithFee is PeripheryPayments, IPeripheryPaymentsWithFee {\",\n                \"    using LowGasSafeMath for uint256;\",\n                \"\",\n                \"    /// @inheritdoc IPeripheryPaymentsWithFee\",\n                \"    function unwrapWETH9WithFee(\",\n                \"        uint256 amountMinimum,\",\n                \"        address recipient,\",\n                \"        uint256 feeBips,\",\n                \"        address feeRecipient\",\n                \"    ) public payable override {\",\n                \"        require(feeBips > 0 && feeBips <= 100);\",\n                \"\",\n                \"        uint256 balanceWETH9 = IWETH9(WETH9).balanceOf(address(this));\",\n                \"        require(balanceWETH9 >= amountMinimum, 'Insufficient WETH9');\",\n                \"\",\n                \"        if (balanceWETH9 > 0) {\",\n                \"            IWETH9(WETH9).withdraw(balanceWETH9);\",\n                \"            uint256 feeAmount = balanceWETH9.mul(feeBips) / 10_000;\",\n                \"            if (feeAmount > 0) TransferHelper.safeTransferETH(feeRecipient, feeAmount);\",\n                \"            TransferHelper.safeTransferETH(recipient, balanceWETH9 - feeAmount);\",\n                \"        }\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc IPeripheryPaymentsWithFee\",\n                \"    function sweepTokenWithFee(\",\n                \"        address token,\",\n                \"        uint256 amountMinimum,\",\n                \"        address recipient,\",\n                \"        uint256 feeBips,\",\n                \"        address feeRecipient\",\n                \"    ) public payable override {\",\n                \"        require(feeBips > 0 && feeBips <= 100);\",\n                \"\",\n                \"        uint256 balanceToken = IERC20(token).balanceOf(address(this));\",\n                \"        require(balanceToken >= amountMinimum, 'Insufficient token');\",\n                \"\",\n                \"        if (balanceToken > 0) {\",\n                \"            uint256 feeAmount = balanceToken.mul(feeBips) / 10_000;\",\n                \"            if (feeAmount > 0) TransferHelper.safeTransfer(token, feeRecipient, feeAmount);\",\n                \"            TransferHelper.safeTransfer(token, recipient, balanceToken - feeAmount);\",\n                \"        }\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"19\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity =0.7.6;\",\n                \"\",\n                \"import './BlockTimestamp.sol';\",\n                \"\",\n                \"abstract contract PeripheryValidation is BlockTimestamp {\",\n                \"    modifier checkDeadline(uint256 deadline) {\",\n                \"        require(_blockTimestamp() <= deadline, 'Transaction too old');\",\n                \"        _;\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"20\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\",\n                \"import '@openzeppelin/contracts/drafts/IERC20Permit.sol';\",\n                \"\",\n                \"import '../interfaces/ISelfPermit.sol';\",\n                \"import '../interfaces/external/IERC20PermitAllowed.sol';\",\n                \"\",\n                \"/// @title Self Permit\",\n                \"/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\",\n                \"/// @dev These functions are expected to be embedded in multicalls to allow EOAs to approve a contract and call a function\",\n                \"/// that requires an approval in a single transaction.\",\n                \"abstract contract SelfPermit is ISelfPermit {\",\n                \"    /// @inheritdoc ISelfPermit\",\n                \"    function selfPermit(\",\n                \"        address token,\",\n                \"        uint256 value,\",\n                \"        uint256 deadline,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) public payable override {\",\n                \"        IERC20Permit(token).permit(msg.sender, address(this), value, deadline, v, r, s);\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc ISelfPermit\",\n                \"    function selfPermitIfNecessary(\",\n                \"        address token,\",\n                \"        uint256 value,\",\n                \"        uint256 deadline,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) external payable override {\",\n                \"        if (IERC20(token).allowance(msg.sender, address(this)) < value) selfPermit(token, value, deadline, v, r, s);\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc ISelfPermit\",\n                \"    function selfPermitAllowed(\",\n                \"        address token,\",\n                \"        uint256 nonce,\",\n                \"        uint256 expiry,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) public payable override {\",\n                \"        IERC20PermitAllowed(token).permit(msg.sender, address(this), nonce, expiry, true, v, r, s);\",\n                \"    }\",\n                \"\",\n                \"    /// @inheritdoc ISelfPermit\",\n                \"    function selfPermitAllowedIfNecessary(\",\n                \"        address token,\",\n                \"        uint256 nonce,\",\n                \"        uint256 expiry,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) external payable override {\",\n                \"        if (IERC20(token).allowance(msg.sender, address(this)) < type(uint256).max)\",\n                \"            selfPermitAllowed(token, nonce, expiry, v, r, s);\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"21\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.5;\",\n                \"pragma abicoder v2;\",\n                \"\",\n                \"/// @title Multicall interface\",\n                \"/// @notice Enables calling multiple methods in a single call to the contract\",\n                \"interface IMulticall {\",\n                \"    /// @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\",\n                \"    /// @dev The `msg.value` should not be trusted for any method callable from multicall.\",\n                \"    /// @param data The encoded function data for each of the calls to make to this contract\",\n                \"    /// @return results The results from each of the calls passed in via data\",\n                \"    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"22\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Immutable state\",\n                \"/// @notice Functions that return immutable state of the router\",\n                \"interface IPeripheryImmutableState {\",\n                \"    /// @return Returns the address of the Uniswap V3 factory\",\n                \"    function factory() external view returns (address);\",\n                \"\",\n                \"    /// @return Returns the address of WETH9\",\n                \"    function WETH9() external view returns (address);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"23\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.5;\",\n                \"\",\n                \"/// @title Periphery Payments\",\n                \"/// @notice Functions to ease deposits and withdrawals of ETH\",\n                \"interface IPeripheryPayments {\",\n                \"    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\",\n                \"    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\n                \"    /// @param amountMinimum The minimum amount of WETH9 to unwrap\",\n                \"    /// @param recipient The address receiving ETH\",\n                \"    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\",\n                \"\",\n                \"    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\",\n                \"    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\",\n                \"    /// that use ether for the input amount\",\n                \"    function refundETH() external payable;\",\n                \"\",\n                \"    /// @notice Transfers the full amount of a token held by this contract to recipient\",\n                \"    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\n                \"    /// @param token The contract address of the token which will be transferred to `recipient`\",\n                \"    /// @param amountMinimum The minimum amount of token required for a transfer\",\n                \"    /// @param recipient The destination address of the token\",\n                \"    function sweepToken(\",\n                \"        address token,\",\n                \"        uint256 amountMinimum,\",\n                \"        address recipient\",\n                \"    ) external payable;\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"24\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.5;\",\n                \"\",\n                \"import './IPeripheryPayments.sol';\",\n                \"\",\n                \"/// @title Periphery Payments\",\n                \"/// @notice Functions to ease deposits and withdrawals of ETH\",\n                \"interface IPeripheryPaymentsWithFee is IPeripheryPayments {\",\n                \"    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH, with a percentage between\",\n                \"    /// 0 (exclusive), and 1 (inclusive) going to feeRecipient\",\n                \"    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\",\n                \"    function unwrapWETH9WithFee(\",\n                \"        uint256 amountMinimum,\",\n                \"        address recipient,\",\n                \"        uint256 feeBips,\",\n                \"        address feeRecipient\",\n                \"    ) external payable;\",\n                \"\",\n                \"    /// @notice Transfers the full amount of a token held by this contract to recipient, with a percentage between\",\n                \"    /// 0 (exclusive) and 1 (inclusive) going to feeRecipient\",\n                \"    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\",\n                \"    function sweepTokenWithFee(\",\n                \"        address token,\",\n                \"        uint256 amountMinimum,\",\n                \"        address recipient,\",\n                \"        uint256 feeBips,\",\n                \"        address feeRecipient\",\n                \"    ) external payable;\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"25\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.5;\",\n                \"\",\n                \"/// @title Self Permit\",\n                \"/// @notice Functionality to call permit on any EIP-2612-compliant token for use in the route\",\n                \"interface ISelfPermit {\",\n                \"    /// @notice Permits this contract to spend a given token from `msg.sender`\",\n                \"    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\",\n                \"    /// @param token The address of the token spent\",\n                \"    /// @param value The amount that can be spent of token\",\n                \"    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\",\n                \"    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\n                \"    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\n                \"    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\n                \"    function selfPermit(\",\n                \"        address token,\",\n                \"        uint256 value,\",\n                \"        uint256 deadline,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) external payable;\",\n                \"\",\n                \"    /// @notice Permits this contract to spend a given token from `msg.sender`\",\n                \"    /// @dev The `owner` is always msg.sender and the `spender` is always address(this).\",\n                \"    /// Can be used instead of #selfPermit to prevent calls from failing due to a frontrun of a call to #selfPermit\",\n                \"    /// @param token The address of the token spent\",\n                \"    /// @param value The amount that can be spent of token\",\n                \"    /// @param deadline A timestamp, the current blocktime must be less than or equal to this timestamp\",\n                \"    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\n                \"    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\n                \"    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\n                \"    function selfPermitIfNecessary(\",\n                \"        address token,\",\n                \"        uint256 value,\",\n                \"        uint256 deadline,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) external payable;\",\n                \"\",\n                \"    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\",\n                \"    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\",\n                \"    /// @param token The address of the token spent\",\n                \"    /// @param nonce The current nonce of the owner\",\n                \"    /// @param expiry The timestamp at which the permit is no longer valid\",\n                \"    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\n                \"    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\n                \"    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\n                \"    function selfPermitAllowed(\",\n                \"        address token,\",\n                \"        uint256 nonce,\",\n                \"        uint256 expiry,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) external payable;\",\n                \"\",\n                \"    /// @notice Permits this contract to spend the sender's tokens for permit signatures that have the `allowed` parameter\",\n                \"    /// @dev The `owner` is always msg.sender and the `spender` is always address(this)\",\n                \"    /// Can be used instead of #selfPermitAllowed to prevent calls from failing due to a frontrun of a call to #selfPermitAllowed.\",\n                \"    /// @param token The address of the token spent\",\n                \"    /// @param nonce The current nonce of the owner\",\n                \"    /// @param expiry The timestamp at which the permit is no longer valid\",\n                \"    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\n                \"    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\n                \"    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\n                \"    function selfPermitAllowedIfNecessary(\",\n                \"        address token,\",\n                \"        uint256 nonce,\",\n                \"        uint256 expiry,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) external payable;\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"26\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.7.5;\",\n                \"pragma abicoder v2;\",\n                \"\",\n                \"import '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\",\n                \"\",\n                \"/// @title Router token swapping functionality\",\n                \"/// @notice Functions for swapping tokens via Uniswap V3\",\n                \"interface ISwapRouter is IUniswapV3SwapCallback {\",\n                \"    struct ExactInputSingleParams {\",\n                \"        address tokenIn;\",\n                \"        address tokenOut;\",\n                \"        uint24 fee;\",\n                \"        address recipient;\",\n                \"        uint256 deadline;\",\n                \"        uint256 amountIn;\",\n                \"        uint256 amountOutMinimum;\",\n                \"        uint160 sqrtPriceLimitX96;\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Swaps `amountIn` of one token for as much as possible of another token\",\n                \"    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\",\n                \"    /// @return amountOut The amount of the received token\",\n                \"    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\",\n                \"\",\n                \"    struct ExactInputParams {\",\n                \"        bytes path;\",\n                \"        address recipient;\",\n                \"        uint256 deadline;\",\n                \"        uint256 amountIn;\",\n                \"        uint256 amountOutMinimum;\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\",\n                \"    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\",\n                \"    /// @return amountOut The amount of the received token\",\n                \"    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\",\n                \"\",\n                \"    struct ExactOutputSingleParams {\",\n                \"        address tokenIn;\",\n                \"        address tokenOut;\",\n                \"        uint24 fee;\",\n                \"        address recipient;\",\n                \"        uint256 deadline;\",\n                \"        uint256 amountOut;\",\n                \"        uint256 amountInMaximum;\",\n                \"        uint160 sqrtPriceLimitX96;\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Swaps as little as possible of one token for `amountOut` of another token\",\n                \"    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\",\n                \"    /// @return amountIn The amount of the input token\",\n                \"    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\",\n                \"\",\n                \"    struct ExactOutputParams {\",\n                \"        bytes path;\",\n                \"        address recipient;\",\n                \"        uint256 deadline;\",\n                \"        uint256 amountOut;\",\n                \"        uint256 amountInMaximum;\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\",\n                \"    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\",\n                \"    /// @return amountIn The amount of the input token\",\n                \"    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"27\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Interface for permit\",\n                \"/// @notice Interface used by DAI/CHAI for permit\",\n                \"interface IERC20PermitAllowed {\",\n                \"    /// @notice Approve the spender to spend some tokens via the holder signature\",\n                \"    /// @dev This is the permit interface used by DAI and CHAI\",\n                \"    /// @param holder The address of the token holder, the token owner\",\n                \"    /// @param spender The address of the token spender\",\n                \"    /// @param nonce The holder's nonce, increases at each call to permit\",\n                \"    /// @param expiry The timestamp at which the permit is no longer valid\",\n                \"    /// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0\",\n                \"    /// @param v Must produce valid secp256k1 signature from the holder along with `r` and `s`\",\n                \"    /// @param r Must produce valid secp256k1 signature from the holder along with `v` and `s`\",\n                \"    /// @param s Must produce valid secp256k1 signature from the holder along with `r` and `v`\",\n                \"    function permit(\",\n                \"        address holder,\",\n                \"        address spender,\",\n                \"        uint256 nonce,\",\n                \"        uint256 expiry,\",\n                \"        bool allowed,\",\n                \"        uint8 v,\",\n                \"        bytes32 r,\",\n                \"        bytes32 s\",\n                \"    ) external;\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"28\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity =0.7.6;\",\n                \"\",\n                \"import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\",\n                \"\",\n                \"/// @title Interface for WETH9\",\n                \"interface IWETH9 is IERC20 {\",\n                \"    /// @notice Deposit ether to get wrapped ether\",\n                \"    function deposit() external payable;\",\n                \"\",\n                \"    /// @notice Withdraw wrapped ether to get ether\",\n                \"    function withdraw(uint256) external;\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"29\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"/*\",\n                \" * @title Solidity Bytes Arrays Utils\",\n                \" * @author Gonçalo Sá <goncalo.sa@consensys.net>\",\n                \" *\",\n                \" * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\",\n                \" *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\",\n                \" */\",\n                \"pragma solidity >=0.5.0 <0.8.0;\",\n                \"\",\n                \"library BytesLib {\",\n                \"    function slice(\",\n                \"        bytes memory _bytes,\",\n                \"        uint256 _start,\",\n                \"        uint256 _length\",\n                \"    ) internal pure returns (bytes memory) {\",\n                \"        require(_length + 31 >= _length, 'slice_overflow');\",\n                \"        require(_start + _length >= _start, 'slice_overflow');\",\n                \"        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\",\n                \"\",\n                \"        bytes memory tempBytes;\",\n                \"\",\n                \"        assembly {\",\n                \"            switch iszero(_length)\",\n                \"                case 0 {\",\n                \"                    // Get a location of some free memory and store it in tempBytes as\",\n                \"                    // Solidity does for memory variables.\",\n                \"                    tempBytes := mload(0x40)\",\n                \"\",\n                \"                    // The first word of the slice result is potentially a partial\",\n                \"                    // word read from the original array. To read it, we calculate\",\n                \"                    // the length of that partial word and start copying that many\",\n                \"                    // bytes into the array. The first word we copy will start with\",\n                \"                    // data we don't care about, but the last `lengthmod` bytes will\",\n                \"                    // land at the beginning of the contents of the new array. When\",\n                \"                    // we're done copying, we overwrite the full first word with\",\n                \"                    // the actual length of the slice.\",\n                \"                    let lengthmod := and(_length, 31)\",\n                \"\",\n                \"                    // The multiplication in the next line is necessary\",\n                \"                    // because when slicing multiples of 32 bytes (lengthmod == 0)\",\n                \"                    // the following copy loop was copying the origin's length\",\n                \"                    // and then ending prematurely not copying everything it should.\",\n                \"                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\",\n                \"                    let end := add(mc, _length)\",\n                \"\",\n                \"                    for {\",\n                \"                        // The multiplication in the next line has the same exact purpose\",\n                \"                        // as the one above.\",\n                \"                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\",\n                \"                    } lt(mc, end) {\",\n                \"                        mc := add(mc, 0x20)\",\n                \"                        cc := add(cc, 0x20)\",\n                \"                    } {\",\n                \"                        mstore(mc, mload(cc))\",\n                \"                    }\",\n                \"\",\n                \"                    mstore(tempBytes, _length)\",\n                \"\",\n                \"                    //update free-memory pointer\",\n                \"                    //allocating the array padded to 32 bytes like the compiler does now\",\n                \"                    mstore(0x40, and(add(mc, 31), not(31)))\",\n                \"                }\",\n                \"                //if we want a zero-length slice let's just return a zero-length array\",\n                \"                default {\",\n                \"                    tempBytes := mload(0x40)\",\n                \"                    //zero out the 32 bytes slice we are about to return\",\n                \"                    //we need to do it because Solidity does not garbage collect\",\n                \"                    mstore(tempBytes, 0)\",\n                \"\",\n                \"                    mstore(0x40, add(tempBytes, 0x20))\",\n                \"                }\",\n                \"        }\",\n                \"\",\n                \"        return tempBytes;\",\n                \"    }\",\n                \"\",\n                \"    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\",\n                \"        require(_start + 20 >= _start, 'toAddress_overflow');\",\n                \"        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\",\n                \"        address tempAddress;\",\n                \"\",\n                \"        assembly {\",\n                \"            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\",\n                \"        }\",\n                \"\",\n                \"        return tempAddress;\",\n                \"    }\",\n                \"\",\n                \"    function toUint24(bytes memory _bytes, uint256 _start) internal pure returns (uint24) {\",\n                \"        require(_start + 3 >= _start, 'toUint24_overflow');\",\n                \"        require(_bytes.length >= _start + 3, 'toUint24_outOfBounds');\",\n                \"        uint24 tempUint;\",\n                \"\",\n                \"        assembly {\",\n                \"            tempUint := mload(add(add(_bytes, 0x3), _start))\",\n                \"        }\",\n                \"\",\n                \"        return tempUint;\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"30\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity =0.7.6;\",\n                \"\",\n                \"import '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\",\n                \"import './PoolAddress.sol';\",\n                \"\",\n                \"/// @notice Provides validation for callbacks from Uniswap V3 Pools\",\n                \"library CallbackValidation {\",\n                \"    /// @notice Returns the address of a valid Uniswap V3 Pool\",\n                \"    /// @param factory The contract address of the Uniswap V3 factory\",\n                \"    /// @param tokenA The contract address of either token0 or token1\",\n                \"    /// @param tokenB The contract address of the other token\",\n                \"    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\",\n                \"    /// @return pool The V3 pool contract address\",\n                \"    function verifyCallback(\",\n                \"        address factory,\",\n                \"        address tokenA,\",\n                \"        address tokenB,\",\n                \"        uint24 fee\",\n                \"    ) internal view returns (IUniswapV3Pool pool) {\",\n                \"        return verifyCallback(factory, PoolAddress.getPoolKey(tokenA, tokenB, fee));\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Returns the address of a valid Uniswap V3 Pool\",\n                \"    /// @param factory The contract address of the Uniswap V3 factory\",\n                \"    /// @param poolKey The identifying key of the V3 pool\",\n                \"    /// @return pool The V3 pool contract address\",\n                \"    function verifyCallback(address factory, PoolAddress.PoolKey memory poolKey)\",\n                \"        internal\",\n                \"        view\",\n                \"        returns (IUniswapV3Pool pool)\",\n                \"    {\",\n                \"        pool = IUniswapV3Pool(PoolAddress.computeAddress(factory, poolKey));\",\n                \"        require(msg.sender == address(pool));\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"31\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.6.0;\",\n                \"\",\n                \"import './BytesLib.sol';\",\n                \"\",\n                \"/// @title Functions for manipulating path data for multihop swaps\",\n                \"library Path {\",\n                \"    using BytesLib for bytes;\",\n                \"\",\n                \"    /// @dev The length of the bytes encoded address\",\n                \"    uint256 private constant ADDR_SIZE = 20;\",\n                \"    /// @dev The length of the bytes encoded fee\",\n                \"    uint256 private constant FEE_SIZE = 3;\",\n                \"\",\n                \"    /// @dev The offset of a single token address and pool fee\",\n                \"    uint256 private constant NEXT_OFFSET = ADDR_SIZE + FEE_SIZE;\",\n                \"    /// @dev The offset of an encoded pool key\",\n                \"    uint256 private constant POP_OFFSET = NEXT_OFFSET + ADDR_SIZE;\",\n                \"    /// @dev The minimum length of an encoding that contains 2 or more pools\",\n                \"    uint256 private constant MULTIPLE_POOLS_MIN_LENGTH = POP_OFFSET + NEXT_OFFSET;\",\n                \"\",\n                \"    /// @notice Returns true iff the path contains two or more pools\",\n                \"    /// @param path The encoded swap path\",\n                \"    /// @return True if path contains two or more pools, otherwise false\",\n                \"    function hasMultiplePools(bytes memory path) internal pure returns (bool) {\",\n                \"        return path.length >= MULTIPLE_POOLS_MIN_LENGTH;\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Decodes the first pool in path\",\n                \"    /// @param path The bytes encoded swap path\",\n                \"    /// @return tokenA The first token of the given pool\",\n                \"    /// @return tokenB The second token of the given pool\",\n                \"    /// @return fee The fee level of the pool\",\n                \"    function decodeFirstPool(bytes memory path)\",\n                \"        internal\",\n                \"        pure\",\n                \"        returns (\",\n                \"            address tokenA,\",\n                \"            address tokenB,\",\n                \"            uint24 fee\",\n                \"        )\",\n                \"    {\",\n                \"        tokenA = path.toAddress(0);\",\n                \"        fee = path.toUint24(ADDR_SIZE);\",\n                \"        tokenB = path.toAddress(NEXT_OFFSET);\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Gets the segment corresponding to the first pool in the path\",\n                \"    /// @param path The bytes encoded swap path\",\n                \"    /// @return The segment containing all data necessary to target the first pool in the path\",\n                \"    function getFirstPool(bytes memory path) internal pure returns (bytes memory) {\",\n                \"        return path.slice(0, POP_OFFSET);\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Skips a token + fee element from the buffer and returns the remainder\",\n                \"    /// @param path The swap path\",\n                \"    /// @return The remaining token + fee elements in the path\",\n                \"    function skipToken(bytes memory path) internal pure returns (bytes memory) {\",\n                \"        return path.slice(NEXT_OFFSET, path.length - NEXT_OFFSET);\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"32\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.5.0;\",\n                \"\",\n                \"/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\",\n                \"library PoolAddress {\",\n                \"    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\",\n                \"\",\n                \"    /// @notice The identifying key of the pool\",\n                \"    struct PoolKey {\",\n                \"        address token0;\",\n                \"        address token1;\",\n                \"        uint24 fee;\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\",\n                \"    /// @param tokenA The first token of a pool, unsorted\",\n                \"    /// @param tokenB The second token of a pool, unsorted\",\n                \"    /// @param fee The fee level of the pool\",\n                \"    /// @return Poolkey The pool details with ordered token0 and token1 assignments\",\n                \"    function getPoolKey(\",\n                \"        address tokenA,\",\n                \"        address tokenB,\",\n                \"        uint24 fee\",\n                \"    ) internal pure returns (PoolKey memory) {\",\n                \"        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\",\n                \"        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Deterministically computes the pool address given the factory and PoolKey\",\n                \"    /// @param factory The Uniswap V3 factory contract address\",\n                \"    /// @param key The PoolKey\",\n                \"    /// @return pool The contract address of the V3 pool\",\n                \"    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\",\n                \"        require(key.token0 < key.token1);\",\n                \"        pool = address(\",\n                \"            uint256(\",\n                \"                keccak256(\",\n                \"                    abi.encodePacked(\",\n                \"                        hex'ff',\",\n                \"                        factory,\",\n                \"                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\",\n                \"                        POOL_INIT_CODE_HASH\",\n                \"                    )\",\n                \"                )\",\n                \"            )\",\n                \"        );\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            },\n            \"33\": {\n              \"language\": \"Solidity\",\n              \"lines\": [\n                \"// SPDX-License-Identifier: GPL-2.0-or-later\",\n                \"pragma solidity >=0.6.0;\",\n                \"\",\n                \"import '@openzeppelin/contracts/token/ERC20/IERC20.sol';\",\n                \"\",\n                \"library TransferHelper {\",\n                \"    /// @notice Transfers tokens from the targeted address to the given destination\",\n                \"    /// @notice Errors with 'STF' if transfer fails\",\n                \"    /// @param token The contract address of the token to be transferred\",\n                \"    /// @param from The originating address from which the tokens will be transferred\",\n                \"    /// @param to The destination address of the transfer\",\n                \"    /// @param value The amount to be transferred\",\n                \"    function safeTransferFrom(\",\n                \"        address token,\",\n                \"        address from,\",\n                \"        address to,\",\n                \"        uint256 value\",\n                \"    ) internal {\",\n                \"        (bool success, bytes memory data) =\",\n                \"            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\",\n                \"        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Transfers tokens from msg.sender to a recipient\",\n                \"    /// @dev Errors with ST if transfer fails\",\n                \"    /// @param token The contract address of the token which will be transferred\",\n                \"    /// @param to The recipient of the transfer\",\n                \"    /// @param value The value of the transfer\",\n                \"    function safeTransfer(\",\n                \"        address token,\",\n                \"        address to,\",\n                \"        uint256 value\",\n                \"    ) internal {\",\n                \"        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\",\n                \"        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Approves the stipulated contract to spend the given allowance in the given token\",\n                \"    /// @dev Errors with 'SA' if transfer fails\",\n                \"    /// @param token The contract address of the token to be approved\",\n                \"    /// @param to The target of the approval\",\n                \"    /// @param value The amount of the given token the target will be allowed to spend\",\n                \"    function safeApprove(\",\n                \"        address token,\",\n                \"        address to,\",\n                \"        uint256 value\",\n                \"    ) internal {\",\n                \"        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\",\n                \"        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\",\n                \"    }\",\n                \"\",\n                \"    /// @notice Transfers ETH to the recipient address\",\n                \"    /// @dev Fails with `STE`\",\n                \"    /// @param to The destination of the transfer\",\n                \"    /// @param value The value to be transferred\",\n                \"    function safeTransferETH(address to, uint256 value) internal {\",\n                \"        (bool success, ) = to.call{value: value}(new bytes(0));\",\n                \"        require(success, 'STE');\",\n                \"    }\",\n                \"}\",\n                \"\"\n              ]\n            }\n          },\n          \"sourceRangesById\": {\n            \"35\": {\n              \"source\": {\n                \"id\": \"0\"\n              },\n              \"from\": {\n                \"line\": 12,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 50,\n                \"column\": 0\n              }\n            },\n            \"103\": {\n              \"source\": {\n                \"id\": \"1\"\n              },\n              \"from\": {\n                \"line\": 69,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 69,\n                \"column\": 75\n              }\n            },\n            \"112\": {\n              \"source\": {\n                \"id\": \"1\"\n              },\n              \"from\": {\n                \"line\": 75,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 75,\n                \"column\": 81\n              }\n            },\n            \"113\": {\n              \"source\": {\n                \"id\": \"1\"\n              },\n              \"from\": {\n                \"line\": 7,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 76,\n                \"column\": 0\n              }\n            },\n            \"135\": {\n              \"source\": {\n                \"id\": \"2\"\n              },\n              \"from\": {\n                \"line\": 14,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 23,\n                \"column\": 0\n              }\n            },\n            \"149\": {\n              \"source\": {\n                \"id\": \"3\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 20,\n                \"column\": 0\n              }\n            },\n            \"245\": {\n              \"source\": {\n                \"id\": \"4\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 102,\n                \"column\": 0\n              }\n            },\n            \"276\": {\n              \"source\": {\n                \"id\": \"5\"\n              },\n              \"from\": {\n                \"line\": 6,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 39,\n                \"column\": 0\n              }\n            },\n            \"286\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 10,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 10,\n                \"column\": 54\n              }\n            },\n            \"303\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 20,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 28,\n                \"column\": 5\n              }\n            },\n            \"318\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 37,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 44,\n                \"column\": 5\n              }\n            },\n            \"333\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 54,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 61,\n                \"column\": 5\n              }\n            },\n            \"350\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 71,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 79,\n                \"column\": 5\n              }\n            },\n            \"365\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 88,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 95,\n                \"column\": 5\n              }\n            },\n            \"372\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 102,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 105,\n                \"column\": 5\n              }\n            },\n            \"383\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 112,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 112,\n                \"column\": 116\n              }\n            },\n            \"394\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 119,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 119,\n                \"column\": 110\n              }\n            },\n            \"395\": {\n              \"source\": {\n                \"id\": \"6\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 120,\n                \"column\": 0\n              }\n            },\n            \"435\": {\n              \"source\": {\n                \"id\": \"7\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 34,\n                \"column\": 0\n              }\n            },\n            \"461\": {\n              \"source\": {\n                \"id\": \"8\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 22,\n                \"column\": 0\n              }\n            },\n            \"569\": {\n              \"source\": {\n                \"id\": \"9\"\n              },\n              \"from\": {\n                \"line\": 6,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 115,\n                \"column\": 0\n              }\n            },\n            \"699\": {\n              \"source\": {\n                \"id\": \"10\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 45,\n                \"column\": 0\n              }\n            },\n            \"769\": {\n              \"source\": {\n                \"id\": \"11\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 27,\n                \"column\": 0\n              }\n            },\n            \"1304\": {\n              \"source\": {\n                \"id\": \"12\"\n              },\n              \"from\": {\n                \"line\": 6,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 204,\n                \"column\": 0\n              }\n            },\n            \"1394\": {\n              \"source\": {\n                \"id\": \"13\"\n              },\n              \"from\": {\n                \"line\": 50,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 53,\n                \"column\": 4\n              }\n            },\n            \"1970\": {\n              \"source\": {\n                \"id\": \"13\"\n              },\n              \"from\": {\n                \"line\": 21,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 243,\n                \"column\": 0\n              }\n            },\n            \"1984\": {\n              \"source\": {\n                \"id\": \"14\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 11,\n                \"column\": 0\n              }\n            },\n            \"2069\": {\n              \"source\": {\n                \"id\": \"15\"\n              },\n              \"from\": {\n                \"line\": 8,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 27,\n                \"column\": 0\n              }\n            },\n            \"2100\": {\n              \"source\": {\n                \"id\": \"16\"\n              },\n              \"from\": {\n                \"line\": 7,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 17,\n                \"column\": 0\n              }\n            },\n            \"2310\": {\n              \"source\": {\n                \"id\": \"17\"\n              },\n              \"from\": {\n                \"line\": 12,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 69,\n                \"column\": 0\n              }\n            },\n            \"2491\": {\n              \"source\": {\n                \"id\": \"18\"\n              },\n              \"from\": {\n                \"line\": 12,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 54,\n                \"column\": 0\n              }\n            },\n            \"2511\": {\n              \"source\": {\n                \"id\": \"19\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 10,\n                \"column\": 0\n              }\n            },\n            \"2678\": {\n              \"source\": {\n                \"id\": \"20\"\n              },\n              \"from\": {\n                \"line\": 13,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 62,\n                \"column\": 0\n              }\n            },\n            \"2693\": {\n              \"source\": {\n                \"id\": \"21\"\n              },\n              \"from\": {\n                \"line\": 6,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 12,\n                \"column\": 0\n              }\n            },\n            \"2709\": {\n              \"source\": {\n                \"id\": \"22\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 11,\n                \"column\": 0\n              }\n            },\n            \"2735\": {\n              \"source\": {\n                \"id\": \"23\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 27,\n                \"column\": 0\n              }\n            },\n            \"2768\": {\n              \"source\": {\n                \"id\": \"24\"\n              },\n              \"from\": {\n                \"line\": 7,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 28,\n                \"column\": 0\n              }\n            },\n            \"2836\": {\n              \"source\": {\n                \"id\": \"25\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 75,\n                \"column\": 0\n              }\n            },\n            \"2860\": {\n              \"source\": {\n                \"id\": \"26\"\n              },\n              \"from\": {\n                \"line\": 9,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 18,\n                \"column\": 4\n              }\n            },\n            \"2879\": {\n              \"source\": {\n                \"id\": \"26\"\n              },\n              \"from\": {\n                \"line\": 25,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 31,\n                \"column\": 4\n              }\n            },\n            \"2904\": {\n              \"source\": {\n                \"id\": \"26\"\n              },\n              \"from\": {\n                \"line\": 38,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 47,\n                \"column\": 4\n              }\n            },\n            \"2923\": {\n              \"source\": {\n                \"id\": \"26\"\n              },\n              \"from\": {\n                \"line\": 54,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 60,\n                \"column\": 4\n              }\n            },\n            \"2932\": {\n              \"source\": {\n                \"id\": \"26\"\n              },\n              \"from\": {\n                \"line\": 8,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 66,\n                \"column\": 0\n              }\n            },\n            \"2956\": {\n              \"source\": {\n                \"id\": \"27\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 26,\n                \"column\": 0\n              }\n            },\n            \"2973\": {\n              \"source\": {\n                \"id\": \"28\"\n              },\n              \"from\": {\n                \"line\": 6,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 12,\n                \"column\": 0\n              }\n            },\n            \"3092\": {\n              \"source\": {\n                \"id\": \"29\"\n              },\n              \"from\": {\n                \"line\": 10,\n                \"column\": 2\n              }\n            },\n            \"3154\": {\n              \"source\": {\n                \"id\": \"30\"\n              },\n              \"from\": {\n                \"line\": 7,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 35,\n                \"column\": 0\n              }\n            },\n            \"3269\": {\n              \"source\": {\n                \"id\": \"31\"\n              },\n              \"from\": {\n                \"line\": 6,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 60,\n                \"column\": 0\n              }\n            },\n            \"3282\": {\n              \"source\": {\n                \"id\": \"32\"\n              },\n              \"from\": {\n                \"line\": 8,\n                \"column\": 4\n              },\n              \"to\": {\n                \"line\": 12,\n                \"column\": 4\n              }\n            },\n            \"3361\": {\n              \"source\": {\n                \"id\": \"32\"\n              },\n              \"from\": {\n                \"line\": 4,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 47,\n                \"column\": 0\n              }\n            },\n            \"3532\": {\n              \"source\": {\n                \"id\": \"33\"\n              },\n              \"from\": {\n                \"line\": 5,\n                \"column\": 0\n              },\n              \"to\": {\n                \"line\": 59,\n                \"column\": 0\n              }\n            }\n          }\n        }\n      }\n    },\n    \"desc\": \"Uniswap v3 swap\"\n  }\n]","import './App.css';\nimport EthTxParams from './eth-tx-params';\nimport decodings from './decodings';\nimport * as Codec from '@truffle/codec';\nimport React from 'react';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { template: 0 };\n  }\n\n  render() {\n    const { template } = this.state;\n    const { tx, desc, definitions }= decodings[template];\n    const data = deserializeCalldataDecoding(tx);\n    console.log('Decoding: %o', data);\n \n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Tx Param Component</h1>\n          <a href=\"https://github.com/danfinlay/react-eth-tx-params\">Fork on GitHub</a>\n          <div>\n            {\n              decodings.map((decoding, i) => {\n                return (\n                  <button key={i} onClick={() => {\n                    console.log('trying to click', i);\n                    this.setState({ template: i });\n                  }}>{decodings[i].desc}</button>\n                )  \n              })\n            }\n          </div>\n        </header>\n\n        <main>\n\n          <EthTxParams \n            decoding={data}\n            definitions={definitions}\n          ></EthTxParams>\n\n        </main>\n      </div>\n    );\n  }\n}\n\nfunction deserializeCalldataDecoding(decoding) {\n  console.log('Deserializing decoding: %o', decoding);\n  switch (decoding.kind) {\n    case \"function\": {\n      return {\n        ...decoding,\n        class: Codec.Format.Utils.Serial.deserializeType(decoding.class),\n        arguments: decoding.arguments.map(({ name, value }) => ({\n          name,\n          value: Codec.Format.Utils.Serial.deserializeResult(value)\n        }))\n      };\n    }\n    case \"constructor\": {\n      return {\n        ...decoding,\n        class: Codec.Format.Utils.Serial.deserializeType(decoding.class),\n        arguments: decoding.arguments.map(({ name, value }) => ({\n          name,\n          value: Codec.Format.Utils.Serial.deserializeResult(value)\n        }))\n      };\n    }\n    case \"message\": {\n      return {\n        ...decoding,\n        class: Codec.Format.Utils.Serial.deserializeType(decoding.class)\n      };\n    }\n    case \"unknown\":\n    case \"create\":\n    default:\n      return decoding;\n  }\n}\n  \nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}